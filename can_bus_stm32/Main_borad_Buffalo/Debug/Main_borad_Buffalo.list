
Main_borad_Buffalo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  0800cb80  0800cb80  0001cb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4f0  0800d4f0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4f0  0800d4f0  0001d4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4f8  0800d4f8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4f8  0800d4f8  0001d4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4fc  0800d4fc  0001d4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800d500  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00004528  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200045b8  200045b8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee4d  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004530  00000000  00000000  0003ef09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b10  00000000  00000000  00043440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001950  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e5b  00000000  00000000  000468a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e40b  00000000  00000000  0006b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de72c  00000000  00000000  00089b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168232  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f80  00000000  00000000  00168284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb64 	.word	0x0800cb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800cb64 	.word	0x0800cb64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <PID_Position_Init>:
#include "PID_Position.h"

void PID_Position_Init(PIDController *pid, int N_input) {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]

	for(int i = 0; i< N_input; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e03e      	b.n	8000f9e <PID_Position_Init+0x8e>
	{
		pid->integrator[i] = 0.0f;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	330c      	adds	r3, #12
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
		pid->prevError[i] = 0.0f;
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3310      	adds	r3, #16
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		
		pid->differentiator[i]  = 0.0f;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3312      	adds	r3, #18
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
		pid->prevMeasurement[i] = 0.0f;
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3316      	adds	r3, #22
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
		pid->error_est[i] = 0.0f;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	330a      	adds	r3, #10
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
		pid->derror[i] = 0.0f;
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3306      	adds	r3, #6
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

		pid->out[i] = 0.0f;
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3304      	adds	r3, #4
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
	for(int i = 0; i< N_input; i++)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbbc      	blt.n	8000f20 <PID_Position_Init+0x10>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <PID_Position>:

float PID_Position(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b08b      	sub	sp, #44	; 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	61f8      	str	r0, [r7, #28]
 8000fbc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fc0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fc4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fc8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000fcc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000fd0:	6079      	str	r1, [r7, #4]
	float error = setpoint - measurement;
 8000fd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float propotional = Kp*error;
 8000fe2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->integrator[i] = pid->integrator[i] + 0.5f * Ki *(error + pid->prevError[i])*pid->T;
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	edd7 7a03 	vldr	s15, [r7, #12]
 8001006:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800100a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3310      	adds	r3, #16
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	ed93 6a00 	vldr	s12, [r3]
 800101c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001020:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	edd3 7a05 	vldr	s15, [r3, #20]
 800102e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	330c      	adds	r3, #12
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	edc3 7a00 	vstr	s15, [r3]
	/* Anti-wind-up via integrator clamping */
    	if (pid->integrator[i] > pid->limMaxInt) {
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	330c      	adds	r3, #12
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3304      	adds	r3, #4
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	edd3 7a04 	vldr	s15, [r3, #16]
 800105c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	dd09      	ble.n	800107a <PID_Position+0xc6>
        	pid->integrator[i] = pid->limMaxInt;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	69f9      	ldr	r1, [r7, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	330c      	adds	r3, #12
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e027      	b.n	80010ca <PID_Position+0x116>
    	}
    	else if (pid->integrator[i] < pid->limMinInt) {
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330c      	adds	r3, #12
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3304      	adds	r3, #4
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d509      	bpl.n	80010ae <PID_Position+0xfa>
        	pid->integrator[i] = pid->limMinInt;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	330c      	adds	r3, #12
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3304      	adds	r3, #4
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00d      	b.n	80010ca <PID_Position+0x116>
    	}
    	else{
    		pid->integrator[i] = pid->integrator[i];
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	330c      	adds	r3, #12
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3304      	adds	r3, #4
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	69f9      	ldr	r1, [r7, #28]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	330c      	adds	r3, #12
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3304      	adds	r3, #4
 80010c8:	601a      	str	r2, [r3, #0]
    	}
    	
    	/* Lowpass filter */

	pid->error_est[i] = error - pid->prevError[i];
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3310      	adds	r3, #16
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	330a      	adds	r3, #10
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	edc3 7a00 	vstr	s15, [r3]
	pid->derror[i] = (1 - pid->alpha) * pid->derror[i] + pid->alpha * pid->error_est[i];
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	edd3 6a06 	vldr	s13, [r3, #24]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	330a      	adds	r3, #10
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3306      	adds	r3, #6
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3304      	adds	r3, #4
 8001138:	edc3 7a00 	vstr	s15, [r3]
	pid->differentiator[i] = Kd*(pid->derror[i]/pid->T);
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3306      	adds	r3, #6
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	edd3 6a00 	vldr	s13, [r3]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3312      	adds	r3, #18
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3304      	adds	r3, #4
 800116a:	edc3 7a00 	vstr	s15, [r3]
//	pid->differentiator[i] = pid->alpha*Kd*(error - pid->prevError[i])/pid->T + (1-pid->alpha)*pid->differentiator[i];

	pid->out[i] = propotional + pid->integrator[i] + pid->differentiator[i];
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	330c      	adds	r3, #12
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3312      	adds	r3, #18
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3304      	adds	r3, #4
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3318      	adds	r3, #24
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3304      	adds	r3, #4
 80011a6:	edc3 7a00 	vstr	s15, [r3]
	//satuaration in  pid->out[i];
    	if (pid->out[i] > pid->limMax) {
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3318      	adds	r3, #24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd09      	ble.n	80011de <PID_Position+0x22a>
        	pid->out[i] = pid->limMax;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69f9      	ldr	r1, [r7, #28]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3318      	adds	r3, #24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3304      	adds	r3, #4
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e027      	b.n	800122e <PID_Position+0x27a>
    	}
    	else if (pid->out[i] < pid->limMin) {
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3304      	adds	r3, #4
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d509      	bpl.n	8001212 <PID_Position+0x25e>
        	pid->out[i] = pid->limMin;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	69f9      	ldr	r1, [r7, #28]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3318      	adds	r3, #24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	3304      	adds	r3, #4
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e00d      	b.n	800122e <PID_Position+0x27a>
    	}
    	else{
    		pid->out[i] = pid->out[i];
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3318      	adds	r3, #24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69f9      	ldr	r1, [r7, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3318      	adds	r3, #24
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3304      	adds	r3, #4
 800122c:	601a      	str	r2, [r3, #0]
    	}
    pid->prevError[i] = error;
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3310      	adds	r3, #16
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	601a      	str	r2, [r3, #0]
	return pid->out[i];
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3318      	adds	r3, #24
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	ee07 3a90 	vmov	s15, r3
}
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	372c      	adds	r7, #44	; 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4619      	mov	r1, r3
 800126a:	2007      	movs	r0, #7
 800126c:	f000 faa4 	bl	80017b8 <bno055_writeData>
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4619      	mov	r1, r3
 8001286:	203d      	movs	r0, #61	; 0x3d
 8001288:	f000 fa96 	bl	80017b8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001292:	2013      	movs	r0, #19
 8001294:	f000 fa84 	bl	80017a0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001298:	e002      	b.n	80012a0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800129a:	2007      	movs	r0, #7
 800129c:	f000 fa80 	bl	80017a0 <bno055_delay>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ffe3 	bl	8001278 <bno055_setOperationMode>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80012ba:	200c      	movs	r0, #12
 80012bc:	f7ff ffdc 	bl	8001278 <bno055_setOperationMode>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80012c8:	2120      	movs	r1, #32
 80012ca:	203f      	movs	r0, #63	; 0x3f
 80012cc:	f000 fa74 	bl	80017b8 <bno055_writeData>
  bno055_delay(700);
 80012d0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80012d4:	f000 fa64 	bl	80017a0 <bno055_delay>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  bno055_reset();
 80012e2:	f7ff ffef 	bl	80012c4 <bno055_reset>

  uint8_t id = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 fb4d 	bl	8001990 <bno055_readData>
  if (id != BNO055_ID) {
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2ba0      	cmp	r3, #160	; 0xa0
 80012fa:	d004      	beq.n	8001306 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4619      	mov	r1, r3
 8001300:	4809      	ldr	r0, [pc, #36]	; (8001328 <bno055_setup+0x4c>)
 8001302:	f008 fb7b 	bl	80099fc <iprintf>
  }
  bno055_setPage(0);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff ffa8 	bl	800125c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800130c:	2100      	movs	r1, #0
 800130e:	203f      	movs	r0, #63	; 0x3f
 8001310:	f000 fa52 	bl	80017b8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001314:	f7ff ffc8 	bl	80012a8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001318:	200a      	movs	r0, #10
 800131a:	f000 fa41 	bl	80017a0 <bno055_delay>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0800cb80 	.word	0x0800cb80

0800132c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800132c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001330:	b09e      	sub	sp, #120	; 0x78
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff8e 	bl	800125c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001344:	2b20      	cmp	r3, #32
 8001346:	d108      	bne.n	800135a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001348:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800134c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001350:	2208      	movs	r2, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fb1c 	bl	8001990 <bno055_readData>
 8001358:	e007      	b.n	800136a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800135a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800135e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001362:	2206      	movs	r2, #6
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fb13 	bl	8001990 <bno055_readData>

  double scale = 1;
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <bno055_getVector+0x270>)
 8001370:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001378:	2b0e      	cmp	r3, #14
 800137a:	d109      	bne.n	8001390 <bno055_getVector+0x64>
    scale = magScale;
 800137c:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <bno055_getVector+0x274>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f8b7 	bl	80004f4 <__aeabi_ui2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800138e:	e03e      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001394:	2b08      	cmp	r3, #8
 8001396:	d007      	beq.n	80013a8 <bno055_getVector+0x7c>
 8001398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139c:	2b28      	cmp	r3, #40	; 0x28
 800139e:	d003      	beq.n	80013a8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80013a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a4:	2b2e      	cmp	r3, #46	; 0x2e
 80013a6:	d109      	bne.n	80013bc <bno055_getVector+0x90>
    scale = accelScale;
 80013a8:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <bno055_getVector+0x278>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8a1 	bl	80004f4 <__aeabi_ui2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80013ba:	e028      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80013bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c0:	2b14      	cmp	r3, #20
 80013c2:	d109      	bne.n	80013d8 <bno055_getVector+0xac>
    scale = angularRateScale;
 80013c4:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <bno055_getVector+0x27c>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f893 	bl	80004f4 <__aeabi_ui2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80013d6:	e01a      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80013d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013dc:	2b1a      	cmp	r3, #26
 80013de:	d109      	bne.n	80013f4 <bno055_getVector+0xc8>
    scale = eulerScale;
 80013e0:	4b72      	ldr	r3, [pc, #456]	; (80015ac <bno055_getVector+0x280>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f885 	bl	80004f4 <__aeabi_ui2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80013f2:	e00c      	b.n	800140e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80013f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	d108      	bne.n	800140e <bno055_getVector+0xe2>
    scale = quaScale;
 80013fc:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <bno055_getVector+0x284>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f877 	bl	80004f4 <__aeabi_ui2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2220      	movs	r2, #32
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f008 fae8 	bl	80099ec <memset>
    if (vec == BNO055_VECTOR_QUATERNION) {
 800141c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001420:	2b20      	cmp	r3, #32
 8001422:	d150      	bne.n	80014c6 <bno055_getVector+0x19a>
      xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001424:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b21a      	sxth	r2, r3
 800142c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f86c 	bl	8000514 <__aeabi_i2d>
 800143c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001440:	f7ff f9fc 	bl	800083c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800144c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001458:	b21b      	sxth	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b21b      	sxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f858 	bl	8000514 <__aeabi_i2d>
 8001464:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001468:	f7ff f9e8 	bl	800083c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001474:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	b21a      	sxth	r2, r3
 800147c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21b      	sxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f844 	bl	8000514 <__aeabi_i2d>
 800148c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001490:	f7ff f9d4 	bl	800083c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800149c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f830 	bl	8000514 <__aeabi_i2d>
 80014b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014b8:	f7ff f9c0 	bl	800083c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80014c4:	e03b      	b.n	800153e <bno055_getVector+0x212>
    } else {
      xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80014c6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f81b 	bl	8000514 <__aeabi_i2d>
 80014de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014e2:	f7ff f9ab 	bl	800083c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f807 	bl	8000514 <__aeabi_i2d>
 8001506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800150a:	f7ff f997 	bl	800083c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001516:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fff3 	bl	8000514 <__aeabi_i2d>
 800152e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001532:	f7ff f983 	bl	800083c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return xyz;
 800153e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001542:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800154e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001552:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001556:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800155a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800155e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001562:	ec49 8b14 	vmov	d4, r8, r9
 8001566:	ec45 4b15 	vmov	d5, r4, r5
 800156a:	ec41 0b16 	vmov	d6, r0, r1
 800156e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8001572:	eeb0 0a44 	vmov.f32	s0, s8
 8001576:	eef0 0a64 	vmov.f32	s1, s9
 800157a:	eeb0 1a45 	vmov.f32	s2, s10
 800157e:	eef0 1a65 	vmov.f32	s3, s11
 8001582:	eeb0 2a46 	vmov.f32	s4, s12
 8001586:	eef0 2a66 	vmov.f32	s5, s13
 800158a:	eeb0 3a47 	vmov.f32	s6, s14
 800158e:	eef0 3a67 	vmov.f32	s7, s15
 8001592:	3778      	adds	r7, #120	; 0x78
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800159a:	bf00      	nop
 800159c:	3ff00000 	.word	0x3ff00000
 80015a0:	20000006 	.word	0x20000006
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000002 	.word	0x20000002
 80015ac:	20000004 	.word	0x20000004
 80015b0:	20000008 	.word	0x20000008

080015b4 <bno055_getVectorQuaternion>:
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
  }
  bno055_vector_t bno055_getVectorGravity() {
    return bno055_getVector(BNO055_VECTOR_GRAVITY);
  }
  bno055_vector_t bno055_getVectorQuaternion() {
 80015b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015b8:	b090      	sub	sp, #64	; 0x40
 80015ba:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80015bc:	2020      	movs	r0, #32
 80015be:	f7ff feb5 	bl	800132c <bno055_getVector>
 80015c2:	eeb0 4a40 	vmov.f32	s8, s0
 80015c6:	eef0 4a60 	vmov.f32	s9, s1
 80015ca:	eeb0 5a41 	vmov.f32	s10, s2
 80015ce:	eef0 5a61 	vmov.f32	s11, s3
 80015d2:	eeb0 6a42 	vmov.f32	s12, s4
 80015d6:	eef0 6a62 	vmov.f32	s13, s5
 80015da:	eeb0 7a43 	vmov.f32	s14, s6
 80015de:	eef0 7a63 	vmov.f32	s15, s7
 80015e2:	ed87 4b08 	vstr	d4, [r7, #32]
 80015e6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80015ea:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80015ee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80015f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80015fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001602:	ec49 8b14 	vmov	d4, r8, r9
 8001606:	ec45 4b15 	vmov	d5, r4, r5
 800160a:	ec41 0b16 	vmov	d6, r0, r1
 800160e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8001612:	eeb0 0a44 	vmov.f32	s0, s8
 8001616:	eef0 0a64 	vmov.f32	s1, s9
 800161a:	eeb0 1a45 	vmov.f32	s2, s10
 800161e:	eef0 1a65 	vmov.f32	s3, s11
 8001622:	eeb0 2a46 	vmov.f32	s4, s12
 8001626:	eef0 2a66 	vmov.f32	s5, s13
 800162a:	eeb0 3a47 	vmov.f32	s6, s14
 800162e:	eef0 3a67 	vmov.f32	s7, s15
 8001632:	3740      	adds	r7, #64	; 0x40
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800163c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001644:	4a25      	ldr	r2, [pc, #148]	; (80016dc <MX_CAN1_Init+0xa0>)
 8001646:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <MX_CAN1_Init+0x9c>)
 800164a:	2206      	movs	r2, #6
 800164c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_CAN1_Init+0x9c>)
 800165c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001660:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001664:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001668:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_CAN1_Init+0x9c>)
 800166c:	2200      	movs	r2, #0
 800166e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001672:	2200      	movs	r2, #0
 8001674:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001678:	2200      	movs	r2, #0
 800167a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_CAN1_Init+0x9c>)
 800167e:	2200      	movs	r2, #0
 8001680:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_CAN1_Init+0x9c>)
 800168a:	2200      	movs	r2, #0
 800168c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <MX_CAN1_Init+0x9c>)
 8001690:	f002 fbac 	bl	8003dec <HAL_CAN_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800169a:	f001 f9c9 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016be:	2301      	movs	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 80016c2:	230e      	movs	r3, #14
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80016c6:	463b      	mov	r3, r7
 80016c8:	4619      	mov	r1, r3
 80016ca:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_CAN1_Init+0x9c>)
 80016cc:	f002 fc8a 	bl	8003fe4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000ac 	.word	0x200000ac
 80016dc:	40006400 	.word	0x40006400

080016e0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_CAN_MspInit+0x94>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d134      	bne.n	800176c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_CAN_MspInit+0x98>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <HAL_CAN_MspInit+0x98>)
 800170c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_CAN_MspInit+0x98>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_CAN_MspInit+0x98>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_CAN_MspInit+0x98>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_CAN_MspInit+0x98>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800173a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800174c:	2309      	movs	r3, #9
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <HAL_CAN_MspInit+0x9c>)
 8001758:	f003 fa8c 	bl	8004c74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2105      	movs	r1, #5
 8001760:	2014      	movs	r0, #20
 8001762:	f003 fa5d 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001766:	2014      	movs	r0, #20
 8001768:	f003 fa76 	bl	8004c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40006400 	.word	0x40006400
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <bno055_assignI2C+0x1c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	200000d4 	.word	0x200000d4

080017a0 <bno055_delay>:

void bno055_delay(int time) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fafa 	bl	8003da4 <HAL_Delay>
#endif
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	733b      	strb	r3, [r7, #12]
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80017d0:	4b5a      	ldr	r3, [pc, #360]	; (800193c <bno055_writeData+0x184>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	f107 020c 	add.w	r2, r7, #12
 80017d8:	230a      	movs	r3, #10
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2302      	movs	r3, #2
 80017de:	2150      	movs	r1, #80	; 0x50
 80017e0:	f003 fd42 	bl	8005268 <HAL_I2C_Master_Transmit>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80a0 	beq.w	8001930 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d103      	bne.n	80017fe <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80017f6:	4852      	ldr	r0, [pc, #328]	; (8001940 <bno055_writeData+0x188>)
 80017f8:	f008 f986 	bl	8009b08 <puts>
 80017fc:	e012      	b.n	8001824 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d103      	bne.n	800180c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001804:	484f      	ldr	r0, [pc, #316]	; (8001944 <bno055_writeData+0x18c>)
 8001806:	f008 f97f 	bl	8009b08 <puts>
 800180a:	e00b      	b.n	8001824 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d103      	bne.n	800181a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001812:	484d      	ldr	r0, [pc, #308]	; (8001948 <bno055_writeData+0x190>)
 8001814:	f008 f978 	bl	8009b08 <puts>
 8001818:	e004      	b.n	8001824 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	4619      	mov	r1, r3
 800181e:	484b      	ldr	r0, [pc, #300]	; (800194c <bno055_writeData+0x194>)
 8001820:	f008 f8ec 	bl	80099fc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001824:	4b45      	ldr	r3, [pc, #276]	; (800193c <bno055_writeData+0x184>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f004 f84f 	bl	80058cc <HAL_I2C_GetError>
 800182e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d07e      	beq.n	8001934 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d103      	bne.n	8001844 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800183c:	4844      	ldr	r0, [pc, #272]	; (8001950 <bno055_writeData+0x198>)
 800183e:	f008 f963 	bl	8009b08 <puts>
 8001842:	e021      	b.n	8001888 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d103      	bne.n	8001852 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800184a:	4842      	ldr	r0, [pc, #264]	; (8001954 <bno055_writeData+0x19c>)
 800184c:	f008 f95c 	bl	8009b08 <puts>
 8001850:	e01a      	b.n	8001888 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d103      	bne.n	8001860 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001858:	483f      	ldr	r0, [pc, #252]	; (8001958 <bno055_writeData+0x1a0>)
 800185a:	f008 f955 	bl	8009b08 <puts>
 800185e:	e013      	b.n	8001888 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b08      	cmp	r3, #8
 8001864:	d103      	bne.n	800186e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001866:	483d      	ldr	r0, [pc, #244]	; (800195c <bno055_writeData+0x1a4>)
 8001868:	f008 f94e 	bl	8009b08 <puts>
 800186c:	e00c      	b.n	8001888 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d103      	bne.n	800187c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001874:	483a      	ldr	r0, [pc, #232]	; (8001960 <bno055_writeData+0x1a8>)
 8001876:	f008 f947 	bl	8009b08 <puts>
 800187a:	e005      	b.n	8001888 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b20      	cmp	r3, #32
 8001880:	d102      	bne.n	8001888 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001882:	4838      	ldr	r0, [pc, #224]	; (8001964 <bno055_writeData+0x1ac>)
 8001884:	f008 f940 	bl	8009b08 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <bno055_writeData+0x184>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 f80f 	bl	80058b0 <HAL_I2C_GetState>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800189c:	4832      	ldr	r0, [pc, #200]	; (8001968 <bno055_writeData+0x1b0>)
 800189e:	f008 f933 	bl	8009b08 <puts>
 80018a2:	e048      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d103      	bne.n	80018b2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80018aa:	482f      	ldr	r0, [pc, #188]	; (8001968 <bno055_writeData+0x1b0>)
 80018ac:	f008 f92c 	bl	8009b08 <puts>
 80018b0:	e041      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b24      	cmp	r3, #36	; 0x24
 80018b6:	d103      	bne.n	80018c0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80018b8:	482c      	ldr	r0, [pc, #176]	; (800196c <bno055_writeData+0x1b4>)
 80018ba:	f008 f925 	bl	8009b08 <puts>
 80018be:	e03a      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b21      	cmp	r3, #33	; 0x21
 80018c4:	d103      	bne.n	80018ce <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80018c6:	482a      	ldr	r0, [pc, #168]	; (8001970 <bno055_writeData+0x1b8>)
 80018c8:	f008 f91e 	bl	8009b08 <puts>
 80018cc:	e033      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b22      	cmp	r3, #34	; 0x22
 80018d2:	d103      	bne.n	80018dc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80018d4:	4827      	ldr	r0, [pc, #156]	; (8001974 <bno055_writeData+0x1bc>)
 80018d6:	f008 f917 	bl	8009b08 <puts>
 80018da:	e02c      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b28      	cmp	r3, #40	; 0x28
 80018e0:	d103      	bne.n	80018ea <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80018e2:	4825      	ldr	r0, [pc, #148]	; (8001978 <bno055_writeData+0x1c0>)
 80018e4:	f008 f910 	bl	8009b08 <puts>
 80018e8:	e025      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b29      	cmp	r3, #41	; 0x29
 80018ee:	d103      	bne.n	80018f8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80018f0:	4822      	ldr	r0, [pc, #136]	; (800197c <bno055_writeData+0x1c4>)
 80018f2:	f008 f909 	bl	8009b08 <puts>
 80018f6:	e01e      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	2b2a      	cmp	r3, #42	; 0x2a
 80018fc:	d103      	bne.n	8001906 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80018fe:	4820      	ldr	r0, [pc, #128]	; (8001980 <bno055_writeData+0x1c8>)
 8001900:	f008 f902 	bl	8009b08 <puts>
 8001904:	e017      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b60      	cmp	r3, #96	; 0x60
 800190a:	d103      	bne.n	8001914 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 800190c:	481d      	ldr	r0, [pc, #116]	; (8001984 <bno055_writeData+0x1cc>)
 800190e:	f008 f8fb 	bl	8009b08 <puts>
 8001912:	e010      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2ba0      	cmp	r3, #160	; 0xa0
 8001918:	d103      	bne.n	8001922 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <bno055_writeData+0x1d0>)
 800191c:	f008 f8f4 	bl	8009b08 <puts>
 8001920:	e009      	b.n	8001936 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	2be0      	cmp	r3, #224	; 0xe0
 8001926:	d106      	bne.n	8001936 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <bno055_writeData+0x1d4>)
 800192a:	f008 f8ed 	bl	8009b08 <puts>
 800192e:	e002      	b.n	8001936 <bno055_writeData+0x17e>
    return;
 8001930:	bf00      	nop
 8001932:	e000      	b.n	8001936 <bno055_writeData+0x17e>
    return;
 8001934:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200000d4 	.word	0x200000d4
 8001940:	0800cbd8 	.word	0x0800cbd8
 8001944:	0800cbfc 	.word	0x0800cbfc
 8001948:	0800cc24 	.word	0x0800cc24
 800194c:	0800cc48 	.word	0x0800cc48
 8001950:	0800cc60 	.word	0x0800cc60
 8001954:	0800cc74 	.word	0x0800cc74
 8001958:	0800cc88 	.word	0x0800cc88
 800195c:	0800cc9c 	.word	0x0800cc9c
 8001960:	0800ccb0 	.word	0x0800ccb0
 8001964:	0800ccc4 	.word	0x0800ccc4
 8001968:	0800ccdc 	.word	0x0800ccdc
 800196c:	0800ccf4 	.word	0x0800ccf4
 8001970:	0800cd08 	.word	0x0800cd08
 8001974:	0800cd20 	.word	0x0800cd20
 8001978:	0800cd38 	.word	0x0800cd38
 800197c:	0800cd50 	.word	0x0800cd50
 8001980:	0800cd70 	.word	0x0800cd70
 8001984:	0800cd90 	.word	0x0800cd90
 8001988:	0800cda8 	.word	0x0800cda8
 800198c:	0800cdc0 	.word	0x0800cdc0

08001990 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af02      	add	r7, sp, #8
 8001996:	4603      	mov	r3, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	4613      	mov	r3, r2
 800199e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <bno055_readData+0x40>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	1dfa      	adds	r2, r7, #7
 80019a6:	2364      	movs	r3, #100	; 0x64
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	2150      	movs	r1, #80	; 0x50
 80019ae:	f003 fc5b 	bl	8005268 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <bno055_readData+0x40>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2264      	movs	r2, #100	; 0x64
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	2150      	movs	r1, #80	; 0x50
 80019c2:	f003 fd4f 	bl	8005464 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000d4 	.word	0x200000d4
 80019d4:	00000000 	.word	0x00000000

080019d8 <read_encoder>:
	wheel_velocity_encoder[i] = 2.0 *PI * r*(new_count[i] - old_count[i]) / (CPR * sample_time);
	old_count[i] = new_count[i];
	return wheel_velocity_encoder[i];
}

void read_encoder(Encoder *enc, TIM_HandleTypeDef* timer){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	enc->new_counter = __HAL_TIM_GET_COUNTER(timer);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	605a      	str	r2, [r3, #4]
	enc->counter_status = __HAL_TIM_IS_TIM_COUNTING_DOWN(timer);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b10      	cmp	r3, #16
 80019f8:	bf0c      	ite	eq
 80019fa:	2301      	moveq	r3, #1
 80019fc:	2300      	movne	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	721a      	strb	r2, [r3, #8]
	int16_t count_change = enc->new_counter - enc->counter;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	81fb      	strh	r3, [r7, #14]
	if(enc->counter_status && count_change <0){
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7a1b      	ldrb	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <read_encoder+0x50>
 8001a20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db07      	blt.n	8001a38 <read_encoder+0x60>
		count_change += 65536;
	}else if (!enc->counter_status && count_change > 0){
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7a1b      	ldrb	r3, [r3, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d104      	bne.n	8001a3a <read_encoder+0x62>
 8001a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	e000      	b.n	8001a3a <read_encoder+0x62>
		count_change += 65536;
 8001a38:	bf00      	nop
		count_change -= 65536;
	}
	enc->counter = enc->new_counter;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
	enc->counter_status = (count_change >=0);
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	0bdb      	lsrs	r3, r3, #15
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	721a      	strb	r2, [r3, #8]
	enc->speed = (float)count_change*1000.0f/(CPR_X * sampling_time);
 8001a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001ae8 <read_encoder+0x110>
 8001a62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a66:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001aec <read_encoder+0x114>
 8001a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edc3 7a03 	vstr	s15, [r3, #12]
	enc->rdps = (float)count_change*2*PI*1000.0f/(CPR_X * sampling_time);
 8001a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a84:	ee17 0a90 	vmov	r0, s15
 8001a88:	f7fe fd56 	bl	8000538 <__aeabi_f2d>
 8001a8c:	a312      	add	r3, pc, #72	; (adr r3, 8001ad8 <read_encoder+0x100>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fda9 	bl	80005e8 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <read_encoder+0x118>)
 8001aa4:	f7fe fda0 	bl	80005e8 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	a30b      	add	r3, pc, #44	; (adr r3, 8001ae0 <read_encoder+0x108>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fec1 	bl	800083c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f853 	bl	8000b6c <__aeabi_d2f>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	611a      	str	r2, [r3, #16]
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	5532617c 	.word	0x5532617c
 8001adc:	40092a30 	.word	0x40092a30
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	40cc2a00 	.word	0x40cc2a00
 8001ae8:	447a0000 	.word	0x447a0000
 8001aec:	46615000 	.word	0x46615000
 8001af0:	408f4000 	.word	0x408f4000

08001af4 <ReceiveMode>:
void ReceiveMode(void){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

	if (NRF24_available()) {
 8001af8:	f001 f9c8 	bl	8002e8c <NRF24_available>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <ReceiveMode+0x34>
		NRF24_read(myRxData, 32);
 8001b02:	2120      	movs	r1, #32
 8001b04:	4809      	ldr	r0, [pc, #36]	; (8001b2c <ReceiveMode+0x38>)
 8001b06:	f001 f9c9 	bl	8002e9c <NRF24_read>

		NRF24_writeAckPayload(1, myAckPayload, 32);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <ReceiveMode+0x3c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	4619      	mov	r1, r3
 8001b12:	2001      	movs	r0, #1
 8001b14:	f001 fbff 	bl	8003316 <NRF24_writeAckPayload>
		myRxData[32] = '\r';
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <ReceiveMode+0x38>)
 8001b1a:	220d      	movs	r2, #13
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]
		myRxData[32 + 1] = '\n';
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <ReceiveMode+0x38>)
 8001b22:	220a      	movs	r2, #10
 8001b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200001c4 	.word	0x200001c4
 8001b30:	200001c0 	.word	0x200001c0

08001b34 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <vApplicationGetIdleTaskMemory+0x30>)
 8001b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000268 	.word	0x20000268
 8001b64:	200002bc 	.word	0x200002bc

08001b68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b08e      	sub	sp, #56	; 0x38
 8001b6c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Position_Task */
  osThreadDef(Position_Task, Position_Init, osPriorityNormal, 0, 2200);
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_FREERTOS_Init+0x58>)
 8001b70:	f107 041c 	add.w	r4, r7, #28
 8001b74:	461d      	mov	r5, r3
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Position_TaskHandle = osThreadCreate(osThread(Position_Task), NULL);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 fcc8 	bl	800851e <osThreadCreate>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <MX_FREERTOS_Init+0x5c>)
 8001b92:	6013      	str	r3, [r2, #0]

  /* definition and creation of NRF_Task */
  osThreadDef(NRF_Task, NRF_Init, osPriorityIdle, 0, 1400);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_FREERTOS_Init+0x60>)
 8001b96:	463c      	mov	r4, r7
 8001b98:	461d      	mov	r5, r3
 8001b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NRF_TaskHandle = osThreadCreate(osThread(NRF_Task), NULL);
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 fcb7 	bl	800851e <osThreadCreate>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <MX_FREERTOS_Init+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001bb6:	bf00      	nop
 8001bb8:	3738      	adds	r7, #56	; 0x38
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	0800cdd8 	.word	0x0800cdd8
 8001bc4:	20000260 	.word	0x20000260
 8001bc8:	0800cdf4 	.word	0x0800cdf4
 8001bcc:	20000264 	.word	0x20000264

08001bd0 <Position_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Position_Init */
void Position_Init(void const * argument)
{
 8001bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bd4:	ed2d 8b02 	vpush	{d8}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Position_Init */
	//PID_Controller
	PID_Position_Init(&pid, 3);
 8001bde:	2103      	movs	r1, #3
 8001be0:	48c6      	ldr	r0, [pc, #792]	; (8001efc <Position_Init+0x32c>)
 8001be2:	f7ff f995 	bl	8000f10 <PID_Position_Init>
	pid.limMax = 1.5;
 8001be6:	4bc5      	ldr	r3, [pc, #788]	; (8001efc <Position_Init+0x32c>)
 8001be8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001bec:	609a      	str	r2, [r3, #8]
	pid.limMin = -1.5;
 8001bee:	4bc3      	ldr	r3, [pc, #780]	; (8001efc <Position_Init+0x32c>)
 8001bf0:	4ac3      	ldr	r2, [pc, #780]	; (8001f00 <Position_Init+0x330>)
 8001bf2:	605a      	str	r2, [r3, #4]
	pid.limMaxInt = 1.5;
 8001bf4:	4bc1      	ldr	r3, [pc, #772]	; (8001efc <Position_Init+0x32c>)
 8001bf6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001bfa:	611a      	str	r2, [r3, #16]
	pid.limMinInt = -1.5;
 8001bfc:	4bbf      	ldr	r3, [pc, #764]	; (8001efc <Position_Init+0x32c>)
 8001bfe:	4ac0      	ldr	r2, [pc, #768]	; (8001f00 <Position_Init+0x330>)
 8001c00:	60da      	str	r2, [r3, #12]
	pid.T = dt;
 8001c02:	4bbe      	ldr	r3, [pc, #760]	; (8001efc <Position_Init+0x32c>)
 8001c04:	4abf      	ldr	r2, [pc, #764]	; (8001f04 <Position_Init+0x334>)
 8001c06:	615a      	str	r2, [r3, #20]
	pid.alpha = 0.8;
 8001c08:	4bbc      	ldr	r3, [pc, #752]	; (8001efc <Position_Init+0x32c>)
 8001c0a:	4abf      	ldr	r2, [pc, #764]	; (8001f08 <Position_Init+0x338>)
 8001c0c:	619a      	str	r2, [r3, #24]

	//Sensor Feed_back
//	Mecanum_Init(&mec, r, lx, ly);
	bno055_assignI2C(&hi2c1);
 8001c0e:	48bf      	ldr	r0, [pc, #764]	; (8001f0c <Position_Init+0x33c>)
 8001c10:	f7ff fdb6 	bl	8001780 <bno055_assignI2C>
	bno055_setup();
 8001c14:	f7ff fb62 	bl	80012dc <bno055_setup>
	bno055_setOperationModeNDOF();
 8001c18:	f7ff fb4d 	bl	80012b6 <bno055_setOperationModeNDOF>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	48bc      	ldr	r0, [pc, #752]	; (8001f10 <Position_Init+0x340>)
 8001c20:	f005 fd26 	bl	8007670 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8001c24:	2104      	movs	r1, #4
 8001c26:	48bb      	ldr	r0, [pc, #748]	; (8001f14 <Position_Init+0x344>)
 8001c28:	f005 fd22 	bl	8007670 <HAL_TIM_Encoder_Start>
//	SSD1306_UpdateScreen();
  /* Infinite loop */
  for(;;)
  {
	  //*** Calculate PID ******//
		Output_Vx = PID_Position(&pid, X_end, X_enR, Kp_X, Ki_X, Kd_X, X);
 8001c2c:	4bba      	ldr	r3, [pc, #744]	; (8001f18 <Position_Init+0x348>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	4bba      	ldr	r3, [pc, #744]	; (8001f1c <Position_Init+0x34c>)
 8001c34:	ed93 7a00 	vldr	s14, [r3]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8001f20 <Position_Init+0x350>
 8001c3e:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8001f24 <Position_Init+0x354>
 8001c42:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 8001c46:	eef0 0a47 	vmov.f32	s1, s14
 8001c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4e:	48ab      	ldr	r0, [pc, #684]	; (8001efc <Position_Init+0x32c>)
 8001c50:	f7ff f9b0 	bl	8000fb4 <PID_Position>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	4bb3      	ldr	r3, [pc, #716]	; (8001f28 <Position_Init+0x358>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
		Output_Vy = PID_Position(&pid, Y_end, Y_enR, Kp_Y, Ki_Y, Kd_Y, Y);
 8001c5e:	4bb3      	ldr	r3, [pc, #716]	; (8001f2c <Position_Init+0x35c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	4bb2      	ldr	r3, [pc, #712]	; (8001f30 <Position_Init+0x360>)
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	ed9f 2aac 	vldr	s4, [pc, #688]	; 8001f20 <Position_Init+0x350>
 8001c70:	eddf 1aac 	vldr	s3, [pc, #688]	; 8001f24 <Position_Init+0x354>
 8001c74:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 8001c78:	eef0 0a47 	vmov.f32	s1, s14
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	489e      	ldr	r0, [pc, #632]	; (8001efc <Position_Init+0x32c>)
 8001c82:	f7ff f997 	bl	8000fb4 <PID_Position>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	4baa      	ldr	r3, [pc, #680]	; (8001f34 <Position_Init+0x364>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
		Output_Omega = PID_Position(&pid, Yaw_end, theta, Kp_Yaw, Ki_Yaw,Kd_Yaw, YAW);
 8001c90:	4ba9      	ldr	r3, [pc, #676]	; (8001f38 <Position_Init+0x368>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	4ba9      	ldr	r3, [pc, #676]	; (8001f3c <Position_Init+0x36c>)
 8001c98:	ed93 7a00 	vldr	s14, [r3]
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 8001f20 <Position_Init+0x350>
 8001ca2:	eddf 1aa7 	vldr	s3, [pc, #668]	; 8001f40 <Position_Init+0x370>
 8001ca6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001caa:	eef0 0a47 	vmov.f32	s1, s14
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	4892      	ldr	r0, [pc, #584]	; (8001efc <Position_Init+0x32c>)
 8001cb4:	f7ff f97e 	bl	8000fb4 <PID_Position>
 8001cb8:	eef0 7a40 	vmov.f32	s15, s0
 8001cbc:	4ba1      	ldr	r3, [pc, #644]	; (8001f44 <Position_Init+0x374>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
		Vx = Output_Vx * cos(theta) - Output_Vy * sin(theta);
 8001cc2:	4b99      	ldr	r3, [pc, #612]	; (8001f28 <Position_Init+0x358>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc36 	bl	8000538 <__aeabi_f2d>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	460d      	mov	r5, r1
 8001cd0:	4b9a      	ldr	r3, [pc, #616]	; (8001f3c <Position_Init+0x36c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc2f 	bl	8000538 <__aeabi_f2d>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ec43 2b10 	vmov	d0, r2, r3
 8001ce2:	f008 fe91 	bl	800aa08 <cos>
 8001ce6:	ec53 2b10 	vmov	r2, r3, d0
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe fc7b 	bl	80005e8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4690      	mov	r8, r2
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <Position_Init+0x364>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc1a 	bl	8000538 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <Position_Init+0x36c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc13 	bl	8000538 <__aeabi_f2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	ec43 2b10 	vmov	d0, r2, r3
 8001d1a:	f008 fec9 	bl	800aab0 <sin>
 8001d1e:	ec53 2b10 	vmov	r2, r3, d0
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fc5f 	bl	80005e8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4640      	mov	r0, r8
 8001d30:	4649      	mov	r1, r9
 8001d32:	f7fe faa1 	bl	8000278 <__aeabi_dsub>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe ff15 	bl	8000b6c <__aeabi_d2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a80      	ldr	r2, [pc, #512]	; (8001f48 <Position_Init+0x378>)
 8001d46:	6013      	str	r3, [r2, #0]
		Vy = Output_Vx * sin(theta) + Output_Vy * cos(theta);
 8001d48:	4b77      	ldr	r3, [pc, #476]	; (8001f28 <Position_Init+0x358>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbf3 	bl	8000538 <__aeabi_f2d>
 8001d52:	4604      	mov	r4, r0
 8001d54:	460d      	mov	r5, r1
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <Position_Init+0x36c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbec 	bl	8000538 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ec43 2b10 	vmov	d0, r2, r3
 8001d68:	f008 fea2 	bl	800aab0 <sin>
 8001d6c:	ec53 2b10 	vmov	r2, r3, d0
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fc38 	bl	80005e8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4699      	mov	r9, r3
 8001d80:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <Position_Init+0x364>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbd7 	bl	8000538 <__aeabi_f2d>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <Position_Init+0x36c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbd0 	bl	8000538 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	ec43 2b10 	vmov	d0, r2, r3
 8001da0:	f008 fe32 	bl	800aa08 <cos>
 8001da4:	ec53 2b10 	vmov	r2, r3, d0
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fc1c 	bl	80005e8 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4640      	mov	r0, r8
 8001db6:	4649      	mov	r1, r9
 8001db8:	f7fe fa60 	bl	800027c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fed2 	bl	8000b6c <__aeabi_d2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <Position_Init+0x37c>)
 8001dcc:	6013      	str	r3, [r2, #0]
		Omega = Output_Omega;
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <Position_Init+0x374>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5f      	ldr	r2, [pc, #380]	; (8001f50 <Position_Init+0x380>)
 8001dd4:	6013      	str	r3, [r2, #0]
//		}

	//**** Position From Rotary encoder and IMU   *****//

		// Qauternion_to_Euler(Angle);
		Q = bno055_getVectorQuaternion();
 8001dd6:	f7ff fbed 	bl	80015b4 <bno055_getVectorQuaternion>
 8001dda:	eeb0 4a40 	vmov.f32	s8, s0
 8001dde:	eef0 4a60 	vmov.f32	s9, s1
 8001de2:	eeb0 5a41 	vmov.f32	s10, s2
 8001de6:	eef0 5a61 	vmov.f32	s11, s3
 8001dea:	eeb0 6a42 	vmov.f32	s12, s4
 8001dee:	eef0 6a62 	vmov.f32	s13, s5
 8001df2:	eeb0 7a43 	vmov.f32	s14, s6
 8001df6:	eef0 7a63 	vmov.f32	s15, s7
 8001dfa:	4b56      	ldr	r3, [pc, #344]	; (8001f54 <Position_Init+0x384>)
 8001dfc:	ed83 4b00 	vstr	d4, [r3]
 8001e00:	ed83 5b02 	vstr	d5, [r3, #8]
 8001e04:	ed83 6b04 	vstr	d6, [r3, #16]
 8001e08:	ed83 7b06 	vstr	d7, [r3, #24]
		// yaw (z-axis rotation)
		siny_cosp = 2 * (Q.w * Q.z + Q.x * Q.y);
 8001e0c:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <Position_Init+0x384>)
 8001e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <Position_Init+0x384>)
 8001e14:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e18:	f7fe fbe6 	bl	80005e8 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4614      	mov	r4, r2
 8001e22:	461d      	mov	r5, r3
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <Position_Init+0x384>)
 8001e26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <Position_Init+0x384>)
 8001e2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e30:	f7fe fbda 	bl	80005e8 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4620      	mov	r0, r4
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	f7fe fa1e 	bl	800027c <__adddf3>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	f7fe fa16 	bl	800027c <__adddf3>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4940      	ldr	r1, [pc, #256]	; (8001f58 <Position_Init+0x388>)
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
		cosy_cosp = 1 - 2 * (Q.y * Q.y + Q.z * Q.z);
 8001e5a:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <Position_Init+0x384>)
 8001e5c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <Position_Init+0x384>)
 8001e62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e66:	f7fe fbbf 	bl	80005e8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <Position_Init+0x384>)
 8001e74:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <Position_Init+0x384>)
 8001e7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e7e:	f7fe fbb3 	bl	80005e8 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f7fe f9f7 	bl	800027c <__adddf3>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	f7fe f9ef 	bl	800027c <__adddf3>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	492d      	ldr	r1, [pc, #180]	; (8001f5c <Position_Init+0x38c>)
 8001ea8:	f7fe f9e6 	bl	8000278 <__aeabi_dsub>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	492b      	ldr	r1, [pc, #172]	; (8001f60 <Position_Init+0x390>)
 8001eb2:	e9c1 2300 	strd	r2, r3, [r1]
		Angle.Yaw = atan2(siny_cosp, cosy_cosp);
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <Position_Init+0x388>)
 8001eb8:	ed93 7b00 	vldr	d7, [r3]
 8001ebc:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <Position_Init+0x390>)
 8001ebe:	ed93 6b00 	vldr	d6, [r3]
 8001ec2:	eeb0 1a46 	vmov.f32	s2, s12
 8001ec6:	eef0 1a66 	vmov.f32	s3, s13
 8001eca:	eeb0 0a47 	vmov.f32	s0, s14
 8001ece:	eef0 0a67 	vmov.f32	s1, s15
 8001ed2:	f008 fecf 	bl	800ac74 <atan2>
 8001ed6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eda:	eef0 7a60 	vmov.f32	s15, s1
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <Position_Init+0x394>)
 8001ee0:	ed83 7b04 	vstr	d7, [r3, #16]
		theta = Angle.Yaw; // [radians]
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <Position_Init+0x394>)
 8001ee6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fe3d 	bl	8000b6c <__aeabi_d2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <Position_Init+0x36c>)
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e036      	b.n	8001f68 <Position_Init+0x398>
 8001efa:	bf00      	nop
 8001efc:	200000d8 	.word	0x200000d8
 8001f00:	bfc00000 	.word	0xbfc00000
 8001f04:	3c23d70a 	.word	0x3c23d70a
 8001f08:	3f4ccccd 	.word	0x3f4ccccd
 8001f0c:	200004bc 	.word	0x200004bc
 8001f10:	200006ec 	.word	0x200006ec
 8001f14:	20000734 	.word	0x20000734
 8001f18:	20000218 	.word	0x20000218
 8001f1c:	20000248 	.word	0x20000248
 8001f20:	3ca3d70a 	.word	0x3ca3d70a
 8001f24:	3b03126f 	.word	0x3b03126f
 8001f28:	20000224 	.word	0x20000224
 8001f2c:	2000021c 	.word	0x2000021c
 8001f30:	2000024c 	.word	0x2000024c
 8001f34:	20000228 	.word	0x20000228
 8001f38:	20000220 	.word	0x20000220
 8001f3c:	20000214 	.word	0x20000214
 8001f40:	3a83126f 	.word	0x3a83126f
 8001f44:	2000022c 	.word	0x2000022c
 8001f48:	200001fc 	.word	0x200001fc
 8001f4c:	20000200 	.word	0x20000200
 8001f50:	20000204 	.word	0x20000204
 8001f54:	200001a0 	.word	0x200001a0
 8001f58:	20000250 	.word	0x20000250
 8001f5c:	3ff00000 	.word	0x3ff00000
 8001f60:	20000258 	.word	0x20000258
 8001f64:	20000188 	.word	0x20000188
		// Encoder Feedback
		read_encoder(&encoder0, &htim1);
 8001f68:	4961      	ldr	r1, [pc, #388]	; (80020f0 <Position_Init+0x520>)
 8001f6a:	4862      	ldr	r0, [pc, #392]	; (80020f4 <Position_Init+0x524>)
 8001f6c:	f7ff fd34 	bl	80019d8 <read_encoder>
		read_encoder(&encoder1, &htim2);
 8001f70:	4961      	ldr	r1, [pc, #388]	; (80020f8 <Position_Init+0x528>)
 8001f72:	4862      	ldr	r0, [pc, #392]	; (80020fc <Position_Init+0x52c>)
 8001f74:	f7ff fd30 	bl	80019d8 <read_encoder>
		W1 = (double)encoder1.rdps*r;
 8001f78:	4b60      	ldr	r3, [pc, #384]	; (80020fc <Position_Init+0x52c>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fadb 	bl	8000538 <__aeabi_f2d>
 8001f82:	a357      	add	r3, pc, #348	; (adr r3, 80020e0 <Position_Init+0x510>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb2e 	bl	80005e8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fdea 	bl	8000b6c <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a59      	ldr	r2, [pc, #356]	; (8002100 <Position_Init+0x530>)
 8001f9c:	6013      	str	r3, [r2, #0]
		W2 = (double)encoder0.rdps*r;
 8001f9e:	4b55      	ldr	r3, [pc, #340]	; (80020f4 <Position_Init+0x524>)
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fac8 	bl	8000538 <__aeabi_f2d>
 8001fa8:	a34d      	add	r3, pc, #308	; (adr r3, 80020e0 <Position_Init+0x510>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb1b 	bl	80005e8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fdd7 	bl	8000b6c <__aeabi_d2f>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a50      	ldr	r2, [pc, #320]	; (8002104 <Position_Init+0x534>)
 8001fc2:	6013      	str	r3, [r2, #0]
		Vx_enR = W1 * cosf(theta) - W2 * sinf(theta);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <Position_Init+0x538>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	f008 fdc7 	bl	800ab60 <cosf>
 8001fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <Position_Init+0x530>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001fe0:	4b49      	ldr	r3, [pc, #292]	; (8002108 <Position_Init+0x538>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fea:	f008 fdfd 	bl	800abe8 <sinf>
 8001fee:	eeb0 7a40 	vmov.f32	s14, s0
 8001ff2:	4b44      	ldr	r3, [pc, #272]	; (8002104 <Position_Init+0x534>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <Position_Init+0x53c>)
 8002002:	edc3 7a00 	vstr	s15, [r3]
		Vy_enR = W1 * sinf(theta) + W2 * cosf(theta);
 8002006:	4b40      	ldr	r3, [pc, #256]	; (8002108 <Position_Init+0x538>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	eeb0 0a67 	vmov.f32	s0, s15
 8002010:	f008 fdea 	bl	800abe8 <sinf>
 8002014:	eeb0 7a40 	vmov.f32	s14, s0
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <Position_Init+0x530>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <Position_Init+0x538>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	eeb0 0a67 	vmov.f32	s0, s15
 800202c:	f008 fd98 	bl	800ab60 <cosf>
 8002030:	eeb0 7a40 	vmov.f32	s14, s0
 8002034:	4b33      	ldr	r3, [pc, #204]	; (8002104 <Position_Init+0x534>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <Position_Init+0x540>)
 8002044:	edc3 7a00 	vstr	s15, [r3]
		X_enR = X_old_enR + Vx_enR * dt;
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <Position_Init+0x544>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fa73 	bl	8000538 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	4b2d      	ldr	r3, [pc, #180]	; (800210c <Position_Init+0x53c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa6c 	bl	8000538 <__aeabi_f2d>
 8002060:	a321      	add	r3, pc, #132	; (adr r3, 80020e8 <Position_Init+0x518>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fabf 	bl	80005e8 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f903 	bl	800027c <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fd75 	bl	8000b6c <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a24      	ldr	r2, [pc, #144]	; (8002118 <Position_Init+0x548>)
 8002086:	6013      	str	r3, [r2, #0]
		Y_enR = Y_old_enR + Vy_enR * dt;
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <Position_Init+0x54c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa53 	bl	8000538 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <Position_Init+0x540>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa4c 	bl	8000538 <__aeabi_f2d>
 80020a0:	a311      	add	r3, pc, #68	; (adr r3, 80020e8 <Position_Init+0x518>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa9f 	bl	80005e8 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4620      	mov	r0, r4
 80020b0:	4629      	mov	r1, r5
 80020b2:	f7fe f8e3 	bl	800027c <__adddf3>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd55 	bl	8000b6c <__aeabi_d2f>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4a16      	ldr	r2, [pc, #88]	; (8002120 <Position_Init+0x550>)
 80020c6:	6013      	str	r3, [r2, #0]

		X_old_enR = X_enR;
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <Position_Init+0x548>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <Position_Init+0x544>)
 80020ce:	6013      	str	r3, [r2, #0]
		Y_old_enR = Y_enR;
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <Position_Init+0x550>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <Position_Init+0x54c>)
 80020d6:	6013      	str	r3, [r2, #0]
//		SSD1306_GotoXY(50, 30);
//		SSD1306_Puts(YRum, &Font_7x10, 1);
//		SSD1306_GotoXY(50, 50);
//		SSD1306_Puts(Ium, &Font_7x10, 1);
//		SSD1306_UpdateScreen();
    osDelay(10);
 80020d8:	200a      	movs	r0, #10
 80020da:	f006 fa6c 	bl	80085b6 <osDelay>
		Output_Vx = PID_Position(&pid, X_end, X_enR, Kp_X, Ki_X, Kd_X, X);
 80020de:	e5a5      	b.n	8001c2c <Position_Init+0x5c>
 80020e0:	eb851eb8 	.word	0xeb851eb8
 80020e4:	3f9eb851 	.word	0x3f9eb851
 80020e8:	47ae147b 	.word	0x47ae147b
 80020ec:	3f847ae1 	.word	0x3f847ae1
 80020f0:	200006ec 	.word	0x200006ec
 80020f4:	20000148 	.word	0x20000148
 80020f8:	20000734 	.word	0x20000734
 80020fc:	20000168 	.word	0x20000168
 8002100:	20000230 	.word	0x20000230
 8002104:	20000234 	.word	0x20000234
 8002108:	20000214 	.word	0x20000214
 800210c:	20000238 	.word	0x20000238
 8002110:	2000023c 	.word	0x2000023c
 8002114:	20000240 	.word	0x20000240
 8002118:	20000248 	.word	0x20000248
 800211c:	20000244 	.word	0x20000244
 8002120:	2000024c 	.word	0x2000024c

08002124 <NRF_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NRF_Init */
void NRF_Init(void const * argument)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b098      	sub	sp, #96	; 0x60
 8002128:	af16      	add	r7, sp, #88	; 0x58
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NRF_Init */
	//-----------------------------nrf-startup----------------------------------
	NRF24_begin(GPIOA, GPIOA, GPIO_PIN_3, GPIO_PIN_4, hspi1);
 800212c:	4a55      	ldr	r2, [pc, #340]	; (8002284 <NRF_Init+0x160>)
 800212e:	466b      	mov	r3, sp
 8002130:	4611      	mov	r1, r2
 8002132:	2258      	movs	r2, #88	; 0x58
 8002134:	4618      	mov	r0, r3
 8002136:	f007 fc4b 	bl	80099d0 <memcpy>
 800213a:	2310      	movs	r3, #16
 800213c:	2208      	movs	r2, #8
 800213e:	4952      	ldr	r1, [pc, #328]	; (8002288 <NRF_Init+0x164>)
 8002140:	4851      	ldr	r0, [pc, #324]	; (8002288 <NRF_Init+0x164>)
 8002142:	f000 fd9d 	bl	8002c80 <NRF24_begin>
	//-----------------------------Rx-setting----------------------------------
	NRF24_setAutoAck(true);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 ffea 	bl	8003120 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 800214c:	2034      	movs	r0, #52	; 0x34
 800214e:	f000 ff2e 	bl	8002fae <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8002152:	2020      	movs	r0, #32
 8002154:	f000 ff40 	bl	8002fd8 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 8002158:	4b4c      	ldr	r3, [pc, #304]	; (800228c <NRF_Init+0x168>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	2001      	movs	r0, #1
 8002160:	f000 febc 	bl	8002edc <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 8002164:	f000 ff92 	bl	800308c <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8002168:	f000 ff62 	bl	8003030 <NRF24_enableAckPayload>
	NRF24_startListening();
 800216c:	f000 fe68 	bl	8002e40 <NRF24_startListening>
  /* Infinite loop */
  for(;;)
  {
	  ReceiveMode();
 8002170:	f7ff fcc0 	bl	8001af4 <ReceiveMode>
//			VyawM = 0;
//		}


		/**** Auto ***********/
		if (myRxData[4] == 10) { // goal 1
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <NRF_Init+0x16c>)
 8002176:	791b      	ldrb	r3, [r3, #4]
 8002178:	2b0a      	cmp	r3, #10
 800217a:	d116      	bne.n	80021aa <NRF_Init+0x86>
			X_Start = X_enR;
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <NRF_Init+0x170>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a45      	ldr	r2, [pc, #276]	; (8002298 <NRF_Init+0x174>)
 8002182:	6013      	str	r3, [r2, #0]
			Y_Start = Y_enR;
 8002184:	4b45      	ldr	r3, [pc, #276]	; (800229c <NRF_Init+0x178>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a45      	ldr	r2, [pc, #276]	; (80022a0 <NRF_Init+0x17c>)
 800218a:	6013      	str	r3, [r2, #0]
			Yaw_Start = theta;
 800218c:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <NRF_Init+0x180>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <NRF_Init+0x184>)
 8002192:	6013      	str	r3, [r2, #0]
			X_end = 6.05;
 8002194:	4b45      	ldr	r3, [pc, #276]	; (80022ac <NRF_Init+0x188>)
 8002196:	4a46      	ldr	r2, [pc, #280]	; (80022b0 <NRF_Init+0x18c>)
 8002198:	601a      	str	r2, [r3, #0]
			Y_end = 0.0;
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <NRF_Init+0x190>)
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
			Yaw_end = 0.0;
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <NRF_Init+0x194>)
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
		}
		if (myRxData[5] == 20) { // goal2
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <NRF_Init+0x16c>)
 80021ac:	795b      	ldrb	r3, [r3, #5]
 80021ae:	2b14      	cmp	r3, #20
 80021b0:	d115      	bne.n	80021de <NRF_Init+0xba>
			X_Start = X_enR;
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <NRF_Init+0x170>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a38      	ldr	r2, [pc, #224]	; (8002298 <NRF_Init+0x174>)
 80021b8:	6013      	str	r3, [r2, #0]
			Y_Start = Y_enR;
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <NRF_Init+0x178>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a38      	ldr	r2, [pc, #224]	; (80022a0 <NRF_Init+0x17c>)
 80021c0:	6013      	str	r3, [r2, #0]
			Yaw_Start = theta;
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <NRF_Init+0x180>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <NRF_Init+0x184>)
 80021c8:	6013      	str	r3, [r2, #0]
			X_end = 6.05;
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <NRF_Init+0x188>)
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <NRF_Init+0x18c>)
 80021ce:	601a      	str	r2, [r3, #0]
			Y_end = -3.8;
 80021d0:	4b38      	ldr	r3, [pc, #224]	; (80022b4 <NRF_Init+0x190>)
 80021d2:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <NRF_Init+0x198>)
 80021d4:	601a      	str	r2, [r3, #0]
			Yaw_end = 0.0;
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <NRF_Init+0x194>)
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
		}
		if (myRxData[6] == 30) { // goal3
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <NRF_Init+0x16c>)
 80021e0:	799b      	ldrb	r3, [r3, #6]
 80021e2:	2b1e      	cmp	r3, #30
 80021e4:	d115      	bne.n	8002212 <NRF_Init+0xee>
			X_Start = X_enR;
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <NRF_Init+0x170>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <NRF_Init+0x174>)
 80021ec:	6013      	str	r3, [r2, #0]
			Y_Start = Y_enR;
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <NRF_Init+0x178>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <NRF_Init+0x17c>)
 80021f4:	6013      	str	r3, [r2, #0]
			Yaw_Start = theta;
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <NRF_Init+0x180>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <NRF_Init+0x184>)
 80021fc:	6013      	str	r3, [r2, #0]
			X_end = 9.0;
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <NRF_Init+0x188>)
 8002200:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <NRF_Init+0x19c>)
 8002202:	601a      	str	r2, [r3, #0]
			Y_end = -3.8;
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <NRF_Init+0x190>)
 8002206:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <NRF_Init+0x198>)
 8002208:	601a      	str	r2, [r3, #0]
			Yaw_end = 0.0;
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <NRF_Init+0x194>)
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
		}
		if (myRxData[7] == 40) { // goal 4
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <NRF_Init+0x16c>)
 8002214:	79db      	ldrb	r3, [r3, #7]
 8002216:	2b28      	cmp	r3, #40	; 0x28
 8002218:	d114      	bne.n	8002244 <NRF_Init+0x120>
			X_Start = X_enR;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <NRF_Init+0x170>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <NRF_Init+0x174>)
 8002220:	6013      	str	r3, [r2, #0]
			Y_Start = Y_enR;
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <NRF_Init+0x178>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <NRF_Init+0x17c>)
 8002228:	6013      	str	r3, [r2, #0]
			Yaw_Start = theta;
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <NRF_Init+0x180>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <NRF_Init+0x184>)
 8002230:	6013      	str	r3, [r2, #0]
			X_end = 10.0;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <NRF_Init+0x188>)
 8002234:	4a23      	ldr	r2, [pc, #140]	; (80022c4 <NRF_Init+0x1a0>)
 8002236:	601a      	str	r2, [r3, #0]
			Y_end = -1.2;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <NRF_Init+0x190>)
 800223a:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <NRF_Init+0x1a4>)
 800223c:	601a      	str	r2, [r3, #0]
			Yaw_end = 0.8;
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <NRF_Init+0x194>)
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <NRF_Init+0x1a8>)
 8002242:	601a      	str	r2, [r3, #0]
		}
		if (myRxData[8] == 50) // back (0,0,0)
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <NRF_Init+0x16c>)
 8002246:	7a1b      	ldrb	r3, [r3, #8]
 8002248:	2b32      	cmp	r3, #50	; 0x32
 800224a:	d117      	bne.n	800227c <NRF_Init+0x158>
		{
			X_Start = X_enR;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <NRF_Init+0x170>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <NRF_Init+0x174>)
 8002252:	6013      	str	r3, [r2, #0]
			Y_Start = Y_enR;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <NRF_Init+0x178>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <NRF_Init+0x17c>)
 800225a:	6013      	str	r3, [r2, #0]
			Yaw_Start = theta;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <NRF_Init+0x180>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <NRF_Init+0x184>)
 8002262:	6013      	str	r3, [r2, #0]
			X_end = 0.0;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <NRF_Init+0x188>)
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
			Y_end = 0.0;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <NRF_Init+0x190>)
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
			Yaw_end = 0.0;
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <NRF_Init+0x194>)
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
//		{
//			mode = 1;
//		}


    osDelay(20);
 800227c:	2014      	movs	r0, #20
 800227e:	f006 f99a 	bl	80085b6 <osDelay>
	  ReceiveMode();
 8002282:	e775      	b.n	8002170 <NRF_Init+0x4c>
 8002284:	20000648 	.word	0x20000648
 8002288:	40020000 	.word	0x40020000
 800228c:	20000010 	.word	0x20000010
 8002290:	200001c4 	.word	0x200001c4
 8002294:	20000248 	.word	0x20000248
 8002298:	20000208 	.word	0x20000208
 800229c:	2000024c 	.word	0x2000024c
 80022a0:	2000020c 	.word	0x2000020c
 80022a4:	20000214 	.word	0x20000214
 80022a8:	20000210 	.word	0x20000210
 80022ac:	20000218 	.word	0x20000218
 80022b0:	40c1999a 	.word	0x40c1999a
 80022b4:	2000021c 	.word	0x2000021c
 80022b8:	20000220 	.word	0x20000220
 80022bc:	c0733333 	.word	0xc0733333
 80022c0:	41100000 	.word	0x41100000
 80022c4:	41200000 	.word	0x41200000
 80022c8:	bf99999a 	.word	0xbf99999a
 80022cc:	3f4ccccd 	.word	0x3f4ccccd

080022d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <MX_GPIO_Init+0xb4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <MX_GPIO_Init+0xb4>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <MX_GPIO_Init+0xb4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a1e      	ldr	r2, [pc, #120]	; (8002384 <MX_GPIO_Init+0xb4>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <MX_GPIO_Init+0xb4>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_GPIO_Init+0xb4>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	2118      	movs	r1, #24
 800235a:	480b      	ldr	r0, [pc, #44]	; (8002388 <MX_GPIO_Init+0xb8>)
 800235c:	f002 fe26 	bl	8004fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8002360:	2318      	movs	r3, #24
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002364:	2301      	movs	r3, #1
 8002366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	4619      	mov	r1, r3
 8002376:	4804      	ldr	r0, [pc, #16]	; (8002388 <MX_GPIO_Init+0xb8>)
 8002378:	f002 fc7c 	bl	8004c74 <HAL_GPIO_Init>

}
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	40020000 	.word	0x40020000

0800238c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <MX_I2C1_Init+0x50>)
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <MX_I2C1_Init+0x54>)
 8002394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_I2C1_Init+0x50>)
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <MX_I2C1_Init+0x58>)
 800239a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_I2C1_Init+0x50>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_I2C1_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_I2C1_Init+0x50>)
 80023aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <MX_I2C1_Init+0x50>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_I2C1_Init+0x50>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <MX_I2C1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_I2C1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <MX_I2C1_Init+0x50>)
 80023ca:	f002 fe09 	bl	8004fe0 <HAL_I2C_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023d4:	f000 fb2c 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200004bc 	.word	0x200004bc
 80023e0:	40005400 	.word	0x40005400
 80023e4:	00061a80 	.word	0x00061a80

080023e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_I2C2_Init+0x50>)
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <MX_I2C2_Init+0x54>)
 80023f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_I2C2_Init+0x50>)
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_I2C2_Init+0x58>)
 80023f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_I2C2_Init+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_I2C2_Init+0x50>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_I2C2_Init+0x50>)
 8002406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800240a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <MX_I2C2_Init+0x50>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_I2C2_Init+0x50>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <MX_I2C2_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_I2C2_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <MX_I2C2_Init+0x50>)
 8002426:	f002 fddb 	bl	8004fe0 <HAL_I2C_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002430:	f000 fafe 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000510 	.word	0x20000510
 800243c:	40005800 	.word	0x40005800
 8002440:	00061a80 	.word	0x00061a80

08002444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a32      	ldr	r2, [pc, #200]	; (800252c <HAL_I2C_MspInit+0xe8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d12c      	bne.n	80024c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_I2C_MspInit+0xec>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <HAL_I2C_MspInit+0xec>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_I2C_MspInit+0xec>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002482:	23c0      	movs	r3, #192	; 0xc0
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002486:	2312      	movs	r3, #18
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002492:	2304      	movs	r3, #4
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4825      	ldr	r0, [pc, #148]	; (8002534 <HAL_I2C_MspInit+0xf0>)
 800249e:	f002 fbe9 	bl	8004c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_I2C_MspInit+0xec>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <HAL_I2C_MspInit+0xec>)
 80024ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_I2C_MspInit+0xec>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80024be:	e031      	b.n	8002524 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_I2C_MspInit+0xf4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d12c      	bne.n	8002524 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_I2C_MspInit+0xec>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_I2C_MspInit+0xec>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_I2C_MspInit+0xec>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ec:	2312      	movs	r3, #18
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f4:	2303      	movs	r3, #3
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024f8:	2304      	movs	r3, #4
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	4619      	mov	r1, r3
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <HAL_I2C_MspInit+0xf0>)
 8002504:	f002 fbb6 	bl	8004c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_I2C_MspInit+0xec>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_I2C_MspInit+0xec>)
 8002512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_I2C_MspInit+0xec>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	bf00      	nop
 8002526:	3730      	adds	r7, #48	; 0x30
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40005400 	.word	0x40005400
 8002530:	40023800 	.word	0x40023800
 8002534:	40020400 	.word	0x40020400
 8002538:	40005800 	.word	0x40005800

0800253c <map>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	ed87 0a05 	vstr	s0, [r7, #20]
 8002546:	edc7 0a04 	vstr	s1, [r7, #16]
 800254a:	ed87 1a03 	vstr	s2, [r7, #12]
 800254e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002552:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8002556:	ed97 7a05 	vldr	s14, [r7, #20]
 800255a:	edd7 7a04 	vldr	s15, [r7, #16]
 800255e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002562:	edd7 6a01 	vldr	s13, [r7, #4]
 8002566:	edd7 7a02 	vldr	s15, [r7, #8]
 800256a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800256e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002572:	ed97 7a03 	vldr	s14, [r7, #12]
 8002576:	edd7 7a04 	vldr	s15, [r7, #16]
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002582:	edd7 7a02 	vldr	s15, [r7, #8]
 8002586:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800258a:	eeb0 0a67 	vmov.f32	s0, s15
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80025a0:	4b57      	ldr	r3, [pc, #348]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80025a2:	4a58      	ldr	r2, [pc, #352]	; (8002704 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80025a4:	2100      	movs	r1, #0
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f001 ff1b 	bl	80043e2 <HAL_CAN_GetRxMessage>
	cntt++;
 80025ac:	4b56      	ldr	r3, [pc, #344]	; (8002708 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b54      	ldr	r3, [pc, #336]	; (8002708 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80025b6:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 80025b8:	e002      	b.n	80025c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		cntt = 0;
 80025ba:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d8f8      	bhi.n	80025ba <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	}

	if (RxHeader.StdId == 0x215) {
 80025c8:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f240 2215 	movw	r2, #533	; 0x215
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d145      	bne.n	8002660 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
			RxData1 = (RxData[0] << 8) | RxData[1];
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4a49      	ldr	r2, [pc, #292]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80025dc:	7852      	ldrb	r2, [r2, #1]
 80025de:	4313      	orrs	r3, r2
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e8:	4b48      	ldr	r3, [pc, #288]	; (800270c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80025ea:	edc3 7a00 	vstr	s15, [r3]
			RxData2 = (RxData[2] << 8) | RxData[3];
 80025ee:	4b44      	ldr	r3, [pc, #272]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80025f0:	789b      	ldrb	r3, [r3, #2]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80025f6:	78d2      	ldrb	r2, [r2, #3]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002602:	4b43      	ldr	r3, [pc, #268]	; (8002710 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8002604:	edc3 7a00 	vstr	s15, [r3]
			V1_back = map(RxData1, 0, 65535, -30.0, 30.0);
 8002608:	4b40      	ldr	r3, [pc, #256]	; (800270c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 8002612:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 8002616:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8002714 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 800261a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002718 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 800261e:	eeb0 0a67 	vmov.f32	s0, s15
 8002622:	f7ff ff8b 	bl	800253c <map>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800262c:	edc3 7a00 	vstr	s15, [r3]
			V2_back = map(RxData2, 0, 65535, -30.0, 30.0);
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 800263a:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 800263e:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8002714 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 8002642:	eddf 0a35 	vldr	s1, [pc, #212]	; 8002718 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 8002646:	eeb0 0a67 	vmov.f32	s0, s15
 800264a:	f7ff ff77 	bl	800253c <map>
 800264e:	eef0 7a40 	vmov.f32	s15, s0
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8002654:	edc3 7a00 	vstr	s15, [r3]
			datacheck = 1;
 8002658:	4b32      	ldr	r3, [pc, #200]	; (8002724 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
			RxData4 = (RxData[2] << 8) | RxData[3];
			V3_back = map(RxData3, 0, 65535, -30.0, 30.0);
			V4_back = map(RxData4, 0, 65535, -30.0, 30.0);
			datacheck = 1;
	}
}
 800265e:	e04a      	b.n	80026f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
	else if (RxHeader.StdId == 0x211) {
 8002660:	4b28      	ldr	r3, [pc, #160]	; (8002704 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f240 2211 	movw	r2, #529	; 0x211
 8002668:	4293      	cmp	r3, r2
 800266a:	d144      	bne.n	80026f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
			RxData3 = (RxData[0] << 8) | RxData[1];
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002674:	7852      	ldrb	r2, [r2, #1]
 8002676:	4313      	orrs	r3, r2
 8002678:	ee07 3a90 	vmov	s15, r3
 800267c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002682:	edc3 7a00 	vstr	s15, [r3]
			RxData4 = (RxData[2] << 8) | RxData[3];
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002688:	789b      	ldrb	r3, [r3, #2]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800268e:	78d2      	ldrb	r2, [r2, #3]
 8002690:	4313      	orrs	r3, r2
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800269c:	edc3 7a00 	vstr	s15, [r3]
			V3_back = map(RxData3, 0, 65535, -30.0, 30.0);
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 80026aa:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 80026ae:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8002714 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 80026b2:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002718 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 80026b6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ba:	f7ff ff3f 	bl	800253c <map>
 80026be:	eef0 7a40 	vmov.f32	s15, s0
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80026c4:	edc3 7a00 	vstr	s15, [r3]
			V4_back = map(RxData4, 0, 65535, -30.0, 30.0);
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eeb3 2a0e 	vmov.f32	s4, #62	; 0x41f00000  30.0
 80026d2:	eefb 1a0e 	vmov.f32	s3, #190	; 0xc1f00000 -30.0
 80026d6:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8002714 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>
 80026da:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002718 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
 80026de:	eeb0 0a67 	vmov.f32	s0, s15
 80026e2:	f7ff ff2b 	bl	800253c <map>
 80026e6:	eef0 7a40 	vmov.f32	s15, s0
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80026ec:	edc3 7a00 	vstr	s15, [r3]
			datacheck = 1;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200005ac 	.word	0x200005ac
 8002704:	20000564 	.word	0x20000564
 8002708:	200005c5 	.word	0x200005c5
 800270c:	200005b4 	.word	0x200005b4
 8002710:	200005b8 	.word	0x200005b8
 8002714:	477fff00 	.word	0x477fff00
 8002718:	00000000 	.word	0x00000000
 800271c:	200005c8 	.word	0x200005c8
 8002720:	200005cc 	.word	0x200005cc
 8002724:	200005c4 	.word	0x200005c4
 8002728:	200005bc 	.word	0x200005bc
 800272c:	200005c0 	.word	0x200005c0
 8002730:	200005d0 	.word	0x200005d0
 8002734:	200005d4 	.word	0x200005d4

08002738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800273c:	f001 faf0 	bl	8003d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002740:	f000 f83c 	bl	80027bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002744:	f7ff fdc4 	bl	80022d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002748:	f7fe ff78 	bl	800163c <MX_CAN1_Init>
  MX_I2C1_Init();
 800274c:	f7ff fe1e 	bl	800238c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002750:	f7ff fe4a 	bl	80023e8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002754:	f000 fe2c 	bl	80033b0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002758:	f001 f8f4 	bl	8003944 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800275c:	f001 fa44 	bl	8003be8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002760:	f001 f844 	bl	80037ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8002764:	f001 f89a 	bl	800389c <MX_TIM2_Init>
  MX_TIM9_Init();
 8002768:	f001 f93a 	bl	80039e0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  // CAN _Transmition
	HAL_CAN_Start(&hcan1);
 800276c:	480f      	ldr	r0, [pc, #60]	; (80027ac <main+0x74>)
 800276e:	f001 fd19 	bl	80041a4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002772:	2102      	movs	r1, #2
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <main+0x74>)
 8002776:	f001 ff46 	bl	8004606 <HAL_CAN_ActivateNotification>
	TxHeader.DLC = 8; // data length
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <main+0x78>)
 800277c:	2208      	movs	r2, #8
 800277e:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <main+0x78>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <main+0x78>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x407; //Id 0x7FF
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <main+0x78>)
 800278e:	f240 4207 	movw	r2, #1031	; 0x407
 8002792:	601a      	str	r2, [r3, #0]
	// TIMER Internal clock
	HAL_TIM_Base_Start_IT(&htim3);
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <main+0x7c>)
 8002796:	f004 fe55 	bl	8007444 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 800279a:	4807      	ldr	r0, [pc, #28]	; (80027b8 <main+0x80>)
 800279c:	f004 fe52 	bl	8007444 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80027a0:	f7ff f9e2 	bl	8001b68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80027a4:	f005 feb4 	bl	8008510 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <main+0x70>
 80027aa:	bf00      	nop
 80027ac:	200000ac 	.word	0x200000ac
 80027b0:	20000580 	.word	0x20000580
 80027b4:	2000077c 	.word	0x2000077c
 80027b8:	200007c4 	.word	0x200007c4

080027bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b094      	sub	sp, #80	; 0x50
 80027c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027c2:	f107 0320 	add.w	r3, r7, #32
 80027c6:	2230      	movs	r2, #48	; 0x30
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f007 f90e 	bl	80099ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	4b28      	ldr	r3, [pc, #160]	; (8002888 <SystemClock_Config+0xcc>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <SystemClock_Config+0xcc>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	; 0x40
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <SystemClock_Config+0xcc>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fc:	2300      	movs	r3, #0
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <SystemClock_Config+0xd0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a21      	ldr	r2, [pc, #132]	; (800288c <SystemClock_Config+0xd0>)
 8002806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <SystemClock_Config+0xd0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002818:	2302      	movs	r3, #2
 800281a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002820:	2310      	movs	r3, #16
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002824:	2302      	movs	r3, #2
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002828:	2300      	movs	r3, #0
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800282c:	2308      	movs	r3, #8
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002830:	23a8      	movs	r3, #168	; 0xa8
 8002832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002834:	2302      	movs	r3, #2
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002838:	2304      	movs	r3, #4
 800283a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	f107 0320 	add.w	r3, r7, #32
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fb7d 	bl	8005f40 <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800284c:	f000 f8f0 	bl	8002a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800285c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2105      	movs	r1, #5
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fdde 	bl	8006430 <HAL_RCC_ClockConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800287a:	f000 f8d9 	bl	8002a30 <Error_Handler>
  }
}
 800287e:	bf00      	nop
 8002880:	3750      	adds	r7, #80	; 0x50
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000

08002890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM3) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	f040 8096 	bne.w	80029d0 <HAL_TIM_PeriodElapsedCallback+0x140>

		V1_out = map(Vx, -2.0, 2.0, 0, 65535);
 80028a4:	4b51      	ldr	r3, [pc, #324]	; (80029ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80029f0 <HAL_TIM_PeriodElapsedCallback+0x160>
 80028ae:	eddf 1a51 	vldr	s3, [pc, #324]	; 80029f4 <HAL_TIM_PeriodElapsedCallback+0x164>
 80028b2:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80028b6:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	f7ff fe3d 	bl	800253c <map>
 80028c2:	eef0 7a40 	vmov.f32	s15, s0
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	ee17 3a90 	vmov	r3, s15
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80028d2:	801a      	strh	r2, [r3, #0]
		V2_out = map(Vy, -2.0, 2.0, 0, 65535);
 80028d4:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80029f0 <HAL_TIM_PeriodElapsedCallback+0x160>
 80028de:	eddf 1a45 	vldr	s3, [pc, #276]	; 80029f4 <HAL_TIM_PeriodElapsedCallback+0x164>
 80028e2:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80028e6:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	f7ff fe25 	bl	800253c <map>
 80028f2:	eef0 7a40 	vmov.f32	s15, s0
 80028f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fa:	ee17 3a90 	vmov	r3, s15
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002902:	801a      	strh	r2, [r3, #0]
		V3_out = map(Omega, -3.14, 3.14, 0, 65535);
 8002904:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ed9f 2a39 	vldr	s4, [pc, #228]	; 80029f0 <HAL_TIM_PeriodElapsedCallback+0x160>
 800290e:	eddf 1a39 	vldr	s3, [pc, #228]	; 80029f4 <HAL_TIM_PeriodElapsedCallback+0x164>
 8002912:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8002a08 <HAL_TIM_PeriodElapsedCallback+0x178>
 8002916:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8002a0c <HAL_TIM_PeriodElapsedCallback+0x17c>
 800291a:	eeb0 0a67 	vmov.f32	s0, s15
 800291e:	f7ff fe0d 	bl	800253c <map>
 8002922:	eef0 7a40 	vmov.f32	s15, s0
 8002926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292a:	ee17 3a90 	vmov	r3, s15
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002932:	801a      	strh	r2, [r3, #0]
		V4_out = map(Speed, 0.0, 2.0, 0, 65535);
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 80029f0 <HAL_TIM_PeriodElapsedCallback+0x160>
 800293e:	eddf 1a2d 	vldr	s3, [pc, #180]	; 80029f4 <HAL_TIM_PeriodElapsedCallback+0x164>
 8002942:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002946:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80029f4 <HAL_TIM_PeriodElapsedCallback+0x164>
 800294a:	eeb0 0a67 	vmov.f32	s0, s15
 800294e:	f7ff fdf5 	bl	800253c <map>
 8002952:	eef0 7a40 	vmov.f32	s15, s0
 8002956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295a:	ee17 3a90 	vmov	r3, s15
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002962:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((V1_out & 0xFF00) >> 8);
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002970:	701a      	strb	r2, [r3, #0]
		TxData[1] = (V1_out & 0x00FF);
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800297a:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((V2_out & 0xFF00) >> 8);
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	b29b      	uxth	r3, r3
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002988:	709a      	strb	r2, [r3, #2]
		TxData[3] = (V2_out & 0x00FF);
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002992:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((V3_out & 0xFF00) >> 8);
 8002994:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	b29b      	uxth	r3, r3
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80029a0:	711a      	strb	r2, [r3, #4]
		TxData[5] = (V3_out & 0x00FF);
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80029aa:	715a      	strb	r2, [r3, #5]
		TxData[6] = ((V4_out & 0xFF00) >> 8);
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80029b8:	719a      	strb	r2, [r3, #6]
		TxData[7] = (V4_out & 0x00FF);
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80029c2:	71da      	strb	r2, [r3, #7]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80029ca:	4817      	ldr	r0, [pc, #92]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80029cc:	f001 fc2e 	bl	800422c <HAL_CAN_AddTxMessage>
		}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PeriodElapsedCallback+0x14e>
    HAL_IncTick();
 80029da:	f001 f9c3 	bl	8003d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40000400 	.word	0x40000400
 80029ec:	200001fc 	.word	0x200001fc
 80029f0:	477fff00 	.word	0x477fff00
 80029f4:	00000000 	.word	0x00000000
 80029f8:	200005a4 	.word	0x200005a4
 80029fc:	20000200 	.word	0x20000200
 8002a00:	200005a6 	.word	0x200005a6
 8002a04:	20000204 	.word	0x20000204
 8002a08:	4048f5c3 	.word	0x4048f5c3
 8002a0c:	c048f5c3 	.word	0xc048f5c3
 8002a10:	200005a8 	.word	0x200005a8
 8002a14:	200001f8 	.word	0x200001f8
 8002a18:	200005aa 	.word	0x200005aa
 8002a1c:	20000598 	.word	0x20000598
 8002a20:	200005a0 	.word	0x200005a0
 8002a24:	20000580 	.word	0x20000580
 8002a28:	200000ac 	.word	0x200000ac
 8002a2c:	40001000 	.word	0x40001000

08002a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
}
 8002a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <Error_Handler+0x8>
	...

08002a3c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <NRF24_DelayMicroSeconds+0x3c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <NRF24_DelayMicroSeconds+0x40>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9a      	lsrs	r2, r3, #18
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8002a5c:	bf00      	nop
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e5a      	subs	r2, r3, #1
 8002a62:	60fa      	str	r2, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1fa      	bne.n	8002a5e <NRF24_DelayMicroSeconds+0x22>
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	165e9f81 	.word	0x165e9f81

08002a80 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_SET);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <NRF24_csn+0x20>
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <NRF24_csn+0x38>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <NRF24_csn+0x3c>)
 8002a94:	8811      	ldrh	r1, [r2, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fa87 	bl	8004fac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8002a9e:	e007      	b.n	8002ab0 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CSN, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <NRF24_csn+0x38>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a05      	ldr	r2, [pc, #20]	; (8002abc <NRF24_csn+0x3c>)
 8002aa6:	8811      	ldrh	r1, [r2, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fa7e 	bl	8004fac <HAL_GPIO_WritePin>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	200005e4 	.word	0x200005e4
 8002abc:	200005ec 	.word	0x200005ec

08002ac0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_SET);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <NRF24_ce+0x20>
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <NRF24_ce+0x38>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <NRF24_ce+0x3c>)
 8002ad4:	8811      	ldrh	r1, [r2, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 fa67 	bl	8004fac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002ade:	e007      	b.n	8002af0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <NRF24_ce+0x38>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a05      	ldr	r2, [pc, #20]	; (8002afc <NRF24_ce+0x3c>)
 8002ae6:	8811      	ldrh	r1, [r2, #0]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fa5e 	bl	8004fac <HAL_GPIO_WritePin>
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200005e8 	.word	0x200005e8
 8002afc:	200005ee 	.word	0x200005ee

08002b00 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7ff ffb8 	bl	8002a80 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002b1a:	f107 010c 	add.w	r1, r7, #12
 8002b1e:	2364      	movs	r3, #100	; 0x64
 8002b20:	2201      	movs	r2, #1
 8002b22:	480a      	ldr	r0, [pc, #40]	; (8002b4c <NRF24_read_register+0x4c>)
 8002b24:	f003 ff1f 	bl	8006966 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	1c59      	adds	r1, r3, #1
 8002b2e:	2364      	movs	r3, #100	; 0x64
 8002b30:	2201      	movs	r2, #1
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <NRF24_read_register+0x4c>)
 8002b34:	f004 f853 	bl	8006bde <HAL_SPI_Receive>
	retData = spiBuf[1];
 8002b38:	7b7b      	ldrb	r3, [r7, #13]
 8002b3a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff ff9f 	bl	8002a80 <NRF24_csn>
	return retData;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200005f0 	.word	0x200005f0

08002b50 <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	460a      	mov	r2, r1
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7ff ff8d 	bl	8002a80 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8002b70:	79bb      	ldrb	r3, [r7, #6]
 8002b72:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8002b74:	f107 010c 	add.w	r1, r7, #12
 8002b78:	2364      	movs	r3, #100	; 0x64
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4804      	ldr	r0, [pc, #16]	; (8002b90 <NRF24_write_register+0x40>)
 8002b7e:	f003 fef2 	bl	8006966 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7ff ff7c 	bl	8002a80 <NRF24_csn>
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200005f0 	.word	0x200005f0

08002b94 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7ff ff6b 	bl	8002a80 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f043 0320 	orr.w	r3, r3, #32
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002bb4:	f107 010c 	add.w	r1, r7, #12
 8002bb8:	2364      	movs	r3, #100	; 0x64
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4808      	ldr	r0, [pc, #32]	; (8002be0 <NRF24_write_registerN+0x4c>)
 8002bbe:	f003 fed2 	bl	8006966 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	2364      	movs	r3, #100	; 0x64
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <NRF24_write_registerN+0x4c>)
 8002bcc:	f003 fecb 	bl	8006966 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7ff ff55 	bl	8002a80 <NRF24_csn>
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200005f0 	.word	0x200005f0

08002be4 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002bf0:	f000 fa0a 	bl	8003008 <NRF24_getPayloadSize>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d303      	bcc.n	8002c06 <NRF24_read_payload+0x22>
 8002bfe:	f000 fa03 	bl	8003008 <NRF24_getPayloadSize>
 8002c02:	4603      	mov	r3, r0
 8002c04:	e000      	b.n	8002c08 <NRF24_read_payload+0x24>
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff ff38 	bl	8002a80 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002c10:	2361      	movs	r3, #97	; 0x61
 8002c12:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8002c14:	f107 010e 	add.w	r1, r7, #14
 8002c18:	2364      	movs	r3, #100	; 0x64
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <NRF24_read_payload+0x5c>)
 8002c1e:	f003 fea2 	bl	8006966 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	2364      	movs	r3, #100	; 0x64
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <NRF24_read_payload+0x5c>)
 8002c2c:	f003 ffd7 	bl	8006bde <HAL_SPI_Receive>
	NRF24_csn(1);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f7ff ff25 	bl	8002a80 <NRF24_csn>
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200005f0 	.word	0x200005f0

08002c44 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002c48:	21ff      	movs	r1, #255	; 0xff
 8002c4a:	20e1      	movs	r0, #225	; 0xe1
 8002c4c:	f7ff ff80 	bl	8002b50 <NRF24_write_register>
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002c58:	21ff      	movs	r1, #255	; 0xff
 8002c5a:	20e2      	movs	r0, #226	; 0xe2
 8002c5c:	f7ff ff78 	bl	8002b50 <NRF24_write_register>
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8002c6a:	2007      	movs	r0, #7
 8002c6c:	f7ff ff48 	bl	8002b00 <NRF24_read_register>
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8002c74:	79fb      	ldrb	r3, [r7, #7]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT_CSN, GPIO_TypeDef *nrf24PORT_CE, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	460b      	mov	r3, r1
 8002c90:	80fb      	strh	r3, [r7, #6]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80bb      	strh	r3, [r7, #4]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8002c96:	4b65      	ldr	r3, [pc, #404]	; (8002e2c <NRF24_begin+0x1ac>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f107 0320 	add.w	r3, r7, #32
 8002c9e:	2258      	movs	r2, #88	; 0x58
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f006 fe95 	bl	80099d0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT_CSN = nrf24PORT_CSN;
 8002ca6:	4a62      	ldr	r2, [pc, #392]	; (8002e30 <NRF24_begin+0x1b0>)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6013      	str	r3, [r2, #0]
	nrf24_PORT_CE = nrf24PORT_CE;
 8002cac:	4a61      	ldr	r2, [pc, #388]	; (8002e34 <NRF24_begin+0x1b4>)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8002cb2:	4a61      	ldr	r2, [pc, #388]	; (8002e38 <NRF24_begin+0x1b8>)
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002cb8:	4a60      	ldr	r2, [pc, #384]	; (8002e3c <NRF24_begin+0x1bc>)
 8002cba:	88bb      	ldrh	r3, [r7, #4]
 8002cbc:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7ff fede 	bl	8002a80 <NRF24_csn>
	NRF24_ce(0);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff fefb 	bl	8002ac0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8002cca:	2005      	movs	r0, #5
 8002ccc:	f001 f86a 	bl	8003da4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8002cd0:	2108      	movs	r1, #8
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7ff ff3c 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8002cd8:	213f      	movs	r1, #63	; 0x3f
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7ff ff38 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f7ff ff34 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002ce8:	2103      	movs	r1, #3
 8002cea:	2003      	movs	r0, #3
 8002cec:	f7ff ff30 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8002cf0:	2103      	movs	r1, #3
 8002cf2:	2004      	movs	r0, #4
 8002cf4:	f7ff ff2c 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	2005      	movs	r0, #5
 8002cfc:	f7ff ff28 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8002d00:	210f      	movs	r1, #15
 8002d02:	2006      	movs	r0, #6
 8002d04:	f7ff ff24 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8002d08:	210e      	movs	r1, #14
 8002d0a:	2007      	movs	r0, #7
 8002d0c:	f7ff ff20 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8002d10:	2100      	movs	r1, #0
 8002d12:	2008      	movs	r0, #8
 8002d14:	f7ff ff1c 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2009      	movs	r0, #9
 8002d1c:	f7ff ff18 	bl	8002b50 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8002d20:	23e7      	movs	r3, #231	; 0xe7
 8002d22:	753b      	strb	r3, [r7, #20]
 8002d24:	23e7      	movs	r3, #231	; 0xe7
 8002d26:	74fb      	strb	r3, [r7, #19]
 8002d28:	23e7      	movs	r3, #231	; 0xe7
 8002d2a:	74bb      	strb	r3, [r7, #18]
 8002d2c:	23e7      	movs	r3, #231	; 0xe7
 8002d2e:	747b      	strb	r3, [r7, #17]
 8002d30:	23e7      	movs	r3, #231	; 0xe7
 8002d32:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	2205      	movs	r2, #5
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	200a      	movs	r0, #10
 8002d3e:	f7ff ff29 	bl	8002b94 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8002d42:	23c2      	movs	r3, #194	; 0xc2
 8002d44:	753b      	strb	r3, [r7, #20]
 8002d46:	23c2      	movs	r3, #194	; 0xc2
 8002d48:	74fb      	strb	r3, [r7, #19]
 8002d4a:	23c2      	movs	r3, #194	; 0xc2
 8002d4c:	74bb      	strb	r3, [r7, #18]
 8002d4e:	23c2      	movs	r3, #194	; 0xc2
 8002d50:	747b      	strb	r3, [r7, #17]
 8002d52:	23c2      	movs	r3, #194	; 0xc2
 8002d54:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	200b      	movs	r0, #11
 8002d60:	f7ff ff18 	bl	8002b94 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8002d64:	21c3      	movs	r1, #195	; 0xc3
 8002d66:	200c      	movs	r0, #12
 8002d68:	f7ff fef2 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002d6c:	21c4      	movs	r1, #196	; 0xc4
 8002d6e:	200d      	movs	r0, #13
 8002d70:	f7ff feee 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8002d74:	21c5      	movs	r1, #197	; 0xc5
 8002d76:	200e      	movs	r0, #14
 8002d78:	f7ff feea 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002d7c:	21c6      	movs	r1, #198	; 0xc6
 8002d7e:	200f      	movs	r0, #15
 8002d80:	f7ff fee6 	bl	8002b50 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8002d84:	23e7      	movs	r3, #231	; 0xe7
 8002d86:	753b      	strb	r3, [r7, #20]
 8002d88:	23e7      	movs	r3, #231	; 0xe7
 8002d8a:	74fb      	strb	r3, [r7, #19]
 8002d8c:	23e7      	movs	r3, #231	; 0xe7
 8002d8e:	74bb      	strb	r3, [r7, #18]
 8002d90:	23e7      	movs	r3, #231	; 0xe7
 8002d92:	747b      	strb	r3, [r7, #17]
 8002d94:	23e7      	movs	r3, #231	; 0xe7
 8002d96:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002d98:	f107 0310 	add.w	r3, r7, #16
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	4619      	mov	r1, r3
 8002da0:	2010      	movs	r0, #16
 8002da2:	f7ff fef7 	bl	8002b94 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8002da6:	2100      	movs	r1, #0
 8002da8:	2011      	movs	r0, #17
 8002daa:	f7ff fed1 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8002dae:	2100      	movs	r1, #0
 8002db0:	2012      	movs	r0, #18
 8002db2:	f7ff fecd 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8002db6:	2100      	movs	r1, #0
 8002db8:	2013      	movs	r0, #19
 8002dba:	f7ff fec9 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2014      	movs	r0, #20
 8002dc2:	f7ff fec5 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2015      	movs	r0, #21
 8002dca:	f7ff fec1 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2016      	movs	r0, #22
 8002dd2:	f7ff febd 	bl	8002b50 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8002dd6:	f000 fad1 	bl	800337c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	201c      	movs	r0, #28
 8002dde:	f7ff feb7 	bl	8002b50 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8002de2:	2100      	movs	r1, #0
 8002de4:	201d      	movs	r0, #29
 8002de6:	f7ff feb3 	bl	8002b50 <NRF24_write_register>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8002dea:	210f      	movs	r1, #15
 8002dec:	200f      	movs	r0, #15
 8002dee:	f000 f8c3 	bl	8002f78 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8002df2:	2003      	movs	r0, #3
 8002df4:	f000 f9a9 	bl	800314a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f000 f9df 	bl	80031bc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8002dfe:	2002      	movs	r0, #2
 8002e00:	f000 fa22 	bl	8003248 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8002e04:	f000 f974 	bl	80030f0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8002e08:	2020      	movs	r0, #32
 8002e0a:	f000 f8e5 	bl	8002fd8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8002e0e:	f000 faac 	bl	800336a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8002e12:	204c      	movs	r0, #76	; 0x4c
 8002e14:	f000 f8cb 	bl	8002fae <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8002e18:	f7ff ff14 	bl	8002c44 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002e1c:	f7ff ff1a 	bl	8002c54 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8002e20:	f000 fa3a 	bl	8003298 <NRF24_powerDown>
	
}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200005f0 	.word	0x200005f0
 8002e30:	200005e4 	.word	0x200005e4
 8002e34:	200005e8 	.word	0x200005e8
 8002e38:	200005ec 	.word	0x200005ec
 8002e3c:	200005ee 	.word	0x200005ee

08002e40 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fe5b 	bl	8002b00 <NRF24_read_register>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f043 0303 	orr.w	r3, r3, #3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff fe7b 	bl	8002b50 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <NRF24_startListening+0x48>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	d004      	beq.n	8002e6e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002e64:	2205      	movs	r2, #5
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <NRF24_startListening+0x48>)
 8002e68:	200a      	movs	r0, #10
 8002e6a:	f7ff fe93 	bl	8002b94 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8002e6e:	f7ff fee9 	bl	8002c44 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002e72:	f7ff feef 	bl	8002c54 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7ff fe22 	bl	8002ac0 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002e7c:	2096      	movs	r0, #150	; 0x96
 8002e7e:	f7ff fddd 	bl	8002a3c <NRF24_DelayMicroSeconds>
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200005d8 	.word	0x200005d8

08002e8c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f000 fa10 	bl	80032b6 <NRF24_availablePipe>
 8002e96:	4603      	mov	r3, r0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fe99 	bl	8002be4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8002eb2:	2017      	movs	r0, #23
 8002eb4:	f7ff fe24 	bl	8002b00 <NRF24_read_register>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8002ec0:	f7ff fec8 	bl	8002c54 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8002ec4:	f000 f8ac 	bl	8003020 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf14      	ite	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	2300      	moveq	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4601      	mov	r1, r0
 8002ee4:	e9c7 2300 	strd	r2, r3, [r7]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8002ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ef6:	491c      	ldr	r1, [pc, #112]	; (8002f68 <NRF24_openReadingPipe+0x8c>)
 8002ef8:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d82d      	bhi.n	8002f5e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d808      	bhi.n	8002f1a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <NRF24_openReadingPipe+0x90>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	4639      	mov	r1, r7
 8002f10:	2205      	movs	r2, #5
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fe3e 	bl	8002b94 <NRF24_write_registerN>
 8002f18:	e007      	b.n	8002f2a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	4a13      	ldr	r2, [pc, #76]	; (8002f6c <NRF24_openReadingPipe+0x90>)
 8002f1e:	5cd3      	ldrb	r3, [r2, r3]
 8002f20:	4639      	mov	r1, r7
 8002f22:	2201      	movs	r2, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe35 	bl	8002b94 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <NRF24_openReadingPipe+0x94>)
 8002f2e:	5cd3      	ldrb	r3, [r2, r3]
 8002f30:	4a10      	ldr	r2, [pc, #64]	; (8002f74 <NRF24_openReadingPipe+0x98>)
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fe0a 	bl	8002b50 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7ff fddf 	bl	8002b00 <NRF24_read_register>
 8002f42:	4603      	mov	r3, r0
 8002f44:	b25a      	sxtb	r2, r3
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b25b      	sxtb	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f7ff fdf9 	bl	8002b50 <NRF24_write_register>
	}
	
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200005d8 	.word	0x200005d8
 8002f6c:	0800ce18 	.word	0x0800ce18
 8002f70:	0800ce20 	.word	0x0800ce20
 8002f74:	200005e0 	.word	0x200005e0

08002f78 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460a      	mov	r2, r1
 8002f82:	71fb      	strb	r3, [r7, #7]
 8002f84:	4613      	mov	r3, r2
 8002f86:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	b25a      	sxtb	r2, r3
 8002f8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2004      	movs	r0, #4
 8002fa2:	f7ff fdd5 	bl	8002b50 <NRF24_write_register>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <NRF24_setChannel>:


//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8002fb8:	237f      	movs	r3, #127	; 0x7f
 8002fba:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf28      	it	cs
 8002fc4:	4613      	movcs	r3, r2
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2005      	movs	r0, #5
 8002fcc:	f7ff fdc0 	bl	8002b50 <NRF24_write_register>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8002fe2:	2320      	movs	r3, #32
 8002fe4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	bf28      	it	cs
 8002fee:	4613      	movcs	r3, r2
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4b04      	ldr	r3, [pc, #16]	; (8003004 <NRF24_setPayloadSize+0x2c>)
 8002ff4:	701a      	strb	r2, [r3, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200005e0 	.word	0x200005e0

08003008 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
	return payload_size;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <NRF24_getPayloadSize+0x14>)
 800300e:	781b      	ldrb	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	200005e0 	.word	0x200005e0

08003020 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003024:	2060      	movs	r0, #96	; 0x60
 8003026:	f7ff fd6b 	bl	8002b00 <NRF24_read_register>
 800302a:	4603      	mov	r3, r0
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}

08003030 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8003034:	201d      	movs	r0, #29
 8003036:	f7ff fd63 	bl	8002b00 <NRF24_read_register>
 800303a:	4603      	mov	r3, r0
 800303c:	f043 0306 	orr.w	r3, r3, #6
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	201d      	movs	r0, #29
 8003046:	f7ff fd83 	bl	8002b50 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800304a:	201d      	movs	r0, #29
 800304c:	f7ff fd58 	bl	8002b00 <NRF24_read_register>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10c      	bne.n	8003070 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8003056:	f000 f991 	bl	800337c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800305a:	201d      	movs	r0, #29
 800305c:	f7ff fd50 	bl	8002b00 <NRF24_read_register>
 8003060:	4603      	mov	r3, r0
 8003062:	f043 0306 	orr.w	r3, r3, #6
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	201d      	movs	r0, #29
 800306c:	f7ff fd70 	bl	8002b50 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8003070:	201c      	movs	r0, #28
 8003072:	f7ff fd45 	bl	8002b00 <NRF24_read_register>
 8003076:	4603      	mov	r3, r0
 8003078:	f043 0303 	orr.w	r3, r3, #3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	201c      	movs	r0, #28
 8003082:	f7ff fd65 	bl	8002b50 <NRF24_write_register>
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8003090:	201d      	movs	r0, #29
 8003092:	f7ff fd35 	bl	8002b00 <NRF24_read_register>
 8003096:	4603      	mov	r3, r0
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	201d      	movs	r0, #29
 80030a2:	f7ff fd55 	bl	8002b50 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80030a6:	201d      	movs	r0, #29
 80030a8:	f7ff fd2a 	bl	8002b00 <NRF24_read_register>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80030b2:	f000 f963 	bl	800337c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80030b6:	201d      	movs	r0, #29
 80030b8:	f7ff fd22 	bl	8002b00 <NRF24_read_register>
 80030bc:	4603      	mov	r3, r0
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	201d      	movs	r0, #29
 80030c8:	f7ff fd42 	bl	8002b50 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80030cc:	201c      	movs	r0, #28
 80030ce:	f7ff fd17 	bl	8002b00 <NRF24_read_register>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	201c      	movs	r0, #28
 80030de:	f7ff fd37 	bl	8002b50 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80030e2:	4b02      	ldr	r3, [pc, #8]	; (80030ec <NRF24_enableDynamicPayloads+0x60>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
	
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	200005e1 	.word	0x200005e1

080030f0 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80030f4:	201d      	movs	r0, #29
 80030f6:	f7ff fd03 	bl	8002b00 <NRF24_read_register>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4619      	mov	r1, r3
 8003104:	201d      	movs	r0, #29
 8003106:	f7ff fd23 	bl	8002b50 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800310a:	2100      	movs	r1, #0
 800310c:	201c      	movs	r0, #28
 800310e:	f7ff fd1f 	bl	8002b50 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8003112:	4b02      	ldr	r3, [pc, #8]	; (800311c <NRF24_disableDynamicPayloads+0x2c>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200005e1 	.word	0x200005e1

08003120 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8003130:	213f      	movs	r1, #63	; 0x3f
 8003132:	2001      	movs	r0, #1
 8003134:	f7ff fd0c 	bl	8002b50 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8003138:	e003      	b.n	8003142 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800313a:	2100      	movs	r1, #0
 800313c:	2001      	movs	r0, #1
 800313e:	f7ff fd07 	bl	8002b50 <NRF24_write_register>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8003154:	2006      	movs	r0, #6
 8003156:	f7ff fcd3 	bl	8002b00 <NRF24_read_register>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	f023 0306 	bic.w	r3, r3, #6
 8003164:	73fb      	strb	r3, [r7, #15]
 // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d104      	bne.n	8003176 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	f043 0306 	orr.w	r3, r3, #6
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e019      	b.n	80031aa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d104      	bne.n	8003186 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e011      	b.n	80031aa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d104      	bne.n	8003196 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	e009      	b.n	80031aa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d103      	bne.n	80031aa <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	f043 0306 	orr.w	r3, r3, #6
 80031a8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	4619      	mov	r1, r3
 80031ae:	2006      	movs	r0, #6
 80031b0:	f7ff fcce 	bl	8002b50 <NRF24_write_register>
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80031ca:	2006      	movs	r0, #6
 80031cc:	f7ff fc98 	bl	8002b00 <NRF24_read_register>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <NRF24_setDataRate+0x88>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80031da:	7bbb      	ldrb	r3, [r7, #14]
 80031dc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80031e0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d107      	bne.n	80031f8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <NRF24_setDataRate+0x88>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	f043 0320 	orr.w	r3, r3, #32
 80031f4:	73bb      	strb	r3, [r7, #14]
 80031f6:	e00d      	b.n	8003214 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <NRF24_setDataRate+0x88>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8003204:	7bbb      	ldrb	r3, [r7, #14]
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	73bb      	strb	r3, [r7, #14]
 800320c:	e002      	b.n	8003214 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <NRF24_setDataRate+0x88>)
 8003210:	2200      	movs	r2, #0
 8003212:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	4619      	mov	r1, r3
 8003218:	2006      	movs	r0, #6
 800321a:	f7ff fc99 	bl	8002b50 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800321e:	2006      	movs	r0, #6
 8003220:	f7ff fc6e 	bl	8002b00 <NRF24_read_register>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	7bbb      	ldrb	r3, [r7, #14]
 800322a:	4293      	cmp	r3, r2
 800322c:	d102      	bne.n	8003234 <NRF24_setDataRate+0x78>
  {
    result = true;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
 8003232:	e002      	b.n	800323a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <NRF24_setDataRate+0x88>)
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200005e2 	.word	0x200005e2

08003248 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8003252:	2000      	movs	r0, #0
 8003254:	f7ff fc54 	bl	8002b00 <NRF24_read_register>
 8003258:	4603      	mov	r3, r0
 800325a:	f023 030c 	bic.w	r3, r3, #12
 800325e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00f      	beq.n	8003286 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d104      	bne.n	8003276 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	f043 0308 	orr.w	r3, r3, #8
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e007      	b.n	8003286 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	4619      	mov	r1, r3
 800328a:	2000      	movs	r0, #0
 800328c:	f7ff fc60 	bl	8002b50 <NRF24_write_register>
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800329c:	2000      	movs	r0, #0
 800329e:	f7ff fc2f 	bl	8002b00 <NRF24_read_register>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f023 0302 	bic.w	r3, r3, #2
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7ff fc4f 	bl	8002b50 <NRF24_write_register>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80032be:	f7ff fcd1 	bl	8002c64 <NRF24_get_status>
 80032c2:	4603      	mov	r3, r0
 80032c4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	73bb      	strb	r3, [r7, #14]

  if (result)
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	2007      	movs	r0, #7
 80032f6:	f7ff fc2b 	bl	8002b50 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8003304:	2120      	movs	r1, #32
 8003306:	2007      	movs	r0, #7
 8003308:	f7ff fc22 	bl	8002b50 <NRF24_write_register>
    }
  }
  return result;
 800330c:	7bbb      	ldrb	r3, [r7, #14]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	6039      	str	r1, [r7, #0]
 8003320:	71fb      	strb	r3, [r7, #7]
 8003322:	4613      	mov	r3, r2
 8003324:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 800332a:	2320      	movs	r3, #32
 800332c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 800332e:	7afa      	ldrb	r2, [r7, #11]
 8003330:	79bb      	ldrb	r3, [r7, #6]
 8003332:	4293      	cmp	r3, r2
 8003334:	bf28      	it	cs
 8003336:	4613      	movcs	r3, r2
 8003338:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 800333a:	2000      	movs	r0, #0
 800333c:	f7ff fba0 	bl	8002a80 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	b25b      	sxtb	r3, r3
 800334a:	f063 0357 	orn	r3, r3, #87	; 0x57
 800334e:	b25b      	sxtb	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	7aba      	ldrb	r2, [r7, #10]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fc1c 	bl	8002b94 <NRF24_write_registerN>
  NRF24_csn(1);
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff fb8f 	bl	8002a80 <NRF24_csn>
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800336e:	2170      	movs	r1, #112	; 0x70
 8003370:	2007      	movs	r0, #7
 8003372:	f7ff fbed 	bl	8002b50 <NRF24_write_register>
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8003382:	2000      	movs	r0, #0
 8003384:	f7ff fb7c 	bl	8002a80 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8003388:	2350      	movs	r3, #80	; 0x50
 800338a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800338c:	2373      	movs	r3, #115	; 0x73
 800338e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8003390:	1d39      	adds	r1, r7, #4
 8003392:	2364      	movs	r3, #100	; 0x64
 8003394:	2202      	movs	r2, #2
 8003396:	4805      	ldr	r0, [pc, #20]	; (80033ac <NRF24_ACTIVATE_cmd+0x30>)
 8003398:	f003 fae5 	bl	8006966 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff fb6f 	bl	8002a80 <NRF24_csn>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200005f0 	.word	0x200005f0

080033b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033b4:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_SPI1_Init+0x64>)
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <MX_SPI1_Init+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <MX_SPI1_Init+0x64>)
 80033bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <MX_SPI1_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_SPI1_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <MX_SPI1_Init+0x64>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <MX_SPI1_Init+0x64>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <MX_SPI1_Init+0x64>)
 80033dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <MX_SPI1_Init+0x64>)
 80033e4:	2220      	movs	r2, #32
 80033e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <MX_SPI1_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <MX_SPI1_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <MX_SPI1_Init+0x64>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <MX_SPI1_Init+0x64>)
 80033fc:	220a      	movs	r2, #10
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003400:	4804      	ldr	r0, [pc, #16]	; (8003414 <MX_SPI1_Init+0x64>)
 8003402:	f003 fa27 	bl	8006854 <HAL_SPI_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800340c:	f7ff fb10 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000648 	.word	0x20000648
 8003418:	40013000 	.word	0x40013000

0800341c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <HAL_SPI_MspInit+0x84>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d12b      	bne.n	8003496 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_SPI_MspInit+0x88>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <HAL_SPI_MspInit+0x88>)
 8003448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_SPI_MspInit+0x88>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_SPI_MspInit+0x88>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_SPI_MspInit+0x88>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_SPI_MspInit+0x88>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003476:	23e0      	movs	r3, #224	; 0xe0
 8003478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003482:	2303      	movs	r3, #3
 8003484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003486:	2305      	movs	r3, #5
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	4805      	ldr	r0, [pc, #20]	; (80034a8 <HAL_SPI_MspInit+0x8c>)
 8003492:	f001 fbef 	bl	8004c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003496:	bf00      	nop
 8003498:	3728      	adds	r7, #40	; 0x28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40013000 	.word	0x40013000
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000

080034ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_MspInit+0x54>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HAL_MspInit+0x54>)
 80034bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c0:	6453      	str	r3, [r2, #68]	; 0x44
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <HAL_MspInit+0x54>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_MspInit+0x54>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_MspInit+0x54>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_MspInit+0x54>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034ea:	2200      	movs	r2, #0
 80034ec:	210f      	movs	r1, #15
 80034ee:	f06f 0001 	mvn.w	r0, #1
 80034f2:	f001 fb95 	bl	8004c20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800

08003504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <HAL_InitTick+0xe4>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	4a32      	ldr	r2, [pc, #200]	; (80035e8 <HAL_InitTick+0xe4>)
 800351e:	f043 0310 	orr.w	r3, r3, #16
 8003522:	6413      	str	r3, [r2, #64]	; 0x40
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_InitTick+0xe4>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003530:	f107 0210 	add.w	r2, r7, #16
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f003 f958 	bl	80067f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800354a:	f003 f929 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 800354e:	6378      	str	r0, [r7, #52]	; 0x34
 8003550:	e004      	b.n	800355c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003552:	f003 f925 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 8003556:	4603      	mov	r3, r0
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	4a23      	ldr	r2, [pc, #140]	; (80035ec <HAL_InitTick+0xe8>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	0c9b      	lsrs	r3, r3, #18
 8003566:	3b01      	subs	r3, #1
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_InitTick+0xec>)
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_InitTick+0xf0>)
 800356e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003570:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <HAL_InitTick+0xec>)
 8003572:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003576:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003578:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_InitTick+0xec>)
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_InitTick+0xec>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_InitTick+0xec>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_InitTick+0xec>)
 800358c:	2200      	movs	r2, #0
 800358e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003590:	4817      	ldr	r0, [pc, #92]	; (80035f0 <HAL_InitTick+0xec>)
 8003592:	f003 ff07 	bl	80073a4 <HAL_TIM_Base_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800359c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11b      	bne.n	80035dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80035a4:	4812      	ldr	r0, [pc, #72]	; (80035f0 <HAL_InitTick+0xec>)
 80035a6:	f003 ff4d 	bl	8007444 <HAL_TIM_Base_Start_IT>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80035b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035b8:	2036      	movs	r0, #54	; 0x36
 80035ba:	f001 fb4d 	bl	8004c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b0f      	cmp	r3, #15
 80035c2:	d808      	bhi.n	80035d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80035c4:	2200      	movs	r2, #0
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	2036      	movs	r0, #54	; 0x36
 80035ca:	f001 fb29 	bl	8004c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <HAL_InitTick+0xf4>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e002      	b.n	80035dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80035dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3738      	adds	r7, #56	; 0x38
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	431bde83 	.word	0x431bde83
 80035f0:	200006a0 	.word	0x200006a0
 80035f4:	40001000 	.word	0x40001000
 80035f8:	2000001c 	.word	0x2000001c

080035fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003600:	e7fe      	b.n	8003600 <NMI_Handler+0x4>

08003602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003606:	e7fe      	b.n	8003606 <HardFault_Handler+0x4>

08003608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800360c:	e7fe      	b.n	800360c <MemManage_Handler+0x4>

0800360e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003612:	e7fe      	b.n	8003612 <BusFault_Handler+0x4>

08003614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003618:	e7fe      	b.n	8003618 <UsageFault_Handler+0x4>

0800361a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <CAN1_RX0_IRQHandler+0x10>)
 800362e:	f001 f810 	bl	8004652 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200000ac 	.word	0x200000ac

0800363c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003640:	4803      	ldr	r0, [pc, #12]	; (8003650 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003642:	f004 f8a3 	bl	800778c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003646:	4803      	ldr	r0, [pc, #12]	; (8003654 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003648:	f004 f8a0 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200006ec 	.word	0x200006ec
 8003654:	200007c4 	.word	0x200007c4

08003658 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <TIM3_IRQHandler+0x10>)
 800365e:	f004 f895 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	2000077c 	.word	0x2000077c

0800366c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM6_DAC_IRQHandler+0x10>)
 8003672:	f004 f88b 	bl	800778c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200006a0 	.word	0x200006a0

08003680 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e00a      	b.n	80036a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003692:	f3af 8000 	nop.w
 8003696:	4601      	mov	r1, r0
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	b2ca      	uxtb	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3301      	adds	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dbf0      	blt.n	8003692 <_read+0x12>
  }

  return len;
 80036b0:	687b      	ldr	r3, [r7, #4]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e009      	b.n	80036e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	60ba      	str	r2, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dbf1      	blt.n	80036cc <_write+0x12>
  }
  return len;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_close>:

int _close(int file)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371a:	605a      	str	r2, [r3, #4]
  return 0;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <_isatty>:

int _isatty(int file)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <_sbrk+0x5c>)
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <_sbrk+0x60>)
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <_sbrk+0x64>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <_sbrk+0x64>)
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <_sbrk+0x68>)
 800377c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <_sbrk+0x64>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	d207      	bcs.n	800379c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800378c:	f006 f8f6 	bl	800997c <__errno>
 8003790:	4603      	mov	r3, r0
 8003792:	220c      	movs	r2, #12
 8003794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800379a:	e009      	b.n	80037b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <_sbrk+0x64>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <_sbrk+0x64>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <_sbrk+0x64>)
 80037ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ae:	68fb      	ldr	r3, [r7, #12]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20020000 	.word	0x20020000
 80037bc:	00000400 	.word	0x00000400
 80037c0:	200006e8 	.word	0x200006e8
 80037c4:	200045b8 	.word	0x200045b8

080037c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <SystemInit+0x20>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <SystemInit+0x20>)
 80037d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f006 f8f6 	bl	80099ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003808:	4b22      	ldr	r3, [pc, #136]	; (8003894 <MX_TIM1_Init+0xa8>)
 800380a:	4a23      	ldr	r2, [pc, #140]	; (8003898 <MX_TIM1_Init+0xac>)
 800380c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800380e:	4b21      	ldr	r3, [pc, #132]	; (8003894 <MX_TIM1_Init+0xa8>)
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003814:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <MX_TIM1_Init+0xa8>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <MX_TIM1_Init+0xa8>)
 800381c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003820:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <MX_TIM1_Init+0xa8>)
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <MX_TIM1_Init+0xa8>)
 800382a:	2200      	movs	r2, #0
 800382c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <MX_TIM1_Init+0xa8>)
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003834:	2303      	movs	r3, #3
 8003836:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800384c:	2301      	movs	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003850:	2300      	movs	r3, #0
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	4619      	mov	r1, r3
 800385e:	480d      	ldr	r0, [pc, #52]	; (8003894 <MX_TIM1_Init+0xa8>)
 8003860:	f003 fe60 	bl	8007524 <HAL_TIM_Encoder_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800386a:	f7ff f8e1 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	4619      	mov	r1, r3
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <MX_TIM1_Init+0xa8>)
 800387c:	f004 fade 	bl	8007e3c <HAL_TIMEx_MasterConfigSynchronization>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003886:	f7ff f8d3 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800388a:	bf00      	nop
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200006ec 	.word	0x200006ec
 8003898:	40010000 	.word	0x40010000

0800389c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038a2:	f107 030c 	add.w	r3, r7, #12
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f006 f89e 	bl	80099ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038b8:	4b21      	ldr	r3, [pc, #132]	; (8003940 <MX_TIM2_Init+0xa4>)
 80038ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <MX_TIM2_Init+0xa4>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c6:	4b1e      	ldr	r3, [pc, #120]	; (8003940 <MX_TIM2_Init+0xa4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80038cc:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <MX_TIM2_Init+0xa4>)
 80038ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <MX_TIM2_Init+0xa4>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038da:	4b19      	ldr	r3, [pc, #100]	; (8003940 <MX_TIM2_Init+0xa4>)
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038e0:	2303      	movs	r3, #3
 80038e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038e8:	2301      	movs	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038f4:	2300      	movs	r3, #0
 80038f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038f8:	2301      	movs	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	4619      	mov	r1, r3
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <MX_TIM2_Init+0xa4>)
 800390c:	f003 fe0a 	bl	8007524 <HAL_TIM_Encoder_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003916:	f7ff f88b 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003922:	1d3b      	adds	r3, r7, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4806      	ldr	r0, [pc, #24]	; (8003940 <MX_TIM2_Init+0xa4>)
 8003928:	f004 fa88 	bl	8007e3c <HAL_TIMEx_MasterConfigSynchronization>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003932:	f7ff f87d 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	3730      	adds	r7, #48	; 0x30
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000734 	.word	0x20000734

08003944 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003958:	463b      	mov	r3, r7
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <MX_TIM3_Init+0x94>)
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <MX_TIM3_Init+0x98>)
 8003964:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <MX_TIM3_Init+0x94>)
 8003968:	2253      	movs	r2, #83	; 0x53
 800396a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <MX_TIM3_Init+0x94>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <MX_TIM3_Init+0x94>)
 8003974:	f242 720f 	movw	r2, #9999	; 0x270f
 8003978:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <MX_TIM3_Init+0x94>)
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <MX_TIM3_Init+0x94>)
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003986:	4814      	ldr	r0, [pc, #80]	; (80039d8 <MX_TIM3_Init+0x94>)
 8003988:	f003 fd0c 	bl	80073a4 <HAL_TIM_Base_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003992:	f7ff f84d 	bl	8002a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800399a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800399c:	f107 0308 	add.w	r3, r7, #8
 80039a0:	4619      	mov	r1, r3
 80039a2:	480d      	ldr	r0, [pc, #52]	; (80039d8 <MX_TIM3_Init+0x94>)
 80039a4:	f003 fffa 	bl	800799c <HAL_TIM_ConfigClockSource>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80039ae:	f7ff f83f 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039ba:	463b      	mov	r3, r7
 80039bc:	4619      	mov	r1, r3
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <MX_TIM3_Init+0x94>)
 80039c0:	f004 fa3c 	bl	8007e3c <HAL_TIMEx_MasterConfigSynchronization>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80039ca:	f7ff f831 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000077c 	.word	0x2000077c
 80039dc:	40000400 	.word	0x40000400

080039e0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e6:	463b      	mov	r3, r7
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <MX_TIM9_Init+0x6c>)
 80039f4:	4a16      	ldr	r2, [pc, #88]	; (8003a50 <MX_TIM9_Init+0x70>)
 80039f6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <MX_TIM9_Init+0x6c>)
 80039fa:	22a7      	movs	r2, #167	; 0xa7
 80039fc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <MX_TIM9_Init+0x6c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <MX_TIM9_Init+0x6c>)
 8003a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a0a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <MX_TIM9_Init+0x6c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <MX_TIM9_Init+0x6c>)
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003a18:	480c      	ldr	r0, [pc, #48]	; (8003a4c <MX_TIM9_Init+0x6c>)
 8003a1a:	f003 fcc3 	bl	80073a4 <HAL_TIM_Base_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003a24:	f7ff f804 	bl	8002a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a2c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003a2e:	463b      	mov	r3, r7
 8003a30:	4619      	mov	r1, r3
 8003a32:	4806      	ldr	r0, [pc, #24]	; (8003a4c <MX_TIM9_Init+0x6c>)
 8003a34:	f003 ffb2 	bl	800799c <HAL_TIM_ConfigClockSource>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003a3e:	f7fe fff7 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200007c4 	.word	0x200007c4
 8003a50:	40014000 	.word	0x40014000

08003a54 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a36      	ldr	r2, [pc, #216]	; (8003b4c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d135      	bne.n	8003ae2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	4b35      	ldr	r3, [pc, #212]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6453      	str	r3, [r2, #68]	; 0x44
 8003a86:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003a9c:	f043 0310 	orr.w	r3, r3, #16
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003aae:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4822      	ldr	r0, [pc, #136]	; (8003b54 <HAL_TIM_Encoder_MspInit+0x100>)
 8003acc:	f001 f8d2 	bl	8004c74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	2018      	movs	r0, #24
 8003ad6:	f001 f8a3 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003ada:	2018      	movs	r0, #24
 8003adc:	f001 f8bc 	bl	8004c58 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003ae0:	e030      	b.n	8003b44 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d12b      	bne.n	8003b44 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6413      	str	r3, [r2, #64]	; 0x40
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6313      	str	r3, [r2, #48]	; 0x30
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b24:	2303      	movs	r3, #3
 8003b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b34:	2301      	movs	r3, #1
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4806      	ldr	r0, [pc, #24]	; (8003b58 <HAL_TIM_Encoder_MspInit+0x104>)
 8003b40:	f001 f898 	bl	8004c74 <HAL_GPIO_Init>
}
 8003b44:	bf00      	nop
 8003b46:	3730      	adds	r7, #48	; 0x30
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40020000 	.word	0x40020000

08003b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <HAL_TIM_Base_MspInit+0x80>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d116      	bne.n	8003b9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_TIM_Base_MspInit+0x84>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <HAL_TIM_Base_MspInit+0x84>)
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <HAL_TIM_Base_MspInit+0x84>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2105      	movs	r1, #5
 8003b8e:	201d      	movs	r0, #29
 8003b90:	f001 f846 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b94:	201d      	movs	r0, #29
 8003b96:	f001 f85f 	bl	8004c58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003b9a:	e01a      	b.n	8003bd2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM9)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <HAL_TIM_Base_MspInit+0x88>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d115      	bne.n	8003bd2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_TIM_Base_MspInit+0x84>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_TIM_Base_MspInit+0x84>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_TIM_Base_MspInit+0x84>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2105      	movs	r1, #5
 8003bc6:	2018      	movs	r0, #24
 8003bc8:	f001 f82a 	bl	8004c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003bcc:	2018      	movs	r0, #24
 8003bce:	f001 f843 	bl	8004c58 <HAL_NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40014000 	.word	0x40014000

08003be8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003bee:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <MX_USART1_UART_Init+0x50>)
 8003bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfa:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003c0e:	220c      	movs	r2, #12
 8003c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c1e:	4805      	ldr	r0, [pc, #20]	; (8003c34 <MX_USART1_UART_Init+0x4c>)
 8003c20:	f004 f99c 	bl	8007f5c <HAL_UART_Init>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c2a:	f7fe ff01 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2000080c 	.word	0x2000080c
 8003c38:	40011000 	.word	0x40011000

08003c3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_UART_MspInit+0x84>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d12c      	bne.n	8003cb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_UART_MspInit+0x88>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_UART_MspInit+0x88>)
 8003c68:	f043 0310 	orr.w	r3, r3, #16
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_UART_MspInit+0x88>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <HAL_UART_MspInit+0x88>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	4a10      	ldr	r2, [pc, #64]	; (8003cc4 <HAL_UART_MspInit+0x88>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_UART_MspInit+0x88>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ca8:	2307      	movs	r3, #7
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <HAL_UART_MspInit+0x8c>)
 8003cb4:	f000 ffde 	bl	8004c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40020000 	.word	0x40020000

08003ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cd0:	480d      	ldr	r0, [pc, #52]	; (8003d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cd2:	490e      	ldr	r1, [pc, #56]	; (8003d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cd4:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cd8:	e002      	b.n	8003ce0 <LoopCopyDataInit>

08003cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cde:	3304      	adds	r3, #4

08003ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ce4:	d3f9      	bcc.n	8003cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ce6:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ce8:	4c0b      	ldr	r4, [pc, #44]	; (8003d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cec:	e001      	b.n	8003cf2 <LoopFillZerobss>

08003cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf0:	3204      	adds	r2, #4

08003cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cf4:	d3fb      	bcc.n	8003cee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cf6:	f7ff fd67 	bl	80037c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cfa:	f005 fe45 	bl	8009988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cfe:	f7fe fd1b 	bl	8002738 <main>
  bx  lr    
 8003d02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d0c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003d10:	0800d500 	.word	0x0800d500
  ldr r2, =_sbss
 8003d14:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003d18:	200045b8 	.word	0x200045b8

08003d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d1c:	e7fe      	b.n	8003d1c <ADC_IRQHandler>
	...

08003d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_Init+0x40>)
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_Init+0x40>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <HAL_Init+0x40>)
 8003d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_Init+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <HAL_Init+0x40>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d48:	2003      	movs	r0, #3
 8003d4a:	f000 ff5e 	bl	8004c0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d4e:	200f      	movs	r0, #15
 8003d50:	f7ff fbd8 	bl	8003504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d54:	f7ff fbaa 	bl	80034ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023c00 	.word	0x40023c00

08003d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_IncTick+0x20>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_IncTick+0x24>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4413      	add	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_IncTick+0x24>)
 8003d76:	6013      	str	r3, [r2, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000020 	.word	0x20000020
 8003d88:	20000850 	.word	0x20000850

08003d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_GetTick+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000850 	.word	0x20000850

08003da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7ff ffee 	bl	8003d8c <HAL_GetTick>
 8003db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dbc:	d005      	beq.n	8003dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_Delay+0x44>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dca:	bf00      	nop
 8003dcc:	f7ff ffde 	bl	8003d8c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d8f7      	bhi.n	8003dcc <HAL_Delay+0x28>
  {
  }
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000020 	.word	0x20000020

08003dec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0ed      	b.n	8003fda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd fc68 	bl	80016e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e20:	f7ff ffb4 	bl	8003d8c <HAL_GetTick>
 8003e24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e26:	e012      	b.n	8003e4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e28:	f7ff ffb0 	bl	8003d8c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b0a      	cmp	r3, #10
 8003e34:	d90b      	bls.n	8003e4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2205      	movs	r2, #5
 8003e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0c5      	b.n	8003fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0e5      	beq.n	8003e28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0202 	bic.w	r2, r2, #2
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e6c:	f7ff ff8e 	bl	8003d8c <HAL_GetTick>
 8003e70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e72:	e012      	b.n	8003e9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e74:	f7ff ff8a 	bl	8003d8c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b0a      	cmp	r3, #10
 8003e80:	d90b      	bls.n	8003e9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2205      	movs	r2, #5
 8003e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e09f      	b.n	8003fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	7e1b      	ldrb	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d108      	bne.n	8003ec2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e007      	b.n	8003ed2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	7e5b      	ldrb	r3, [r3, #25]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d108      	bne.n	8003eec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e007      	b.n	8003efc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7e9b      	ldrb	r3, [r3, #26]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d108      	bne.n	8003f16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0220 	orr.w	r2, r2, #32
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e007      	b.n	8003f26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0220 	bic.w	r2, r2, #32
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7edb      	ldrb	r3, [r3, #27]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d108      	bne.n	8003f40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0210 	bic.w	r2, r2, #16
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e007      	b.n	8003f50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0210 	orr.w	r2, r2, #16
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7f1b      	ldrb	r3, [r3, #28]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d108      	bne.n	8003f6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0208 	orr.w	r2, r2, #8
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e007      	b.n	8003f7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0208 	bic.w	r2, r2, #8
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7f5b      	ldrb	r3, [r3, #29]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d108      	bne.n	8003f94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0204 	orr.w	r2, r2, #4
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e007      	b.n	8003fa4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0204 	bic.w	r2, r2, #4
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d003      	beq.n	800400a <HAL_CAN_ConfigFilter+0x26>
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	2b02      	cmp	r3, #2
 8004006:	f040 80be 	bne.w	8004186 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_CAN_ConfigFilter+0x1bc>)
 800400c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004024:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	431a      	orrs	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	401a      	ands	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d123      	bne.n	80040b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800408e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3248      	adds	r2, #72	; 0x48
 8004094:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040aa:	6979      	ldr	r1, [r7, #20]
 80040ac:	3348      	adds	r3, #72	; 0x48
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	440b      	add	r3, r1
 80040b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d122      	bne.n	8004102 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3248      	adds	r2, #72	; 0x48
 80040e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	3348      	adds	r3, #72	; 0x48
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43db      	mvns	r3, r3
 8004114:	401a      	ands	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800411c:	e007      	b.n	800412e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	431a      	orrs	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	43db      	mvns	r3, r3
 8004140:	401a      	ands	r2, r3
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004148:	e007      	b.n	800415a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	431a      	orrs	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	431a      	orrs	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004178:	f023 0201 	bic.w	r2, r3, #1
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e006      	b.n	8004194 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	40006400 	.word	0x40006400

080041a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d12e      	bne.n	8004216 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041d0:	f7ff fddc 	bl	8003d8c <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041d6:	e012      	b.n	80041fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041d8:	f7ff fdd8 	bl	8003d8c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b0a      	cmp	r3, #10
 80041e4:	d90b      	bls.n	80041fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2205      	movs	r2, #5
 80041f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e012      	b.n	8004224 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e5      	bne.n	80041d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e006      	b.n	8004224 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
 8004238:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004240:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800424a:	7ffb      	ldrb	r3, [r7, #31]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d003      	beq.n	8004258 <HAL_CAN_AddTxMessage+0x2c>
 8004250:	7ffb      	ldrb	r3, [r7, #31]
 8004252:	2b02      	cmp	r3, #2
 8004254:	f040 80b8 	bne.w	80043c8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80a0 	beq.w	80043b8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	0e1b      	lsrs	r3, r3, #24
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d907      	bls.n	8004298 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e09e      	b.n	80043d6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004298:	2201      	movs	r2, #1
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	409a      	lsls	r2, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10d      	bne.n	80042c6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042b4:	68f9      	ldr	r1, [r7, #12]
 80042b6:	6809      	ldr	r1, [r1, #0]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3318      	adds	r3, #24
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	440b      	add	r3, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e00f      	b.n	80042e6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042d0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80042da:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3318      	adds	r3, #24
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	440b      	add	r3, r1
 80042e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3318      	adds	r3, #24
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	440b      	add	r3, r1
 80042f6:	3304      	adds	r3, #4
 80042f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	7d1b      	ldrb	r3, [r3, #20]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d111      	bne.n	8004326 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3318      	adds	r3, #24
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	6811      	ldr	r1, [r2, #0]
 8004316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	3318      	adds	r3, #24
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	440b      	add	r3, r1
 8004322:	3304      	adds	r3, #4
 8004324:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3307      	adds	r3, #7
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	061a      	lsls	r2, r3, #24
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3306      	adds	r3, #6
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3305      	adds	r3, #5
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	4313      	orrs	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	3204      	adds	r2, #4
 8004346:	7812      	ldrb	r2, [r2, #0]
 8004348:	4610      	mov	r0, r2
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	6811      	ldr	r1, [r2, #0]
 800434e:	ea43 0200 	orr.w	r2, r3, r0
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	440b      	add	r3, r1
 8004358:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800435c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3303      	adds	r3, #3
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	061a      	lsls	r2, r3, #24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3302      	adds	r3, #2
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3301      	adds	r3, #1
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	4313      	orrs	r3, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	4610      	mov	r0, r2
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	6811      	ldr	r1, [r2, #0]
 8004384:	ea43 0200 	orr.w	r2, r3, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	440b      	add	r3, r1
 800438e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004392:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3318      	adds	r3, #24
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4413      	add	r3, r2
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	6811      	ldr	r1, [r2, #0]
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	3318      	adds	r3, #24
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	440b      	add	r3, r1
 80043b2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e00e      	b.n	80043d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e006      	b.n	80043d6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d003      	beq.n	8004406 <HAL_CAN_GetRxMessage+0x24>
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b02      	cmp	r3, #2
 8004402:	f040 80f3 	bne.w	80045ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10e      	bne.n	800442a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0e7      	b.n	80045fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d107      	bne.n	8004448 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0d8      	b.n	80045fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	331b      	adds	r3, #27
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4413      	add	r3, r2
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0204 	and.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	331b      	adds	r3, #27
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4413      	add	r3, r2
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	0d5b      	lsrs	r3, r3, #21
 8004476:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e00b      	b.n	8004498 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	331b      	adds	r3, #27
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4413      	add	r3, r2
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	08db      	lsrs	r3, r3, #3
 8004490:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	331b      	adds	r3, #27
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4413      	add	r3, r2
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0202 	and.w	r2, r3, #2
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	331b      	adds	r3, #27
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 020f 	and.w	r2, r3, #15
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	331b      	adds	r3, #27
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	4413      	add	r3, r2
 80044d2:	3304      	adds	r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	331b      	adds	r3, #27
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	4413      	add	r3, r2
 8004516:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	0a1a      	lsrs	r2, r3, #8
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4413      	add	r3, r2
 8004530:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0c1a      	lsrs	r2, r3, #16
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	3302      	adds	r3, #2
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4413      	add	r3, r2
 800454a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	0e1a      	lsrs	r2, r3, #24
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	3303      	adds	r3, #3
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4413      	add	r3, r2
 8004564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	3304      	adds	r3, #4
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	4413      	add	r3, r2
 800457c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0a1a      	lsrs	r2, r3, #8
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3305      	adds	r3, #5
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	4413      	add	r3, r2
 8004596:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0c1a      	lsrs	r2, r3, #16
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	3306      	adds	r3, #6
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	0e1a      	lsrs	r2, r3, #24
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	3307      	adds	r3, #7
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d108      	bne.n	80045d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0220 	orr.w	r2, r2, #32
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	e007      	b.n	80045e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0220 	orr.w	r2, r2, #32
 80045e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e006      	b.n	80045fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004616:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d002      	beq.n	8004624 <HAL_CAN_ActivateNotification+0x1e>
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d109      	bne.n	8004638 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6959      	ldr	r1, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e006      	b.n	8004646 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d07c      	beq.n	8004792 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d023      	beq.n	80046ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2201      	movs	r2, #1
 80046a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f983 	bl	80049c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80046ba:	e016      	b.n	80046ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
 80046ce:	e00c      	b.n	80046ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	e002      	b.n	80046ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f989 	bl	80049fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d024      	beq.n	800473e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f963 	bl	80049d4 <HAL_CAN_TxMailbox1CompleteCallback>
 800470e:	e016      	b.n	800473e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004716:	2b00      	cmp	r3, #0
 8004718:	d004      	beq.n	8004724 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	e00c      	b.n	800473e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	e002      	b.n	800473e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f969 	bl	8004a10 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d024      	beq.n	8004792 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004750:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f943 	bl	80049e8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004762:	e016      	b.n	8004792 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
 8004776:	e00c      	b.n	8004792 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	e002      	b.n	8004792 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f949 	bl	8004a24 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2210      	movs	r2, #16
 80047b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d006      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2208      	movs	r2, #8
 80047d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f930 	bl	8004a38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fd fed1 	bl	8002598 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004810:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2208      	movs	r2, #8
 8004834:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f912 	bl	8004a60 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8f9 	bl	8004a4c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2210      	movs	r2, #16
 8004874:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8fc 	bl	8004a74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f8f5 	bl	8004a88 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d07b      	beq.n	80049a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d072      	beq.n	8004998 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	f043 0302 	orr.w	r3, r3, #2
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800490c:	2b00      	cmp	r3, #0
 800490e:	d043      	beq.n	8004998 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004916:	2b00      	cmp	r3, #0
 8004918:	d03e      	beq.n	8004998 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004920:	2b60      	cmp	r3, #96	; 0x60
 8004922:	d02b      	beq.n	800497c <HAL_CAN_IRQHandler+0x32a>
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d82e      	bhi.n	8004986 <HAL_CAN_IRQHandler+0x334>
 8004928:	2b50      	cmp	r3, #80	; 0x50
 800492a:	d022      	beq.n	8004972 <HAL_CAN_IRQHandler+0x320>
 800492c:	2b50      	cmp	r3, #80	; 0x50
 800492e:	d82a      	bhi.n	8004986 <HAL_CAN_IRQHandler+0x334>
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d019      	beq.n	8004968 <HAL_CAN_IRQHandler+0x316>
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d826      	bhi.n	8004986 <HAL_CAN_IRQHandler+0x334>
 8004938:	2b30      	cmp	r3, #48	; 0x30
 800493a:	d010      	beq.n	800495e <HAL_CAN_IRQHandler+0x30c>
 800493c:	2b30      	cmp	r3, #48	; 0x30
 800493e:	d822      	bhi.n	8004986 <HAL_CAN_IRQHandler+0x334>
 8004940:	2b10      	cmp	r3, #16
 8004942:	d002      	beq.n	800494a <HAL_CAN_IRQHandler+0x2f8>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d005      	beq.n	8004954 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004948:	e01d      	b.n	8004986 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004952:	e019      	b.n	8004988 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f043 0310 	orr.w	r3, r3, #16
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800495c:	e014      	b.n	8004988 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f043 0320 	orr.w	r3, r3, #32
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004966:	e00f      	b.n	8004988 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004970:	e00a      	b.n	8004988 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800497a:	e005      	b.n	8004988 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004984:	e000      	b.n	8004988 <HAL_CAN_IRQHandler+0x336>
            break;
 8004986:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004996:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2204      	movs	r2, #4
 800499e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f872 	bl	8004a9c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80049b8:	bf00      	nop
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004acc:	4013      	ands	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ae2:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	60d3      	str	r3, [r2, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <__NVIC_GetPriorityGrouping+0x18>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	f003 0307 	and.w	r3, r3, #7
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db0b      	blt.n	8004b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	f003 021f 	and.w	r2, r3, #31
 8004b2c:	4907      	ldr	r1, [pc, #28]	; (8004b4c <__NVIC_EnableIRQ+0x38>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2001      	movs	r0, #1
 8004b36:	fa00 f202 	lsl.w	r2, r0, r2
 8004b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e100 	.word	0xe000e100

08004b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	6039      	str	r1, [r7, #0]
 8004b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	db0a      	blt.n	8004b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	490c      	ldr	r1, [pc, #48]	; (8004b9c <__NVIC_SetPriority+0x4c>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	0112      	lsls	r2, r2, #4
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	440b      	add	r3, r1
 8004b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b78:	e00a      	b.n	8004b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4908      	ldr	r1, [pc, #32]	; (8004ba0 <__NVIC_SetPriority+0x50>)
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	3b04      	subs	r3, #4
 8004b88:	0112      	lsls	r2, r2, #4
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	761a      	strb	r2, [r3, #24]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000e100 	.word	0xe000e100
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f1c3 0307 	rsb	r3, r3, #7
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	bf28      	it	cs
 8004bc2:	2304      	movcs	r3, #4
 8004bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d902      	bls.n	8004bd4 <NVIC_EncodePriority+0x30>
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	3b03      	subs	r3, #3
 8004bd2:	e000      	b.n	8004bd6 <NVIC_EncodePriority+0x32>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	401a      	ands	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	43d9      	mvns	r1, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bfc:	4313      	orrs	r3, r2
         );
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3724      	adds	r7, #36	; 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff ff4c 	bl	8004ab0 <__NVIC_SetPriorityGrouping>
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c32:	f7ff ff61 	bl	8004af8 <__NVIC_GetPriorityGrouping>
 8004c36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	6978      	ldr	r0, [r7, #20]
 8004c3e:	f7ff ffb1 	bl	8004ba4 <NVIC_EncodePriority>
 8004c42:	4602      	mov	r2, r0
 8004c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ff80 	bl	8004b50 <__NVIC_SetPriority>
}
 8004c50:	bf00      	nop
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff ff54 	bl	8004b14 <__NVIC_EnableIRQ>
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	e16b      	b.n	8004f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c90:	2201      	movs	r2, #1
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	f040 815a 	bne.w	8004f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d005      	beq.n	8004cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d130      	bne.n	8004d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 0201 	and.w	r2, r3, #1
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d017      	beq.n	8004d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	2203      	movs	r2, #3
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d123      	bne.n	8004db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	08da      	lsrs	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3208      	adds	r2, #8
 8004d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	220f      	movs	r2, #15
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	08da      	lsrs	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3208      	adds	r2, #8
 8004db2:	69b9      	ldr	r1, [r7, #24]
 8004db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0203 	and.w	r2, r3, #3
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80b4 	beq.w	8004f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	4b60      	ldr	r3, [pc, #384]	; (8004f80 <HAL_GPIO_Init+0x30c>)
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	4a5f      	ldr	r2, [pc, #380]	; (8004f80 <HAL_GPIO_Init+0x30c>)
 8004e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e08:	6453      	str	r3, [r2, #68]	; 0x44
 8004e0a:	4b5d      	ldr	r3, [pc, #372]	; (8004f80 <HAL_GPIO_Init+0x30c>)
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e16:	4a5b      	ldr	r2, [pc, #364]	; (8004f84 <HAL_GPIO_Init+0x310>)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	089b      	lsrs	r3, r3, #2
 8004e1c:	3302      	adds	r3, #2
 8004e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	220f      	movs	r2, #15
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43db      	mvns	r3, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4013      	ands	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	; (8004f88 <HAL_GPIO_Init+0x314>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d02b      	beq.n	8004e9a <HAL_GPIO_Init+0x226>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a51      	ldr	r2, [pc, #324]	; (8004f8c <HAL_GPIO_Init+0x318>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d025      	beq.n	8004e96 <HAL_GPIO_Init+0x222>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a50      	ldr	r2, [pc, #320]	; (8004f90 <HAL_GPIO_Init+0x31c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01f      	beq.n	8004e92 <HAL_GPIO_Init+0x21e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4f      	ldr	r2, [pc, #316]	; (8004f94 <HAL_GPIO_Init+0x320>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d019      	beq.n	8004e8e <HAL_GPIO_Init+0x21a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a4e      	ldr	r2, [pc, #312]	; (8004f98 <HAL_GPIO_Init+0x324>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_GPIO_Init+0x216>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a4d      	ldr	r2, [pc, #308]	; (8004f9c <HAL_GPIO_Init+0x328>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00d      	beq.n	8004e86 <HAL_GPIO_Init+0x212>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a4c      	ldr	r2, [pc, #304]	; (8004fa0 <HAL_GPIO_Init+0x32c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <HAL_GPIO_Init+0x20e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a4b      	ldr	r2, [pc, #300]	; (8004fa4 <HAL_GPIO_Init+0x330>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_GPIO_Init+0x20a>
 8004e7a:	2307      	movs	r3, #7
 8004e7c:	e00e      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e7e:	2308      	movs	r3, #8
 8004e80:	e00c      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e82:	2306      	movs	r3, #6
 8004e84:	e00a      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e86:	2305      	movs	r3, #5
 8004e88:	e008      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	e006      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e004      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e002      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_GPIO_Init+0x228>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	f002 0203 	and.w	r2, r2, #3
 8004ea2:	0092      	lsls	r2, r2, #2
 8004ea4:	4093      	lsls	r3, r2
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eac:	4935      	ldr	r1, [pc, #212]	; (8004f84 <HAL_GPIO_Init+0x310>)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	089b      	lsrs	r3, r3, #2
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ede:	4a32      	ldr	r2, [pc, #200]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ee4:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f5c:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <HAL_GPIO_Init+0x334>)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3301      	adds	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	f67f ae90 	bls.w	8004c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3724      	adds	r7, #36	; 0x24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40013800 	.word	0x40013800
 8004f88:	40020000 	.word	0x40020000
 8004f8c:	40020400 	.word	0x40020400
 8004f90:	40020800 	.word	0x40020800
 8004f94:	40020c00 	.word	0x40020c00
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40021400 	.word	0x40021400
 8004fa0:	40021800 	.word	0x40021800
 8004fa4:	40021c00 	.word	0x40021c00
 8004fa8:	40013c00 	.word	0x40013c00

08004fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	807b      	strh	r3, [r7, #2]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fbc:	787b      	ldrb	r3, [r7, #1]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fc2:	887a      	ldrh	r2, [r7, #2]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fc8:	e003      	b.n	8004fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fca:	887b      	ldrh	r3, [r7, #2]
 8004fcc:	041a      	lsls	r2, r3, #16
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	619a      	str	r2, [r3, #24]
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e12b      	b.n	800524a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd fa1c 	bl	8002444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005044:	f001 fbac 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 8005048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4a81      	ldr	r2, [pc, #516]	; (8005254 <HAL_I2C_Init+0x274>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d807      	bhi.n	8005064 <HAL_I2C_Init+0x84>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4a80      	ldr	r2, [pc, #512]	; (8005258 <HAL_I2C_Init+0x278>)
 8005058:	4293      	cmp	r3, r2
 800505a:	bf94      	ite	ls
 800505c:	2301      	movls	r3, #1
 800505e:	2300      	movhi	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e006      	b.n	8005072 <HAL_I2C_Init+0x92>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a7d      	ldr	r2, [pc, #500]	; (800525c <HAL_I2C_Init+0x27c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	bf94      	ite	ls
 800506c:	2301      	movls	r3, #1
 800506e:	2300      	movhi	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e0e7      	b.n	800524a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4a78      	ldr	r2, [pc, #480]	; (8005260 <HAL_I2C_Init+0x280>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	0c9b      	lsrs	r3, r3, #18
 8005084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	4a6a      	ldr	r2, [pc, #424]	; (8005254 <HAL_I2C_Init+0x274>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d802      	bhi.n	80050b4 <HAL_I2C_Init+0xd4>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	e009      	b.n	80050c8 <HAL_I2C_Init+0xe8>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050ba:	fb02 f303 	mul.w	r3, r2, r3
 80050be:	4a69      	ldr	r2, [pc, #420]	; (8005264 <HAL_I2C_Init+0x284>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	099b      	lsrs	r3, r3, #6
 80050c6:	3301      	adds	r3, #1
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	495c      	ldr	r1, [pc, #368]	; (8005254 <HAL_I2C_Init+0x274>)
 80050e4:	428b      	cmp	r3, r1
 80050e6:	d819      	bhi.n	800511c <HAL_I2C_Init+0x13c>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1e59      	subs	r1, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050fc:	400b      	ands	r3, r1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_I2C_Init+0x138>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1e59      	subs	r1, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005110:	3301      	adds	r3, #1
 8005112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005116:	e051      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 8005118:	2304      	movs	r3, #4
 800511a:	e04f      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d111      	bne.n	8005148 <HAL_I2C_Init+0x168>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1e58      	subs	r0, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	440b      	add	r3, r1
 8005132:	fbb0 f3f3 	udiv	r3, r0, r3
 8005136:	3301      	adds	r3, #1
 8005138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e012      	b.n	800516e <HAL_I2C_Init+0x18e>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1e58      	subs	r0, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	0099      	lsls	r1, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	fbb0 f3f3 	udiv	r3, r0, r3
 800515e:	3301      	adds	r3, #1
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Init+0x196>
 8005172:	2301      	movs	r3, #1
 8005174:	e022      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10e      	bne.n	800519c <HAL_I2C_Init+0x1bc>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1e58      	subs	r0, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6859      	ldr	r1, [r3, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	440b      	add	r3, r1
 800518c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005190:	3301      	adds	r3, #1
 8005192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	e00f      	b.n	80051bc <HAL_I2C_Init+0x1dc>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e58      	subs	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	0099      	lsls	r1, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6809      	ldr	r1, [r1, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6911      	ldr	r1, [r2, #16]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	4311      	orrs	r1, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	000186a0 	.word	0x000186a0
 8005258:	001e847f 	.word	0x001e847f
 800525c:	003d08ff 	.word	0x003d08ff
 8005260:	431bde83 	.word	0x431bde83
 8005264:	10624dd3 	.word	0x10624dd3

08005268 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	461a      	mov	r2, r3
 8005274:	460b      	mov	r3, r1
 8005276:	817b      	strh	r3, [r7, #10]
 8005278:	4613      	mov	r3, r2
 800527a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800527c:	f7fe fd86 	bl	8003d8c <HAL_GetTick>
 8005280:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b20      	cmp	r3, #32
 800528c:	f040 80e0 	bne.w	8005450 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2319      	movs	r3, #25
 8005296:	2201      	movs	r2, #1
 8005298:	4970      	ldr	r1, [pc, #448]	; (800545c <HAL_I2C_Master_Transmit+0x1f4>)
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fc72 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0d3      	b.n	8005452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2C_Master_Transmit+0x50>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0cc      	b.n	8005452 <HAL_I2C_Master_Transmit+0x1ea>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d007      	beq.n	80052de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2210      	movs	r2, #16
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	893a      	ldrh	r2, [r7, #8]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4a50      	ldr	r2, [pc, #320]	; (8005460 <HAL_I2C_Master_Transmit+0x1f8>)
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005320:	8979      	ldrh	r1, [r7, #10]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fadc 	bl	80058e4 <I2C_MasterRequestWrite>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e08d      	b.n	8005452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800534c:	e066      	b.n	800541c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	6a39      	ldr	r1, [r7, #32]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fcec 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b04      	cmp	r3, #4
 8005364:	d107      	bne.n	8005376 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e06b      	b.n	8005452 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	781a      	ldrb	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d11b      	bne.n	80053f0 <HAL_I2C_Master_Transmit+0x188>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d017      	beq.n	80053f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	6a39      	ldr	r1, [r7, #32]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fcdc 	bl	8005db2 <I2C_WaitOnBTFFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b04      	cmp	r3, #4
 8005406:	d107      	bne.n	8005418 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e01a      	b.n	8005452 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d194      	bne.n	800534e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	00100002 	.word	0x00100002
 8005460:	ffff0000 	.word	0xffff0000

08005464 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	; 0x30
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	461a      	mov	r2, r3
 8005470:	460b      	mov	r3, r1
 8005472:	817b      	strh	r3, [r7, #10]
 8005474:	4613      	mov	r3, r2
 8005476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005478:	f7fe fc88 	bl	8003d8c <HAL_GetTick>
 800547c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b20      	cmp	r3, #32
 8005488:	f040 820b 	bne.w	80058a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	2319      	movs	r3, #25
 8005492:	2201      	movs	r2, #1
 8005494:	497c      	ldr	r1, [pc, #496]	; (8005688 <HAL_I2C_Master_Receive+0x224>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 fb74 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	e1fe      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_I2C_Master_Receive+0x50>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e1f7      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d007      	beq.n	80054da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2222      	movs	r2, #34	; 0x22
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2210      	movs	r2, #16
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	893a      	ldrh	r2, [r7, #8]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a5c      	ldr	r2, [pc, #368]	; (800568c <HAL_I2C_Master_Receive+0x228>)
 800551a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800551c:	8979      	ldrh	r1, [r7, #10]
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fa60 	bl	80059e8 <I2C_MasterRequestRead>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e1b8      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d113      	bne.n	8005562 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553a:	2300      	movs	r3, #0
 800553c:	623b      	str	r3, [r7, #32]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	623b      	str	r3, [r7, #32]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	623b      	str	r3, [r7, #32]
 800554e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e18c      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005566:	2b01      	cmp	r3, #1
 8005568:	d11b      	bne.n	80055a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e16c      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d11b      	bne.n	80055e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ca:	2300      	movs	r3, #0
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	e14c      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005608:	e138      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560e:	2b03      	cmp	r3, #3
 8005610:	f200 80f1 	bhi.w	80057f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	2b01      	cmp	r3, #1
 800561a:	d123      	bne.n	8005664 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fc07 	bl	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e139      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005662:	e10b      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005668:	2b02      	cmp	r3, #2
 800566a:	d14e      	bne.n	800570a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2200      	movs	r2, #0
 8005674:	4906      	ldr	r1, [pc, #24]	; (8005690 <HAL_I2C_Master_Receive+0x22c>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fa84 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e10e      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
 8005686:	bf00      	nop
 8005688:	00100002 	.word	0x00100002
 800568c:	ffff0000 	.word	0xffff0000
 8005690:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005708:	e0b8      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	2200      	movs	r2, #0
 8005712:	4966      	ldr	r1, [pc, #408]	; (80058ac <HAL_I2C_Master_Receive+0x448>)
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fa35 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0bf      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	2200      	movs	r2, #0
 800576e:	494f      	ldr	r1, [pc, #316]	; (80058ac <HAL_I2C_Master_Receive+0x448>)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fa07 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e091      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057f4:	e042      	b.n	800587c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fb1a 	bl	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e04c      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d118      	bne.n	800587c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f aec2 	bne.w	800560a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3728      	adds	r7, #40	; 0x28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	00010004 	.word	0x00010004

080058b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	b2db      	uxtb	r3, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	460b      	mov	r3, r1
 80058f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d006      	beq.n	800590e <I2C_MasterRequestWrite+0x2a>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d003      	beq.n	800590e <I2C_MasterRequestWrite+0x2a>
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800590c:	d108      	bne.n	8005920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e00b      	b.n	8005938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	2b12      	cmp	r3, #18
 8005926:	d107      	bne.n	8005938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f91d 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00d      	beq.n	800596c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595e:	d103      	bne.n	8005968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e035      	b.n	80059d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005974:	d108      	bne.n	8005988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005976:	897b      	ldrh	r3, [r7, #10]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005984:	611a      	str	r2, [r3, #16]
 8005986:	e01b      	b.n	80059c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	11db      	asrs	r3, r3, #7
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 0306 	and.w	r3, r3, #6
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f063 030f 	orn	r3, r3, #15
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	490e      	ldr	r1, [pc, #56]	; (80059e0 <I2C_MasterRequestWrite+0xfc>)
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f943 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e010      	b.n	80059d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059b6:	897b      	ldrh	r3, [r7, #10]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	4907      	ldr	r1, [pc, #28]	; (80059e4 <I2C_MasterRequestWrite+0x100>)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f933 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	00010008 	.word	0x00010008
 80059e4:	00010002 	.word	0x00010002

080059e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	460b      	mov	r3, r1
 80059f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d006      	beq.n	8005a22 <I2C_MasterRequestRead+0x3a>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d003      	beq.n	8005a22 <I2C_MasterRequestRead+0x3a>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a20:	d108      	bne.n	8005a34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e00b      	b.n	8005a4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	2b11      	cmp	r3, #17
 8005a3a:	d107      	bne.n	8005a4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f893 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	d103      	bne.n	8005a7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e079      	b.n	8005b74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a88:	d108      	bne.n	8005a9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	611a      	str	r2, [r3, #16]
 8005a9a:	e05f      	b.n	8005b5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a9c:	897b      	ldrh	r3, [r7, #10]
 8005a9e:	11db      	asrs	r3, r3, #7
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f003 0306 	and.w	r3, r3, #6
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f063 030f 	orn	r3, r3, #15
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4930      	ldr	r1, [pc, #192]	; (8005b7c <I2C_MasterRequestRead+0x194>)
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f8b9 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e054      	b.n	8005b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4929      	ldr	r1, [pc, #164]	; (8005b80 <I2C_MasterRequestRead+0x198>)
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f8a9 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e044      	b.n	8005b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f831 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00d      	beq.n	8005b44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b36:	d103      	bne.n	8005b40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e017      	b.n	8005b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b44:	897b      	ldrh	r3, [r7, #10]
 8005b46:	11db      	asrs	r3, r3, #7
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0306 	and.w	r3, r3, #6
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	f063 030e 	orn	r3, r3, #14
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4907      	ldr	r1, [pc, #28]	; (8005b80 <I2C_MasterRequestRead+0x198>)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f865 	bl	8005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	00010008 	.word	0x00010008
 8005b80:	00010002 	.word	0x00010002

08005b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b94:	e025      	b.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9c:	d021      	beq.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fe f8f5 	bl	8003d8c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e023      	b.n	8005c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10d      	bne.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	2300      	movne	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	e00c      	b.n	8005c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	43da      	mvns	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4013      	ands	r3, r2
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf0c      	ite	eq
 8005c1a:	2301      	moveq	r3, #1
 8005c1c:	2300      	movne	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d0b6      	beq.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c40:	e051      	b.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d123      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e046      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ca0:	d021      	beq.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fe f873 	bl	8003d8c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d116      	bne.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f043 0220 	orr.w	r2, r3, #32
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e020      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bf14      	ite	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	2300      	moveq	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e00b      	b.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	43da      	mvns	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d18d      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	e02d      	b.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8ce 	bl	8005ee0 <I2C_IsAcknowledgeFailed>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e02d      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d54:	d021      	beq.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fe f819 	bl	8003d8c <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d116      	bne.n	8005d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e007      	b.n	8005daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da4:	2b80      	cmp	r3, #128	; 0x80
 8005da6:	d1ca      	bne.n	8005d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dbe:	e02d      	b.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f88d 	bl	8005ee0 <I2C_IsAcknowledgeFailed>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e02d      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd6:	d021      	beq.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fd ffd8 	bl	8003d8c <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e007      	b.n	8005e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d1ca      	bne.n	8005dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e40:	e042      	b.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d119      	bne.n	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0210 	mvn.w	r2, #16
 8005e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e029      	b.n	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e84:	f7fd ff82 	bl	8003d8c <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d302      	bcc.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e007      	b.n	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	d1b5      	bne.n	8005e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d11b      	bne.n	8005f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f043 0204 	orr.w	r2, r3, #4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
	...

08005f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e267      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d075      	beq.n	800604a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f5e:	4b88      	ldr	r3, [pc, #544]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00c      	beq.n	8005f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6a:	4b85      	ldr	r3, [pc, #532]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d112      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f76:	4b82      	ldr	r3, [pc, #520]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f82:	d10b      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	4b7e      	ldr	r3, [pc, #504]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05b      	beq.n	8006048 <HAL_RCC_OscConfig+0x108>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d157      	bne.n	8006048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e242      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d106      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x74>
 8005fa6:	4b76      	ldr	r3, [pc, #472]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a75      	ldr	r2, [pc, #468]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e01d      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x98>
 8005fbe:	4b70      	ldr	r3, [pc, #448]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a6f      	ldr	r2, [pc, #444]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	4b6d      	ldr	r3, [pc, #436]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6c      	ldr	r2, [pc, #432]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fd8:	4b69      	ldr	r3, [pc, #420]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a68      	ldr	r2, [pc, #416]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b66      	ldr	r3, [pc, #408]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a65      	ldr	r2, [pc, #404]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fd fec8 	bl	8003d8c <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006000:	f7fd fec4 	bl	8003d8c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	; 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e207      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4b5b      	ldr	r3, [pc, #364]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0xc0>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fd feb4 	bl	8003d8c <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006028:	f7fd feb0 	bl	8003d8c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e1f3      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	4b51      	ldr	r3, [pc, #324]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0xe8>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d063      	beq.n	800611e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006056:	4b4a      	ldr	r3, [pc, #296]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006062:	4b47      	ldr	r3, [pc, #284]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800606a:	2b08      	cmp	r3, #8
 800606c:	d11c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800606e:	4b44      	ldr	r3, [pc, #272]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607a:	4b41      	ldr	r3, [pc, #260]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_RCC_OscConfig+0x152>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d001      	beq.n	8006092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e1c7      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006092:	4b3b      	ldr	r3, [pc, #236]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4937      	ldr	r1, [pc, #220]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a6:	e03a      	b.n	800611e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b0:	4b34      	ldr	r3, [pc, #208]	; (8006184 <HAL_RCC_OscConfig+0x244>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fd fe69 	bl	8003d8c <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060be:	f7fd fe65 	bl	8003d8c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e1a8      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d0:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060dc:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4925      	ldr	r1, [pc, #148]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]
 80060f0:	e015      	b.n	800611e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_RCC_OscConfig+0x244>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fe48 	bl	8003d8c <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006100:	f7fd fe44 	bl	8003d8c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e187      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006112:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d036      	beq.n	8006198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <HAL_RCC_OscConfig+0x248>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fd fe28 	bl	8003d8c <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006140:	f7fd fe24 	bl	8003d8c <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e167      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <HAL_RCC_OscConfig+0x240>)
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x200>
 800615e:	e01b      	b.n	8006198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <HAL_RCC_OscConfig+0x248>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fd fe11 	bl	8003d8c <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800616c:	e00e      	b.n	800618c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800616e:	f7fd fe0d 	bl	8003d8c <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d907      	bls.n	800618c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e150      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
 8006180:	40023800 	.word	0x40023800
 8006184:	42470000 	.word	0x42470000
 8006188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800618c:	4b88      	ldr	r3, [pc, #544]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800618e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1ea      	bne.n	800616e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8097 	beq.w	80062d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061aa:	4b81      	ldr	r3, [pc, #516]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	4b7d      	ldr	r3, [pc, #500]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	4a7c      	ldr	r2, [pc, #496]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c4:	6413      	str	r3, [r2, #64]	; 0x40
 80061c6:	4b7a      	ldr	r3, [pc, #488]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d6:	4b77      	ldr	r3, [pc, #476]	; (80063b4 <HAL_RCC_OscConfig+0x474>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d118      	bne.n	8006214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e2:	4b74      	ldr	r3, [pc, #464]	; (80063b4 <HAL_RCC_OscConfig+0x474>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a73      	ldr	r2, [pc, #460]	; (80063b4 <HAL_RCC_OscConfig+0x474>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ee:	f7fd fdcd 	bl	8003d8c <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f6:	f7fd fdc9 	bl	8003d8c <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e10c      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006208:	4b6a      	ldr	r3, [pc, #424]	; (80063b4 <HAL_RCC_OscConfig+0x474>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d106      	bne.n	800622a <HAL_RCC_OscConfig+0x2ea>
 800621c:	4b64      	ldr	r3, [pc, #400]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	4a63      	ldr	r2, [pc, #396]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6713      	str	r3, [r2, #112]	; 0x70
 8006228:	e01c      	b.n	8006264 <HAL_RCC_OscConfig+0x324>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b05      	cmp	r3, #5
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x30c>
 8006232:	4b5f      	ldr	r3, [pc, #380]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	4a5e      	ldr	r2, [pc, #376]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006238:	f043 0304 	orr.w	r3, r3, #4
 800623c:	6713      	str	r3, [r2, #112]	; 0x70
 800623e:	4b5c      	ldr	r3, [pc, #368]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a5b      	ldr	r2, [pc, #364]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0x324>
 800624c:	4b58      	ldr	r3, [pc, #352]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a57      	ldr	r2, [pc, #348]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	4b55      	ldr	r3, [pc, #340]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a54      	ldr	r2, [pc, #336]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800625e:	f023 0304 	bic.w	r3, r3, #4
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d015      	beq.n	8006298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fd fd8e 	bl	8003d8c <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006272:	e00a      	b.n	800628a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006274:	f7fd fd8a 	bl	8003d8c <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006282:	4293      	cmp	r3, r2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e0cb      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628a:	4b49      	ldr	r3, [pc, #292]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ee      	beq.n	8006274 <HAL_RCC_OscConfig+0x334>
 8006296:	e014      	b.n	80062c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006298:	f7fd fd78 	bl	8003d8c <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a0:	f7fd fd74 	bl	8003d8c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e0b5      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b6:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1ee      	bne.n	80062a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d105      	bne.n	80062d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c8:	4b39      	ldr	r3, [pc, #228]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	4a38      	ldr	r2, [pc, #224]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a1 	beq.w	8006420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062de:	4b34      	ldr	r3, [pc, #208]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d05c      	beq.n	80063a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d141      	bne.n	8006376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f2:	4b31      	ldr	r3, [pc, #196]	; (80063b8 <HAL_RCC_OscConfig+0x478>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f8:	f7fd fd48 	bl	8003d8c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006300:	f7fd fd44 	bl	8003d8c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e087      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006312:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69da      	ldr	r2, [r3, #28]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	3b01      	subs	r3, #1
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	491b      	ldr	r1, [pc, #108]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006348:	4b1b      	ldr	r3, [pc, #108]	; (80063b8 <HAL_RCC_OscConfig+0x478>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634e:	f7fd fd1d 	bl	8003d8c <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006356:	f7fd fd19 	bl	8003d8c <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e05c      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_RCC_OscConfig+0x416>
 8006374:	e054      	b.n	8006420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006376:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <HAL_RCC_OscConfig+0x478>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637c:	f7fd fd06 	bl	8003d8c <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006384:	f7fd fd02 	bl	8003d8c <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e045      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x444>
 80063a2:	e03d      	b.n	8006420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d107      	bne.n	80063bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e038      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40007000 	.word	0x40007000
 80063b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <HAL_RCC_OscConfig+0x4ec>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d028      	beq.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d121      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d11a      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d111      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	3b01      	subs	r3, #1
 8006406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d107      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800

08006430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0cc      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d90c      	bls.n	800646c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b65      	ldr	r3, [pc, #404]	; (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645a:	4b63      	ldr	r3, [pc, #396]	; (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0b8      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d020      	beq.n	80064ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006484:	4b59      	ldr	r3, [pc, #356]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4a58      	ldr	r2, [pc, #352]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800648e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800649c:	4b53      	ldr	r3, [pc, #332]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a52      	ldr	r2, [pc, #328]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a8:	4b50      	ldr	r3, [pc, #320]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	494d      	ldr	r1, [pc, #308]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d044      	beq.n	8006550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d107      	bne.n	80064de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ce:	4b47      	ldr	r3, [pc, #284]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d119      	bne.n	800650e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e07f      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d003      	beq.n	80064ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ee:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e06f      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064fe:	4b3b      	ldr	r3, [pc, #236]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e067      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800650e:	4b37      	ldr	r3, [pc, #220]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 0203 	bic.w	r2, r3, #3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4934      	ldr	r1, [pc, #208]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006520:	f7fd fc34 	bl	8003d8c <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006526:	e00a      	b.n	800653e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006528:	f7fd fc30 	bl	8003d8c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	; 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e04f      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	4b2b      	ldr	r3, [pc, #172]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 020c 	and.w	r2, r3, #12
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	429a      	cmp	r2, r3
 800654e:	d1eb      	bne.n	8006528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d20c      	bcs.n	8006578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b20      	ldr	r3, [pc, #128]	; (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e032      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006584:	4b19      	ldr	r3, [pc, #100]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4916      	ldr	r1, [pc, #88]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	490e      	ldr	r1, [pc, #56]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065b6:	f000 f821 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 80065ba:	4602      	mov	r2, r0
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	490a      	ldr	r1, [pc, #40]	; (80065f0 <HAL_RCC_ClockConfig+0x1c0>)
 80065c8:	5ccb      	ldrb	r3, [r1, r3]
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <HAL_RCC_ClockConfig+0x1c4>)
 80065d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fc ff94 	bl	8003504 <HAL_InitTick>

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40023c00 	.word	0x40023c00
 80065ec:	40023800 	.word	0x40023800
 80065f0:	0800ce28 	.word	0x0800ce28
 80065f4:	20000018 	.word	0x20000018
 80065f8:	2000001c 	.word	0x2000001c

080065fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b090      	sub	sp, #64	; 0x40
 8006602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660c:	2300      	movs	r3, #0
 800660e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <HAL_RCC_GetSysClockFreq+0x180>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b08      	cmp	r3, #8
 800661e:	d00d      	beq.n	800663c <HAL_RCC_GetSysClockFreq+0x40>
 8006620:	2b08      	cmp	r3, #8
 8006622:	f200 80a1 	bhi.w	8006768 <HAL_RCC_GetSysClockFreq+0x16c>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x34>
 800662a:	2b04      	cmp	r3, #4
 800662c:	d003      	beq.n	8006636 <HAL_RCC_GetSysClockFreq+0x3a>
 800662e:	e09b      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006630:	4b53      	ldr	r3, [pc, #332]	; (8006780 <HAL_RCC_GetSysClockFreq+0x184>)
 8006632:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006634:	e09b      	b.n	800676e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006636:	4b53      	ldr	r3, [pc, #332]	; (8006784 <HAL_RCC_GetSysClockFreq+0x188>)
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800663a:	e098      	b.n	800676e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800663c:	4b4f      	ldr	r3, [pc, #316]	; (800677c <HAL_RCC_GetSysClockFreq+0x180>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006646:	4b4d      	ldr	r3, [pc, #308]	; (800677c <HAL_RCC_GetSysClockFreq+0x180>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d028      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006652:	4b4a      	ldr	r3, [pc, #296]	; (800677c <HAL_RCC_GetSysClockFreq+0x180>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	2200      	movs	r2, #0
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	627a      	str	r2, [r7, #36]	; 0x24
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006664:	2100      	movs	r1, #0
 8006666:	4b47      	ldr	r3, [pc, #284]	; (8006784 <HAL_RCC_GetSysClockFreq+0x188>)
 8006668:	fb03 f201 	mul.w	r2, r3, r1
 800666c:	2300      	movs	r3, #0
 800666e:	fb00 f303 	mul.w	r3, r0, r3
 8006672:	4413      	add	r3, r2
 8006674:	4a43      	ldr	r2, [pc, #268]	; (8006784 <HAL_RCC_GetSysClockFreq+0x188>)
 8006676:	fba0 1202 	umull	r1, r2, r0, r2
 800667a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800667c:	460a      	mov	r2, r1
 800667e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006682:	4413      	add	r3, r2
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	2200      	movs	r2, #0
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	61fa      	str	r2, [r7, #28]
 800668e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006696:	f7fa fab9 	bl	8000c0c <__aeabi_uldivmod>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4613      	mov	r3, r2
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a2:	e053      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a4:	4b35      	ldr	r3, [pc, #212]	; (800677c <HAL_RCC_GetSysClockFreq+0x180>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	099b      	lsrs	r3, r3, #6
 80066aa:	2200      	movs	r2, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	617a      	str	r2, [r7, #20]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066b6:	f04f 0b00 	mov.w	fp, #0
 80066ba:	4652      	mov	r2, sl
 80066bc:	465b      	mov	r3, fp
 80066be:	f04f 0000 	mov.w	r0, #0
 80066c2:	f04f 0100 	mov.w	r1, #0
 80066c6:	0159      	lsls	r1, r3, #5
 80066c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066cc:	0150      	lsls	r0, r2, #5
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	ebb2 080a 	subs.w	r8, r2, sl
 80066d6:	eb63 090b 	sbc.w	r9, r3, fp
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066ee:	ebb2 0408 	subs.w	r4, r2, r8
 80066f2:	eb63 0509 	sbc.w	r5, r3, r9
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	00eb      	lsls	r3, r5, #3
 8006700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006704:	00e2      	lsls	r2, r4, #3
 8006706:	4614      	mov	r4, r2
 8006708:	461d      	mov	r5, r3
 800670a:	eb14 030a 	adds.w	r3, r4, sl
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	eb45 030b 	adc.w	r3, r5, fp
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006722:	4629      	mov	r1, r5
 8006724:	028b      	lsls	r3, r1, #10
 8006726:	4621      	mov	r1, r4
 8006728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800672c:	4621      	mov	r1, r4
 800672e:	028a      	lsls	r2, r1, #10
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	2200      	movs	r2, #0
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	60fa      	str	r2, [r7, #12]
 800673c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006740:	f7fa fa64 	bl	8000c0c <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4613      	mov	r3, r2
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_GetSysClockFreq+0x180>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	0c1b      	lsrs	r3, r3, #16
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	3301      	adds	r3, #1
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800675c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006766:	e002      	b.n	800676e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <HAL_RCC_GetSysClockFreq+0x184>)
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800676c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006770:	4618      	mov	r0, r3
 8006772:	3740      	adds	r7, #64	; 0x40
 8006774:	46bd      	mov	sp, r7
 8006776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800
 8006780:	00f42400 	.word	0x00f42400
 8006784:	017d7840 	.word	0x017d7840

08006788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <HAL_RCC_GetHCLKFreq+0x14>)
 800678e:	681b      	ldr	r3, [r3, #0]
}
 8006790:	4618      	mov	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000018 	.word	0x20000018

080067a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067a4:	f7ff fff0 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067a8:	4602      	mov	r2, r0
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	0a9b      	lsrs	r3, r3, #10
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	4903      	ldr	r1, [pc, #12]	; (80067c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067b6:	5ccb      	ldrb	r3, [r1, r3]
 80067b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067bc:	4618      	mov	r0, r3
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40023800 	.word	0x40023800
 80067c4:	0800ce38 	.word	0x0800ce38

080067c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067cc:	f7ff ffdc 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067d0:	4602      	mov	r2, r0
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	0b5b      	lsrs	r3, r3, #13
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	4903      	ldr	r1, [pc, #12]	; (80067ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80067de:	5ccb      	ldrb	r3, [r1, r3]
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40023800 	.word	0x40023800
 80067ec:	0800ce38 	.word	0x0800ce38

080067f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	220f      	movs	r2, #15
 80067fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006800:	4b12      	ldr	r3, [pc, #72]	; (800684c <HAL_RCC_GetClockConfig+0x5c>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0203 	and.w	r2, r3, #3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800680c:	4b0f      	ldr	r3, [pc, #60]	; (800684c <HAL_RCC_GetClockConfig+0x5c>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <HAL_RCC_GetClockConfig+0x5c>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006824:	4b09      	ldr	r3, [pc, #36]	; (800684c <HAL_RCC_GetClockConfig+0x5c>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	08db      	lsrs	r3, r3, #3
 800682a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006832:	4b07      	ldr	r3, [pc, #28]	; (8006850 <HAL_RCC_GetClockConfig+0x60>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0207 	and.w	r2, r3, #7
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	601a      	str	r2, [r3, #0]
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	40023800 	.word	0x40023800
 8006850:	40023c00 	.word	0x40023c00

08006854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e07b      	b.n	800695e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d108      	bne.n	8006880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006876:	d009      	beq.n	800688c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	61da      	str	r2, [r3, #28]
 800687e:	e005      	b.n	800688c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fc fdb8 	bl	800341c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	ea42 0103 	orr.w	r1, r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	f003 0104 	and.w	r1, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	f003 0210 	and.w	r2, r3, #16
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_SPI_Transmit+0x22>
 8006984:	2302      	movs	r3, #2
 8006986:	e126      	b.n	8006bd6 <HAL_SPI_Transmit+0x270>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006990:	f7fd f9fc 	bl	8003d8c <HAL_GetTick>
 8006994:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069a6:	2302      	movs	r3, #2
 80069a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069aa:	e10b      	b.n	8006bc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Transmit+0x52>
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069bc:	e102      	b.n	8006bc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2203      	movs	r2, #3
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	88fa      	ldrh	r2, [r7, #6]
 80069d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	88fa      	ldrh	r2, [r7, #6]
 80069dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a04:	d10f      	bne.n	8006a26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d007      	beq.n	8006a44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4c:	d14b      	bne.n	8006ae6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_SPI_Transmit+0xf6>
 8006a56:	8afb      	ldrh	r3, [r7, #22]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d13e      	bne.n	8006ada <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	881a      	ldrh	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	1c9a      	adds	r2, r3, #2
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a80:	e02b      	b.n	8006ada <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d112      	bne.n	8006ab6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	881a      	ldrh	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	1c9a      	adds	r2, r3, #2
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ab4:	e011      	b.n	8006ada <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ab6:	f7fd f969 	bl	8003d8c <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d803      	bhi.n	8006ace <HAL_SPI_Transmit+0x168>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006acc:	d102      	bne.n	8006ad4 <HAL_SPI_Transmit+0x16e>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d102      	bne.n	8006ada <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ad8:	e074      	b.n	8006bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ce      	bne.n	8006a82 <HAL_SPI_Transmit+0x11c>
 8006ae4:	e04c      	b.n	8006b80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <HAL_SPI_Transmit+0x18e>
 8006aee:	8afb      	ldrh	r3, [r7, #22]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d140      	bne.n	8006b76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	7812      	ldrb	r2, [r2, #0]
 8006b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b1a:	e02c      	b.n	8006b76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d113      	bne.n	8006b52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b50:	e011      	b.n	8006b76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b52:	f7fd f91b 	bl	8003d8c <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d803      	bhi.n	8006b6a <HAL_SPI_Transmit+0x204>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b68:	d102      	bne.n	8006b70 <HAL_SPI_Transmit+0x20a>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b74:	e026      	b.n	8006bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1cd      	bne.n	8006b1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 fbcb 	bl	8007320 <SPI_EndRxTxTransaction>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e000      	b.n	8006bc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3720      	adds	r7, #32
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b088      	sub	sp, #32
 8006be2:	af02      	add	r7, sp, #8
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bfa:	d112      	bne.n	8006c22 <HAL_SPI_Receive+0x44>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10e      	bne.n	8006c22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2204      	movs	r2, #4
 8006c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	4613      	mov	r3, r2
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f8f1 	bl	8006e00 <HAL_SPI_TransmitReceive>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	e0ea      	b.n	8006df8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_SPI_Receive+0x52>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e0e3      	b.n	8006df8 <HAL_SPI_Receive+0x21a>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c38:	f7fd f8a8 	bl	8003d8c <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d002      	beq.n	8006c50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c4e:	e0ca      	b.n	8006de6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_SPI_Receive+0x7e>
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d102      	bne.n	8006c62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c60:	e0c1      	b.n	8006de6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2204      	movs	r2, #4
 8006c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca8:	d10f      	bne.n	8006cca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b40      	cmp	r3, #64	; 0x40
 8006cd6:	d007      	beq.n	8006ce8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d162      	bne.n	8006db6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cf0:	e02e      	b.n	8006d50 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d115      	bne.n	8006d2c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f103 020c 	add.w	r2, r3, #12
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	3b01      	subs	r3, #1
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d2a:	e011      	b.n	8006d50 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d2c:	f7fd f82e 	bl	8003d8c <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d803      	bhi.n	8006d44 <HAL_SPI_Receive+0x166>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_Receive+0x16c>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d4e:	e04a      	b.n	8006de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1cb      	bne.n	8006cf2 <HAL_SPI_Receive+0x114>
 8006d5a:	e031      	b.n	8006dc0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d113      	bne.n	8006d92 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	b292      	uxth	r2, r2
 8006d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d90:	e011      	b.n	8006db6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d92:	f7fc fffb 	bl	8003d8c <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d803      	bhi.n	8006daa <HAL_SPI_Receive+0x1cc>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da8:	d102      	bne.n	8006db0 <HAL_SPI_Receive+0x1d2>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d102      	bne.n	8006db6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006db4:	e017      	b.n	8006de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1cd      	bne.n	8006d5c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fa45 	bl	8007254 <SPI_EndRxTransaction>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	75fb      	strb	r3, [r7, #23]
 8006de2:	e000      	b.n	8006de6 <HAL_SPI_Receive+0x208>
  }

error :
 8006de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	; 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x26>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e18a      	b.n	800713c <HAL_SPI_TransmitReceive+0x33c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e2e:	f7fc ffad 	bl	8003d8c <HAL_GetTick>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e44:	887b      	ldrh	r3, [r7, #2]
 8006e46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d00f      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x70>
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e56:	d107      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x68>
 8006e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d003      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e6e:	e15b      	b.n	8007128 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_SPI_TransmitReceive+0x82>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_SPI_TransmitReceive+0x82>
 8006e7c:	887b      	ldrh	r3, [r7, #2]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e88:	e14e      	b.n	8007128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d003      	beq.n	8006e9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2205      	movs	r2, #5
 8006e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	887a      	ldrh	r2, [r7, #2]
 8006eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	887a      	ldrh	r2, [r7, #2]
 8006ec0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	887a      	ldrh	r2, [r7, #2]
 8006ec6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d007      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efa:	d178      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <HAL_SPI_TransmitReceive+0x10a>
 8006f04:	8b7b      	ldrh	r3, [r7, #26]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d166      	bne.n	8006fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f2e:	e053      	b.n	8006fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d11b      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x176>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d016      	beq.n	8006f76 <HAL_SPI_TransmitReceive+0x176>
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d113      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d119      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x1b8>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d014      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	b292      	uxth	r2, r2
 8006f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	1c9a      	adds	r2, r3, #2
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fb8:	f7fc fee8 	bl	8003d8c <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d807      	bhi.n	8006fd8 <HAL_SPI_TransmitReceive+0x1d8>
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fce:	d003      	beq.n	8006fd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fd6:	e0a7      	b.n	8007128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1a6      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x130>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1a1      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x130>
 8006fec:	e07c      	b.n	80070e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0x1fc>
 8006ff6:	8b7b      	ldrh	r3, [r7, #26]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d16b      	bne.n	80070d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007022:	e057      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b02      	cmp	r3, #2
 8007030:	d11c      	bne.n	800706c <HAL_SPI_TransmitReceive+0x26c>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <HAL_SPI_TransmitReceive+0x26c>
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d114      	bne.n	800706c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b01      	cmp	r3, #1
 8007078:	d119      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x2ae>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d014      	beq.n	80070ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070aa:	2301      	movs	r3, #1
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070ae:	f7fc fe6d 	bl	8003d8c <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d803      	bhi.n	80070c6 <HAL_SPI_TransmitReceive+0x2c6>
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x2cc>
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070d2:	e029      	b.n	8007128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d8:	b29b      	uxth	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1a2      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x224>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d19d      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f917 	bl	8007320 <SPI_EndRxTxTransaction>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007104:	e010      	b.n	8007128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	e000      	b.n	8007128 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800713c:	4618      	mov	r0, r3
 800713e:	3730      	adds	r7, #48	; 0x30
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4613      	mov	r3, r2
 8007152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007154:	f7fc fe1a 	bl	8003d8c <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	4413      	add	r3, r2
 8007162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007164:	f7fc fe12 	bl	8003d8c <HAL_GetTick>
 8007168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800716a:	4b39      	ldr	r3, [pc, #228]	; (8007250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	015b      	lsls	r3, r3, #5
 8007170:	0d1b      	lsrs	r3, r3, #20
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800717a:	e054      	b.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007182:	d050      	beq.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007184:	f7fc fe02 	bl	8003d8c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	429a      	cmp	r2, r3
 8007192:	d902      	bls.n	800719a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d13d      	bne.n	8007216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071b2:	d111      	bne.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	d004      	beq.n	80071c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c6:	d107      	bne.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071e0:	d10f      	bne.n	8007202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e017      	b.n	8007246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	3b01      	subs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4013      	ands	r3, r2
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	429a      	cmp	r2, r3
 8007234:	bf0c      	ite	eq
 8007236:	2301      	moveq	r3, #1
 8007238:	2300      	movne	r3, #0
 800723a:	b2db      	uxtb	r3, r3
 800723c:	461a      	mov	r2, r3
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	429a      	cmp	r2, r3
 8007242:	d19b      	bne.n	800717c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000018 	.word	0x20000018

08007254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007268:	d111      	bne.n	800728e <SPI_EndRxTransaction+0x3a>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007272:	d004      	beq.n	800727e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727c:	d107      	bne.n	800728e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007296:	d12a      	bne.n	80072ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a0:	d012      	beq.n	80072c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2200      	movs	r2, #0
 80072aa:	2180      	movs	r1, #128	; 0x80
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff ff49 	bl	8007144 <SPI_WaitFlagStateUntilTimeout>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02d      	beq.n	8007314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072bc:	f043 0220 	orr.w	r2, r3, #32
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e026      	b.n	8007316 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2101      	movs	r1, #1
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f7ff ff36 	bl	8007144 <SPI_WaitFlagStateUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01a      	beq.n	8007314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f043 0220 	orr.w	r2, r3, #32
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e013      	b.n	8007316 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2101      	movs	r1, #1
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff ff23 	bl	8007144 <SPI_WaitFlagStateUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007308:	f043 0220 	orr.w	r2, r3, #32
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e000      	b.n	8007316 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <SPI_EndRxTxTransaction+0x7c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <SPI_EndRxTxTransaction+0x80>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	0d5b      	lsrs	r3, r3, #21
 8007338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800733c:	fb02 f303 	mul.w	r3, r2, r3
 8007340:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800734a:	d112      	bne.n	8007372 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2200      	movs	r2, #0
 8007354:	2180      	movs	r1, #128	; 0x80
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7ff fef4 	bl	8007144 <SPI_WaitFlagStateUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e00f      	b.n	8007392 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3b01      	subs	r3, #1
 800737c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b80      	cmp	r3, #128	; 0x80
 800738a:	d0f2      	beq.n	8007372 <SPI_EndRxTxTransaction+0x52>
 800738c:	e000      	b.n	8007390 <SPI_EndRxTxTransaction+0x70>
        break;
 800738e:	bf00      	nop
  }

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000018 	.word	0x20000018
 80073a0:	165e9f81 	.word	0x165e9f81

080073a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e041      	b.n	800743a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d106      	bne.n	80073d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fc fbc6 	bl	8003b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2202      	movs	r2, #2
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f000 fbca 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	d001      	beq.n	800745c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e04e      	b.n	80074fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a23      	ldr	r2, [pc, #140]	; (8007508 <HAL_TIM_Base_Start_IT+0xc4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d022      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007486:	d01d      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1f      	ldr	r2, [pc, #124]	; (800750c <HAL_TIM_Base_Start_IT+0xc8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d018      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <HAL_TIM_Base_Start_IT+0xcc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d013      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <HAL_TIM_Base_Start_IT+0xd0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00e      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1b      	ldr	r2, [pc, #108]	; (8007518 <HAL_TIM_Base_Start_IT+0xd4>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d009      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <HAL_TIM_Base_Start_IT+0xd8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d004      	beq.n	80074c4 <HAL_TIM_Base_Start_IT+0x80>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <HAL_TIM_Base_Start_IT+0xdc>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d111      	bne.n	80074e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 0307 	and.w	r3, r3, #7
 80074ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b06      	cmp	r3, #6
 80074d4:	d010      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0201 	orr.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e6:	e007      	b.n	80074f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0201 	orr.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	40010000 	.word	0x40010000
 800750c:	40000400 	.word	0x40000400
 8007510:	40000800 	.word	0x40000800
 8007514:	40000c00 	.word	0x40000c00
 8007518:	40010400 	.word	0x40010400
 800751c:	40014000 	.word	0x40014000
 8007520:	40001800 	.word	0x40001800

08007524 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e097      	b.n	8007668 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fc fa81 	bl	8003a54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f000 faff 	bl	8007b7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	4313      	orrs	r3, r2
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80075c4:	f023 030c 	bic.w	r3, r3, #12
 80075c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	021b      	lsls	r3, r3, #8
 80075e0:	4313      	orrs	r3, r2
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	011a      	lsls	r2, r3, #4
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	031b      	lsls	r3, r3, #12
 80075f4:	4313      	orrs	r3, r2
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007602:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800760a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	4313      	orrs	r3, r2
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007698:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d110      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d102      	bne.n	80076ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076a6:	7b7b      	ldrb	r3, [r7, #13]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e069      	b.n	8007784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076c0:	e031      	b.n	8007726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d110      	bne.n	80076ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d102      	bne.n	80076d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076ce:	7b3b      	ldrb	r3, [r7, #12]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d001      	beq.n	80076d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e055      	b.n	8007784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076e8:	e01d      	b.n	8007726 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d108      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d105      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f6:	7b7b      	ldrb	r3, [r7, #13]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d102      	bne.n	8007702 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076fc:	7b3b      	ldrb	r3, [r7, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d001      	beq.n	8007706 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e03e      	b.n	8007784 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_TIM_Encoder_Start+0xc4>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d008      	beq.n	8007744 <HAL_TIM_Encoder_Start+0xd4>
 8007732:	e00f      	b.n	8007754 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	2100      	movs	r1, #0
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fb57 	bl	8007df0 <TIM_CCxChannelCmd>
      break;
 8007742:	e016      	b.n	8007772 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2201      	movs	r2, #1
 800774a:	2104      	movs	r1, #4
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fb4f 	bl	8007df0 <TIM_CCxChannelCmd>
      break;
 8007752:	e00e      	b.n	8007772 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2201      	movs	r2, #1
 800775a:	2100      	movs	r1, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fb47 	bl	8007df0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	2104      	movs	r1, #4
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fb40 	bl	8007df0 <TIM_CCxChannelCmd>
      break;
 8007770:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d122      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d11b      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f06f 0202 	mvn.w	r2, #2
 80077b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	f003 0303 	and.w	r3, r3, #3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9b5 	bl	8007b3e <HAL_TIM_IC_CaptureCallback>
 80077d4:	e005      	b.n	80077e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9a7 	bl	8007b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9b8 	bl	8007b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d122      	bne.n	800783c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b04      	cmp	r3, #4
 8007802:	d11b      	bne.n	800783c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0204 	mvn.w	r2, #4
 800780c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f98b 	bl	8007b3e <HAL_TIM_IC_CaptureCallback>
 8007828:	e005      	b.n	8007836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f97d 	bl	8007b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f98e 	bl	8007b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0308 	and.w	r3, r3, #8
 8007846:	2b08      	cmp	r3, #8
 8007848:	d122      	bne.n	8007890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b08      	cmp	r3, #8
 8007856:	d11b      	bne.n	8007890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0208 	mvn.w	r2, #8
 8007860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2204      	movs	r2, #4
 8007866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f961 	bl	8007b3e <HAL_TIM_IC_CaptureCallback>
 800787c:	e005      	b.n	800788a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f953 	bl	8007b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f964 	bl	8007b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b10      	cmp	r3, #16
 800789c:	d122      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d11b      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0210 	mvn.w	r2, #16
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2208      	movs	r2, #8
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f937 	bl	8007b3e <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f929 	bl	8007b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f93a 	bl	8007b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0201 	mvn.w	r2, #1
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fa ffc0 	bl	8002890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	d10e      	bne.n	800793c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d107      	bne.n	800793c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fb06 	bl	8007f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d10e      	bne.n	8007968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	d107      	bne.n	8007968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8ff 	bl	8007b66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b20      	cmp	r3, #32
 8007974:	d10e      	bne.n	8007994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b20      	cmp	r3, #32
 8007982:	d107      	bne.n	8007994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0220 	mvn.w	r2, #32
 800798c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fad0 	bl	8007f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_TIM_ConfigClockSource+0x1c>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e0b4      	b.n	8007b22 <HAL_TIM_ConfigClockSource+0x186>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f0:	d03e      	beq.n	8007a70 <HAL_TIM_ConfigClockSource+0xd4>
 80079f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f6:	f200 8087 	bhi.w	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 80079fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fe:	f000 8086 	beq.w	8007b0e <HAL_TIM_ConfigClockSource+0x172>
 8007a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a06:	d87f      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a08:	2b70      	cmp	r3, #112	; 0x70
 8007a0a:	d01a      	beq.n	8007a42 <HAL_TIM_ConfigClockSource+0xa6>
 8007a0c:	2b70      	cmp	r3, #112	; 0x70
 8007a0e:	d87b      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a10:	2b60      	cmp	r3, #96	; 0x60
 8007a12:	d050      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8007a14:	2b60      	cmp	r3, #96	; 0x60
 8007a16:	d877      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a18:	2b50      	cmp	r3, #80	; 0x50
 8007a1a:	d03c      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0xfa>
 8007a1c:	2b50      	cmp	r3, #80	; 0x50
 8007a1e:	d873      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d058      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d86f      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a28:	2b30      	cmp	r3, #48	; 0x30
 8007a2a:	d064      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a2c:	2b30      	cmp	r3, #48	; 0x30
 8007a2e:	d86b      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d060      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d867      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05c      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a3c:	2b10      	cmp	r3, #16
 8007a3e:	d05a      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x15a>
 8007a40:	e062      	b.n	8007b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6899      	ldr	r1, [r3, #8]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f000 f9ad 	bl	8007db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	609a      	str	r2, [r3, #8]
      break;
 8007a6e:	e04f      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	6899      	ldr	r1, [r3, #8]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f000 f996 	bl	8007db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a92:	609a      	str	r2, [r3, #8]
      break;
 8007a94:	e03c      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6859      	ldr	r1, [r3, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f000 f90a 	bl	8007cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2150      	movs	r1, #80	; 0x50
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f963 	bl	8007d7a <TIM_ITRx_SetConfig>
      break;
 8007ab4:	e02c      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6859      	ldr	r1, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f000 f929 	bl	8007d1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2160      	movs	r1, #96	; 0x60
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 f953 	bl	8007d7a <TIM_ITRx_SetConfig>
      break;
 8007ad4:	e01c      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6859      	ldr	r1, [r3, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f000 f8ea 	bl	8007cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f943 	bl	8007d7a <TIM_ITRx_SetConfig>
      break;
 8007af4:	e00c      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	4610      	mov	r0, r2
 8007b02:	f000 f93a 	bl	8007d7a <TIM_ITRx_SetConfig>
      break;
 8007b06:	e003      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0c:	e000      	b.n	8007b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a40      	ldr	r2, [pc, #256]	; (8007c90 <TIM_Base_SetConfig+0x114>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d013      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9a:	d00f      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a3d      	ldr	r2, [pc, #244]	; (8007c94 <TIM_Base_SetConfig+0x118>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a3c      	ldr	r2, [pc, #240]	; (8007c98 <TIM_Base_SetConfig+0x11c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3b      	ldr	r2, [pc, #236]	; (8007c9c <TIM_Base_SetConfig+0x120>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3a      	ldr	r2, [pc, #232]	; (8007ca0 <TIM_Base_SetConfig+0x124>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2f      	ldr	r2, [pc, #188]	; (8007c90 <TIM_Base_SetConfig+0x114>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d02b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bdc:	d027      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2c      	ldr	r2, [pc, #176]	; (8007c94 <TIM_Base_SetConfig+0x118>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d023      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a2b      	ldr	r2, [pc, #172]	; (8007c98 <TIM_Base_SetConfig+0x11c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01f      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2a      	ldr	r2, [pc, #168]	; (8007c9c <TIM_Base_SetConfig+0x120>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a29      	ldr	r2, [pc, #164]	; (8007ca0 <TIM_Base_SetConfig+0x124>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d017      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a28      	ldr	r2, [pc, #160]	; (8007ca4 <TIM_Base_SetConfig+0x128>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a27      	ldr	r2, [pc, #156]	; (8007ca8 <TIM_Base_SetConfig+0x12c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a26      	ldr	r2, [pc, #152]	; (8007cac <TIM_Base_SetConfig+0x130>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a25      	ldr	r2, [pc, #148]	; (8007cb0 <TIM_Base_SetConfig+0x134>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a24      	ldr	r2, [pc, #144]	; (8007cb4 <TIM_Base_SetConfig+0x138>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a23      	ldr	r2, [pc, #140]	; (8007cb8 <TIM_Base_SetConfig+0x13c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <TIM_Base_SetConfig+0x114>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_Base_SetConfig+0xf8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ca0 <TIM_Base_SetConfig+0x124>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	615a      	str	r2, [r3, #20]
}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800
 8007c9c:	40000c00 	.word	0x40000c00
 8007ca0:	40010400 	.word	0x40010400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800
 8007cb0:	40001800 	.word	0x40001800
 8007cb4:	40001c00 	.word	0x40001c00
 8007cb8:	40002000 	.word	0x40002000

08007cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f023 0201 	bic.w	r2, r3, #1
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f023 030a 	bic.w	r3, r3, #10
 8007cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b087      	sub	sp, #28
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f023 0210 	bic.w	r2, r3, #16
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	031b      	lsls	r3, r3, #12
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	621a      	str	r2, [r3, #32]
}
 8007d6e:	bf00      	nop
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f043 0307 	orr.w	r3, r3, #7
 8007d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	609a      	str	r2, [r3, #8]
}
 8007da4:	bf00      	nop
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	021a      	lsls	r2, r3, #8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	609a      	str	r2, [r3, #8]
}
 8007de4:	bf00      	nop
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	2201      	movs	r2, #1
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1a      	ldr	r2, [r3, #32]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	401a      	ands	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	fa01 f303 	lsl.w	r3, r1, r3
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	621a      	str	r2, [r3, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
	...

08007e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e05a      	b.n	8007f0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea0:	d01d      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1d      	ldr	r2, [pc, #116]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1a      	ldr	r2, [pc, #104]	; (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a18      	ldr	r2, [pc, #96]	; (8007f28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a17      	ldr	r2, [pc, #92]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d10c      	bne.n	8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	40010400 	.word	0x40010400
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	40001800 	.word	0x40001800

08007f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e03f      	b.n	8007fee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fb fe5a 	bl	8003c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2224      	movs	r2, #36	; 0x24
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f829 	bl	8007ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ffc:	b0c0      	sub	sp, #256	; 0x100
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008014:	68d9      	ldr	r1, [r3, #12]
 8008016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	ea40 0301 	orr.w	r3, r0, r1
 8008020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	431a      	orrs	r2, r3
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	431a      	orrs	r2, r3
 8008038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008050:	f021 010c 	bic.w	r1, r1, #12
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800805e:	430b      	orrs	r3, r1
 8008060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800806e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008072:	6999      	ldr	r1, [r3, #24]
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	ea40 0301 	orr.w	r3, r0, r1
 800807e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b8f      	ldr	r3, [pc, #572]	; (80082c4 <UART_SetConfig+0x2cc>)
 8008088:	429a      	cmp	r2, r3
 800808a:	d005      	beq.n	8008098 <UART_SetConfig+0xa0>
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	4b8d      	ldr	r3, [pc, #564]	; (80082c8 <UART_SetConfig+0x2d0>)
 8008094:	429a      	cmp	r2, r3
 8008096:	d104      	bne.n	80080a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008098:	f7fe fb96 	bl	80067c8 <HAL_RCC_GetPCLK2Freq>
 800809c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080a0:	e003      	b.n	80080aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080a2:	f7fe fb7d 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 80080a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b4:	f040 810c 	bne.w	80082d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080ca:	4622      	mov	r2, r4
 80080cc:	462b      	mov	r3, r5
 80080ce:	1891      	adds	r1, r2, r2
 80080d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80080d2:	415b      	adcs	r3, r3
 80080d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080da:	4621      	mov	r1, r4
 80080dc:	eb12 0801 	adds.w	r8, r2, r1
 80080e0:	4629      	mov	r1, r5
 80080e2:	eb43 0901 	adc.w	r9, r3, r1
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080fa:	4690      	mov	r8, r2
 80080fc:	4699      	mov	r9, r3
 80080fe:	4623      	mov	r3, r4
 8008100:	eb18 0303 	adds.w	r3, r8, r3
 8008104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008108:	462b      	mov	r3, r5
 800810a:	eb49 0303 	adc.w	r3, r9, r3
 800810e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800811e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008126:	460b      	mov	r3, r1
 8008128:	18db      	adds	r3, r3, r3
 800812a:	653b      	str	r3, [r7, #80]	; 0x50
 800812c:	4613      	mov	r3, r2
 800812e:	eb42 0303 	adc.w	r3, r2, r3
 8008132:	657b      	str	r3, [r7, #84]	; 0x54
 8008134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800813c:	f7f8 fd66 	bl	8000c0c <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4b61      	ldr	r3, [pc, #388]	; (80082cc <UART_SetConfig+0x2d4>)
 8008146:	fba3 2302 	umull	r2, r3, r3, r2
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	011c      	lsls	r4, r3, #4
 800814e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008152:	2200      	movs	r2, #0
 8008154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008158:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800815c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008160:	4642      	mov	r2, r8
 8008162:	464b      	mov	r3, r9
 8008164:	1891      	adds	r1, r2, r2
 8008166:	64b9      	str	r1, [r7, #72]	; 0x48
 8008168:	415b      	adcs	r3, r3
 800816a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800816c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008170:	4641      	mov	r1, r8
 8008172:	eb12 0a01 	adds.w	sl, r2, r1
 8008176:	4649      	mov	r1, r9
 8008178:	eb43 0b01 	adc.w	fp, r3, r1
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	f04f 0300 	mov.w	r3, #0
 8008184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800818c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008190:	4692      	mov	sl, r2
 8008192:	469b      	mov	fp, r3
 8008194:	4643      	mov	r3, r8
 8008196:	eb1a 0303 	adds.w	r3, sl, r3
 800819a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800819e:	464b      	mov	r3, r9
 80081a0:	eb4b 0303 	adc.w	r3, fp, r3
 80081a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081bc:	460b      	mov	r3, r1
 80081be:	18db      	adds	r3, r3, r3
 80081c0:	643b      	str	r3, [r7, #64]	; 0x40
 80081c2:	4613      	mov	r3, r2
 80081c4:	eb42 0303 	adc.w	r3, r2, r3
 80081c8:	647b      	str	r3, [r7, #68]	; 0x44
 80081ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081d2:	f7f8 fd1b 	bl	8000c0c <__aeabi_uldivmod>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	4b3b      	ldr	r3, [pc, #236]	; (80082cc <UART_SetConfig+0x2d4>)
 80081de:	fba3 2301 	umull	r2, r3, r3, r1
 80081e2:	095b      	lsrs	r3, r3, #5
 80081e4:	2264      	movs	r2, #100	; 0x64
 80081e6:	fb02 f303 	mul.w	r3, r2, r3
 80081ea:	1acb      	subs	r3, r1, r3
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081f2:	4b36      	ldr	r3, [pc, #216]	; (80082cc <UART_SetConfig+0x2d4>)
 80081f4:	fba3 2302 	umull	r2, r3, r3, r2
 80081f8:	095b      	lsrs	r3, r3, #5
 80081fa:	005b      	lsls	r3, r3, #1
 80081fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008200:	441c      	add	r4, r3
 8008202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008206:	2200      	movs	r2, #0
 8008208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800820c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	1891      	adds	r1, r2, r2
 800821a:	63b9      	str	r1, [r7, #56]	; 0x38
 800821c:	415b      	adcs	r3, r3
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008224:	4641      	mov	r1, r8
 8008226:	1851      	adds	r1, r2, r1
 8008228:	6339      	str	r1, [r7, #48]	; 0x30
 800822a:	4649      	mov	r1, r9
 800822c:	414b      	adcs	r3, r1
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800823c:	4659      	mov	r1, fp
 800823e:	00cb      	lsls	r3, r1, #3
 8008240:	4651      	mov	r1, sl
 8008242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008246:	4651      	mov	r1, sl
 8008248:	00ca      	lsls	r2, r1, #3
 800824a:	4610      	mov	r0, r2
 800824c:	4619      	mov	r1, r3
 800824e:	4603      	mov	r3, r0
 8008250:	4642      	mov	r2, r8
 8008252:	189b      	adds	r3, r3, r2
 8008254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008258:	464b      	mov	r3, r9
 800825a:	460a      	mov	r2, r1
 800825c:	eb42 0303 	adc.w	r3, r2, r3
 8008260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008270:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008278:	460b      	mov	r3, r1
 800827a:	18db      	adds	r3, r3, r3
 800827c:	62bb      	str	r3, [r7, #40]	; 0x28
 800827e:	4613      	mov	r3, r2
 8008280:	eb42 0303 	adc.w	r3, r2, r3
 8008284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800828a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800828e:	f7f8 fcbd 	bl	8000c0c <__aeabi_uldivmod>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <UART_SetConfig+0x2d4>)
 8008298:	fba3 1302 	umull	r1, r3, r3, r2
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	2164      	movs	r1, #100	; 0x64
 80082a0:	fb01 f303 	mul.w	r3, r1, r3
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	3332      	adds	r3, #50	; 0x32
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <UART_SetConfig+0x2d4>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	f003 0207 	and.w	r2, r3, #7
 80082b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4422      	add	r2, r4
 80082be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082c0:	e105      	b.n	80084ce <UART_SetConfig+0x4d6>
 80082c2:	bf00      	nop
 80082c4:	40011000 	.word	0x40011000
 80082c8:	40011400 	.word	0x40011400
 80082cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082e2:	4642      	mov	r2, r8
 80082e4:	464b      	mov	r3, r9
 80082e6:	1891      	adds	r1, r2, r2
 80082e8:	6239      	str	r1, [r7, #32]
 80082ea:	415b      	adcs	r3, r3
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
 80082ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082f2:	4641      	mov	r1, r8
 80082f4:	1854      	adds	r4, r2, r1
 80082f6:	4649      	mov	r1, r9
 80082f8:	eb43 0501 	adc.w	r5, r3, r1
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	00eb      	lsls	r3, r5, #3
 8008306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800830a:	00e2      	lsls	r2, r4, #3
 800830c:	4614      	mov	r4, r2
 800830e:	461d      	mov	r5, r3
 8008310:	4643      	mov	r3, r8
 8008312:	18e3      	adds	r3, r4, r3
 8008314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008318:	464b      	mov	r3, r9
 800831a:	eb45 0303 	adc.w	r3, r5, r3
 800831e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800832e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008332:	f04f 0200 	mov.w	r2, #0
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800833e:	4629      	mov	r1, r5
 8008340:	008b      	lsls	r3, r1, #2
 8008342:	4621      	mov	r1, r4
 8008344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008348:	4621      	mov	r1, r4
 800834a:	008a      	lsls	r2, r1, #2
 800834c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008350:	f7f8 fc5c 	bl	8000c0c <__aeabi_uldivmod>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4b60      	ldr	r3, [pc, #384]	; (80084dc <UART_SetConfig+0x4e4>)
 800835a:	fba3 2302 	umull	r2, r3, r3, r2
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	011c      	lsls	r4, r3, #4
 8008362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008366:	2200      	movs	r2, #0
 8008368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800836c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	1891      	adds	r1, r2, r2
 800837a:	61b9      	str	r1, [r7, #24]
 800837c:	415b      	adcs	r3, r3
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008384:	4641      	mov	r1, r8
 8008386:	1851      	adds	r1, r2, r1
 8008388:	6139      	str	r1, [r7, #16]
 800838a:	4649      	mov	r1, r9
 800838c:	414b      	adcs	r3, r1
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	f04f 0300 	mov.w	r3, #0
 8008398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800839c:	4659      	mov	r1, fp
 800839e:	00cb      	lsls	r3, r1, #3
 80083a0:	4651      	mov	r1, sl
 80083a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083a6:	4651      	mov	r1, sl
 80083a8:	00ca      	lsls	r2, r1, #3
 80083aa:	4610      	mov	r0, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	4603      	mov	r3, r0
 80083b0:	4642      	mov	r2, r8
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083b8:	464b      	mov	r3, r9
 80083ba:	460a      	mov	r2, r1
 80083bc:	eb42 0303 	adc.w	r3, r2, r3
 80083c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80083ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083dc:	4649      	mov	r1, r9
 80083de:	008b      	lsls	r3, r1, #2
 80083e0:	4641      	mov	r1, r8
 80083e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083e6:	4641      	mov	r1, r8
 80083e8:	008a      	lsls	r2, r1, #2
 80083ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083ee:	f7f8 fc0d 	bl	8000c0c <__aeabi_uldivmod>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4b39      	ldr	r3, [pc, #228]	; (80084dc <UART_SetConfig+0x4e4>)
 80083f8:	fba3 1302 	umull	r1, r3, r3, r2
 80083fc:	095b      	lsrs	r3, r3, #5
 80083fe:	2164      	movs	r1, #100	; 0x64
 8008400:	fb01 f303 	mul.w	r3, r1, r3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	3332      	adds	r3, #50	; 0x32
 800840a:	4a34      	ldr	r2, [pc, #208]	; (80084dc <UART_SetConfig+0x4e4>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008416:	441c      	add	r4, r3
 8008418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800841c:	2200      	movs	r2, #0
 800841e:	673b      	str	r3, [r7, #112]	; 0x70
 8008420:	677a      	str	r2, [r7, #116]	; 0x74
 8008422:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008426:	4642      	mov	r2, r8
 8008428:	464b      	mov	r3, r9
 800842a:	1891      	adds	r1, r2, r2
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	415b      	adcs	r3, r3
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008436:	4641      	mov	r1, r8
 8008438:	1851      	adds	r1, r2, r1
 800843a:	6039      	str	r1, [r7, #0]
 800843c:	4649      	mov	r1, r9
 800843e:	414b      	adcs	r3, r1
 8008440:	607b      	str	r3, [r7, #4]
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800844e:	4659      	mov	r1, fp
 8008450:	00cb      	lsls	r3, r1, #3
 8008452:	4651      	mov	r1, sl
 8008454:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008458:	4651      	mov	r1, sl
 800845a:	00ca      	lsls	r2, r1, #3
 800845c:	4610      	mov	r0, r2
 800845e:	4619      	mov	r1, r3
 8008460:	4603      	mov	r3, r0
 8008462:	4642      	mov	r2, r8
 8008464:	189b      	adds	r3, r3, r2
 8008466:	66bb      	str	r3, [r7, #104]	; 0x68
 8008468:	464b      	mov	r3, r9
 800846a:	460a      	mov	r2, r1
 800846c:	eb42 0303 	adc.w	r3, r2, r3
 8008470:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	663b      	str	r3, [r7, #96]	; 0x60
 800847c:	667a      	str	r2, [r7, #100]	; 0x64
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	f04f 0300 	mov.w	r3, #0
 8008486:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800848a:	4649      	mov	r1, r9
 800848c:	008b      	lsls	r3, r1, #2
 800848e:	4641      	mov	r1, r8
 8008490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008494:	4641      	mov	r1, r8
 8008496:	008a      	lsls	r2, r1, #2
 8008498:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800849c:	f7f8 fbb6 	bl	8000c0c <__aeabi_uldivmod>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <UART_SetConfig+0x4e4>)
 80084a6:	fba3 1302 	umull	r1, r3, r3, r2
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	2164      	movs	r1, #100	; 0x64
 80084ae:	fb01 f303 	mul.w	r3, r1, r3
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	3332      	adds	r3, #50	; 0x32
 80084b8:	4a08      	ldr	r2, [pc, #32]	; (80084dc <UART_SetConfig+0x4e4>)
 80084ba:	fba2 2303 	umull	r2, r3, r2, r3
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	f003 020f 	and.w	r2, r3, #15
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4422      	add	r2, r4
 80084cc:	609a      	str	r2, [r3, #8]
}
 80084ce:	bf00      	nop
 80084d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084d4:	46bd      	mov	sp, r7
 80084d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084da:	bf00      	nop
 80084dc:	51eb851f 	.word	0x51eb851f

080084e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80084ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084f2:	2b84      	cmp	r3, #132	; 0x84
 80084f4:	d005      	beq.n	8008502 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80084f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	3303      	adds	r3, #3
 8008500:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008502:	68fb      	ldr	r3, [r7, #12]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008514:	f000 fade 	bl	8008ad4 <vTaskStartScheduler>
  
  return osOK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	bd80      	pop	{r7, pc}

0800851e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800851e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008520:	b089      	sub	sp, #36	; 0x24
 8008522:	af04      	add	r7, sp, #16
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d020      	beq.n	8008572 <osThreadCreate+0x54>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01c      	beq.n	8008572 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	685c      	ldr	r4, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681d      	ldr	r5, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691e      	ldr	r6, [r3, #16]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff ffc8 	bl	80084e0 <makeFreeRtosPriority>
 8008550:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800855a:	9202      	str	r2, [sp, #8]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	9100      	str	r1, [sp, #0]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	4632      	mov	r2, r6
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f8ed 	bl	8008746 <xTaskCreateStatic>
 800856c:	4603      	mov	r3, r0
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e01c      	b.n	80085ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685c      	ldr	r4, [r3, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800857e:	b29e      	uxth	r6, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008586:	4618      	mov	r0, r3
 8008588:	f7ff ffaa 	bl	80084e0 <makeFreeRtosPriority>
 800858c:	4602      	mov	r2, r0
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	9200      	str	r2, [sp, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	4632      	mov	r2, r6
 800859a:	4629      	mov	r1, r5
 800859c:	4620      	mov	r0, r4
 800859e:	f000 f92f 	bl	8008800 <xTaskCreate>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d001      	beq.n	80085ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80085ac:	68fb      	ldr	r3, [r7, #12]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <osDelay+0x16>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	e000      	b.n	80085ce <osDelay+0x18>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fa4c 	bl	8008a6c <vTaskDelay>
  
  return osOK;
 80085d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f103 0208 	add.w	r2, r3, #8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f103 0208 	add.w	r2, r3, #8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f103 0208 	add.w	r2, r3, #8
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800861e:	b480      	push	{r7}
 8008620:	b083      	sub	sp, #12
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008696:	d103      	bne.n	80086a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	e00c      	b.n	80086ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3308      	adds	r3, #8
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	e002      	b.n	80086ae <vListInsert+0x2e>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d2f6      	bcs.n	80086a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6892      	ldr	r2, [r2, #8]
 8008708:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6852      	ldr	r2, [r2, #4]
 8008712:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d103      	bne.n	8008726 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	1e5a      	subs	r2, r3, #1
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008746:	b580      	push	{r7, lr}
 8008748:	b08e      	sub	sp, #56	; 0x38
 800874a:	af04      	add	r7, sp, #16
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
 8008752:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <xTaskCreateStatic+0x46>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	61fb      	str	r3, [r7, #28]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800878c:	2354      	movs	r3, #84	; 0x54
 800878e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b54      	cmp	r3, #84	; 0x54
 8008794:	d00a      	beq.n	80087ac <xTaskCreateStatic+0x66>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	61bb      	str	r3, [r7, #24]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01e      	beq.n	80087f2 <xTaskCreateStatic+0xac>
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01b      	beq.n	80087f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087cc:	2300      	movs	r3, #0
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	f107 0314 	add.w	r3, r7, #20
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f850 	bl	800888a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ec:	f000 f8d4 	bl	8008998 <prvAddNewTaskToReadyList>
 80087f0:	e001      	b.n	80087f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087f6:	697b      	ldr	r3, [r7, #20]
	}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3728      	adds	r7, #40	; 0x28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af04      	add	r7, sp, #16
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008810:	88fb      	ldrh	r3, [r7, #6]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fec7 	bl	80095a8 <pvPortMalloc>
 800881a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00e      	beq.n	8008840 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008822:	2054      	movs	r0, #84	; 0x54
 8008824:	f000 fec0 	bl	80095a8 <pvPortMalloc>
 8008828:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	631a      	str	r2, [r3, #48]	; 0x30
 8008836:	e005      	b.n	8008844 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008838:	6978      	ldr	r0, [r7, #20]
 800883a:	f000 ff81 	bl	8009740 <vPortFree>
 800883e:	e001      	b.n	8008844 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008840:	2300      	movs	r3, #0
 8008842:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d017      	beq.n	800887a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	2300      	movs	r3, #0
 8008856:	9303      	str	r3, [sp, #12]
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	9302      	str	r3, [sp, #8]
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f80e 	bl	800888a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800886e:	69f8      	ldr	r0, [r7, #28]
 8008870:	f000 f892 	bl	8008998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008874:	2301      	movs	r3, #1
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e002      	b.n	8008880 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800887a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800887e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008880:	69bb      	ldr	r3, [r7, #24]
	}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
 8008896:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088a2:	3b01      	subs	r3, #1
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	f023 0307 	bic.w	r3, r3, #7
 80088b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	617b      	str	r3, [r7, #20]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d01f      	beq.n	8008918 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	e012      	b.n	8008904 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	4413      	add	r3, r2
 80088e4:	7819      	ldrb	r1, [r3, #0]
 80088e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	4413      	add	r3, r2
 80088ec:	3334      	adds	r3, #52	; 0x34
 80088ee:	460a      	mov	r2, r1
 80088f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d006      	beq.n	800890c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	3301      	adds	r3, #1
 8008902:	61fb      	str	r3, [r7, #28]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d9e9      	bls.n	80088de <prvInitialiseNewTask+0x54>
 800890a:	e000      	b.n	800890e <prvInitialiseNewTask+0x84>
			{
				break;
 800890c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008916:	e003      	b.n	8008920 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b06      	cmp	r3, #6
 8008924:	d901      	bls.n	800892a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008926:	2306      	movs	r3, #6
 8008928:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800892e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008934:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2200      	movs	r2, #0
 800893a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	3304      	adds	r3, #4
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff fe6c 	bl	800861e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	3318      	adds	r3, #24
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fe67 	bl	800861e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008954:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	f1c3 0207 	rsb	r2, r3, #7
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008964:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2200      	movs	r2, #0
 800896a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	69b8      	ldr	r0, [r7, #24]
 800897a:	f000 fc05 	bl	8009188 <pxPortInitialiseStack>
 800897e:	4602      	mov	r2, r0
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800898e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008990:	bf00      	nop
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089a0:	f000 fd20 	bl	80093e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089a4:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <prvAddNewTaskToReadyList+0xb8>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3301      	adds	r3, #1
 80089aa:	4a29      	ldr	r2, [pc, #164]	; (8008a50 <prvAddNewTaskToReadyList+0xb8>)
 80089ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089ae:	4b29      	ldr	r3, [pc, #164]	; (8008a54 <prvAddNewTaskToReadyList+0xbc>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089b6:	4a27      	ldr	r2, [pc, #156]	; (8008a54 <prvAddNewTaskToReadyList+0xbc>)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089bc:	4b24      	ldr	r3, [pc, #144]	; (8008a50 <prvAddNewTaskToReadyList+0xb8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d110      	bne.n	80089e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089c4:	f000 fabc 	bl	8008f40 <prvInitialiseTaskLists>
 80089c8:	e00d      	b.n	80089e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <prvAddNewTaskToReadyList+0xc0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089d2:	4b20      	ldr	r3, [pc, #128]	; (8008a54 <prvAddNewTaskToReadyList+0xbc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	429a      	cmp	r2, r3
 80089de:	d802      	bhi.n	80089e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089e0:	4a1c      	ldr	r2, [pc, #112]	; (8008a54 <prvAddNewTaskToReadyList+0xbc>)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089e6:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <prvAddNewTaskToReadyList+0xc4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <prvAddNewTaskToReadyList+0xc4>)
 80089ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	2201      	movs	r2, #1
 80089f6:	409a      	lsls	r2, r3
 80089f8:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <prvAddNewTaskToReadyList+0xc8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	4a18      	ldr	r2, [pc, #96]	; (8008a60 <prvAddNewTaskToReadyList+0xc8>)
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4a15      	ldr	r2, [pc, #84]	; (8008a64 <prvAddNewTaskToReadyList+0xcc>)
 8008a10:	441a      	add	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4619      	mov	r1, r3
 8008a18:	4610      	mov	r0, r2
 8008a1a:	f7ff fe0d 	bl	8008638 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a1e:	f000 fd11 	bl	8009444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <prvAddNewTaskToReadyList+0xc0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00e      	beq.n	8008a48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a2a:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <prvAddNewTaskToReadyList+0xbc>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d207      	bcs.n	8008a48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a38:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <prvAddNewTaskToReadyList+0xd0>)
 8008a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000954 	.word	0x20000954
 8008a54:	20000854 	.word	0x20000854
 8008a58:	20000960 	.word	0x20000960
 8008a5c:	20000970 	.word	0x20000970
 8008a60:	2000095c 	.word	0x2000095c
 8008a64:	20000858 	.word	0x20000858
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d017      	beq.n	8008aae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <vTaskDelay+0x60>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <vTaskDelay+0x30>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	f383 8811 	msr	BASEPRI, r3
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f3bf 8f4f 	dsb	sy
 8008a96:	60bb      	str	r3, [r7, #8]
}
 8008a98:	bf00      	nop
 8008a9a:	e7fe      	b.n	8008a9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a9c:	f000 f87a 	bl	8008b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fb0a 	bl	80090bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008aa8:	f000 f882 	bl	8008bb0 <xTaskResumeAll>
 8008aac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d107      	bne.n	8008ac4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <vTaskDelay+0x64>)
 8008ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	2000097c 	.word	0x2000097c
 8008ad0:	e000ed04 	.word	0xe000ed04

08008ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08a      	sub	sp, #40	; 0x28
 8008ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	1d39      	adds	r1, r7, #4
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f9 f822 	bl	8001b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	9202      	str	r2, [sp, #8]
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	2300      	movs	r3, #0
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	2300      	movs	r3, #0
 8008b00:	460a      	mov	r2, r1
 8008b02:	491e      	ldr	r1, [pc, #120]	; (8008b7c <vTaskStartScheduler+0xa8>)
 8008b04:	481e      	ldr	r0, [pc, #120]	; (8008b80 <vTaskStartScheduler+0xac>)
 8008b06:	f7ff fe1e 	bl	8008746 <xTaskCreateStatic>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	; (8008b84 <vTaskStartScheduler+0xb0>)
 8008b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b10:	4b1c      	ldr	r3, [pc, #112]	; (8008b84 <vTaskStartScheduler+0xb0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	e001      	b.n	8008b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d116      	bne.n	8008b56 <vTaskStartScheduler+0x82>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	613b      	str	r3, [r7, #16]
}
 8008b3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b3c:	4b12      	ldr	r3, [pc, #72]	; (8008b88 <vTaskStartScheduler+0xb4>)
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <vTaskStartScheduler+0xb8>)
 8008b46:	2201      	movs	r2, #1
 8008b48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b4a:	4b11      	ldr	r3, [pc, #68]	; (8008b90 <vTaskStartScheduler+0xbc>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b50:	f000 fba6 	bl	80092a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b54:	e00e      	b.n	8008b74 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b5c:	d10a      	bne.n	8008b74 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	60fb      	str	r3, [r7, #12]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <vTaskStartScheduler+0x9e>
}
 8008b74:	bf00      	nop
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	0800ce10 	.word	0x0800ce10
 8008b80:	08008f11 	.word	0x08008f11
 8008b84:	20000978 	.word	0x20000978
 8008b88:	20000974 	.word	0x20000974
 8008b8c:	20000960 	.word	0x20000960
 8008b90:	20000958 	.word	0x20000958

08008b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b98:	4b04      	ldr	r3, [pc, #16]	; (8008bac <vTaskSuspendAll+0x18>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	4a03      	ldr	r2, [pc, #12]	; (8008bac <vTaskSuspendAll+0x18>)
 8008ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ba2:	bf00      	nop
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	2000097c 	.word	0x2000097c

08008bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bbe:	4b41      	ldr	r3, [pc, #260]	; (8008cc4 <xTaskResumeAll+0x114>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <xTaskResumeAll+0x2c>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	603b      	str	r3, [r7, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bdc:	f000 fc02 	bl	80093e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008be0:	4b38      	ldr	r3, [pc, #224]	; (8008cc4 <xTaskResumeAll+0x114>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	4a37      	ldr	r2, [pc, #220]	; (8008cc4 <xTaskResumeAll+0x114>)
 8008be8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bea:	4b36      	ldr	r3, [pc, #216]	; (8008cc4 <xTaskResumeAll+0x114>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d161      	bne.n	8008cb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bf2:	4b35      	ldr	r3, [pc, #212]	; (8008cc8 <xTaskResumeAll+0x118>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d05d      	beq.n	8008cb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bfa:	e02e      	b.n	8008c5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfc:	4b33      	ldr	r3, [pc, #204]	; (8008ccc <xTaskResumeAll+0x11c>)
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3318      	adds	r3, #24
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fd72 	bl	80086f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3304      	adds	r3, #4
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff fd6d 	bl	80086f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	409a      	lsls	r2, r3
 8008c20:	4b2b      	ldr	r3, [pc, #172]	; (8008cd0 <xTaskResumeAll+0x120>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	4a2a      	ldr	r2, [pc, #168]	; (8008cd0 <xTaskResumeAll+0x120>)
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4a27      	ldr	r2, [pc, #156]	; (8008cd4 <xTaskResumeAll+0x124>)
 8008c38:	441a      	add	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f7ff fcf9 	bl	8008638 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4a:	4b23      	ldr	r3, [pc, #140]	; (8008cd8 <xTaskResumeAll+0x128>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d302      	bcc.n	8008c5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008c54:	4b21      	ldr	r3, [pc, #132]	; (8008cdc <xTaskResumeAll+0x12c>)
 8008c56:	2201      	movs	r2, #1
 8008c58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c5a:	4b1c      	ldr	r3, [pc, #112]	; (8008ccc <xTaskResumeAll+0x11c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1cc      	bne.n	8008bfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d001      	beq.n	8008c6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c68:	f000 fa08 	bl	800907c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ce0 <xTaskResumeAll+0x130>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c78:	f000 f836 	bl	8008ce8 <xTaskIncrementTick>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d002      	beq.n	8008c88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <xTaskResumeAll+0x12c>)
 8008c84:	2201      	movs	r2, #1
 8008c86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f1      	bne.n	8008c78 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <xTaskResumeAll+0x130>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c9a:	4b10      	ldr	r3, [pc, #64]	; (8008cdc <xTaskResumeAll+0x12c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <xTaskResumeAll+0x134>)
 8008ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cb6:	f000 fbc5 	bl	8009444 <vPortExitCritical>

	return xAlreadyYielded;
 8008cba:	68bb      	ldr	r3, [r7, #8]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	2000097c 	.word	0x2000097c
 8008cc8:	20000954 	.word	0x20000954
 8008ccc:	20000914 	.word	0x20000914
 8008cd0:	2000095c 	.word	0x2000095c
 8008cd4:	20000858 	.word	0x20000858
 8008cd8:	20000854 	.word	0x20000854
 8008cdc:	20000968 	.word	0x20000968
 8008ce0:	20000964 	.word	0x20000964
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cf2:	4b4e      	ldr	r3, [pc, #312]	; (8008e2c <xTaskIncrementTick+0x144>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 808e 	bne.w	8008e18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cfc:	4b4c      	ldr	r3, [pc, #304]	; (8008e30 <xTaskIncrementTick+0x148>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3301      	adds	r3, #1
 8008d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d04:	4a4a      	ldr	r2, [pc, #296]	; (8008e30 <xTaskIncrementTick+0x148>)
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d120      	bne.n	8008d52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d10:	4b48      	ldr	r3, [pc, #288]	; (8008e34 <xTaskIncrementTick+0x14c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <xTaskIncrementTick+0x48>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	603b      	str	r3, [r7, #0]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <xTaskIncrementTick+0x46>
 8008d30:	4b40      	ldr	r3, [pc, #256]	; (8008e34 <xTaskIncrementTick+0x14c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <xTaskIncrementTick+0x150>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a3e      	ldr	r2, [pc, #248]	; (8008e34 <xTaskIncrementTick+0x14c>)
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	4a3e      	ldr	r2, [pc, #248]	; (8008e38 <xTaskIncrementTick+0x150>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	4b3d      	ldr	r3, [pc, #244]	; (8008e3c <xTaskIncrementTick+0x154>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	4a3c      	ldr	r2, [pc, #240]	; (8008e3c <xTaskIncrementTick+0x154>)
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	f000 f995 	bl	800907c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d52:	4b3b      	ldr	r3, [pc, #236]	; (8008e40 <xTaskIncrementTick+0x158>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d348      	bcc.n	8008dee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d5c:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <xTaskIncrementTick+0x14c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d66:	4b36      	ldr	r3, [pc, #216]	; (8008e40 <xTaskIncrementTick+0x158>)
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d6c:	601a      	str	r2, [r3, #0]
					break;
 8008d6e:	e03e      	b.n	8008dee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d70:	4b30      	ldr	r3, [pc, #192]	; (8008e34 <xTaskIncrementTick+0x14c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d203      	bcs.n	8008d90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d88:	4a2d      	ldr	r2, [pc, #180]	; (8008e40 <xTaskIncrementTick+0x158>)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d8e:	e02e      	b.n	8008dee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fcac 	bl	80086f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	3318      	adds	r3, #24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fca3 	bl	80086f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	2201      	movs	r2, #1
 8008db2:	409a      	lsls	r2, r3
 8008db4:	4b23      	ldr	r3, [pc, #140]	; (8008e44 <xTaskIncrementTick+0x15c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	4a22      	ldr	r2, [pc, #136]	; (8008e44 <xTaskIncrementTick+0x15c>)
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a1f      	ldr	r2, [pc, #124]	; (8008e48 <xTaskIncrementTick+0x160>)
 8008dcc:	441a      	add	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f7ff fc2f 	bl	8008638 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dde:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <xTaskIncrementTick+0x164>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d3b9      	bcc.n	8008d5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008de8:	2301      	movs	r3, #1
 8008dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dec:	e7b6      	b.n	8008d5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <xTaskIncrementTick+0x164>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df4:	4914      	ldr	r1, [pc, #80]	; (8008e48 <xTaskIncrementTick+0x160>)
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	440b      	add	r3, r1
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d901      	bls.n	8008e0a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e0a:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <xTaskIncrementTick+0x168>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008e12:	2301      	movs	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e004      	b.n	8008e22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e18:	4b0e      	ldr	r3, [pc, #56]	; (8008e54 <xTaskIncrementTick+0x16c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	4a0d      	ldr	r2, [pc, #52]	; (8008e54 <xTaskIncrementTick+0x16c>)
 8008e20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e22:	697b      	ldr	r3, [r7, #20]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	2000097c 	.word	0x2000097c
 8008e30:	20000958 	.word	0x20000958
 8008e34:	2000090c 	.word	0x2000090c
 8008e38:	20000910 	.word	0x20000910
 8008e3c:	2000096c 	.word	0x2000096c
 8008e40:	20000974 	.word	0x20000974
 8008e44:	2000095c 	.word	0x2000095c
 8008e48:	20000858 	.word	0x20000858
 8008e4c:	20000854 	.word	0x20000854
 8008e50:	20000968 	.word	0x20000968
 8008e54:	20000964 	.word	0x20000964

08008e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e5e:	4b27      	ldr	r3, [pc, #156]	; (8008efc <vTaskSwitchContext+0xa4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e66:	4b26      	ldr	r3, [pc, #152]	; (8008f00 <vTaskSwitchContext+0xa8>)
 8008e68:	2201      	movs	r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e6c:	e03f      	b.n	8008eee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008e6e:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <vTaskSwitchContext+0xa8>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e74:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <vTaskSwitchContext+0xac>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	fab3 f383 	clz	r3, r3
 8008e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e82:	7afb      	ldrb	r3, [r7, #11]
 8008e84:	f1c3 031f 	rsb	r3, r3, #31
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	491f      	ldr	r1, [pc, #124]	; (8008f08 <vTaskSwitchContext+0xb0>)
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	607b      	str	r3, [r7, #4]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <vTaskSwitchContext+0x5a>
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a12      	ldr	r2, [pc, #72]	; (8008f08 <vTaskSwitchContext+0xb0>)
 8008ec0:	4413      	add	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	605a      	str	r2, [r3, #4]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d104      	bne.n	8008ee4 <vTaskSwitchContext+0x8c>
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	605a      	str	r2, [r3, #4]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <vTaskSwitchContext+0xb4>)
 8008eec:	6013      	str	r3, [r2, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	2000097c 	.word	0x2000097c
 8008f00:	20000968 	.word	0x20000968
 8008f04:	2000095c 	.word	0x2000095c
 8008f08:	20000858 	.word	0x20000858
 8008f0c:	20000854 	.word	0x20000854

08008f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f18:	f000 f852 	bl	8008fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f1c:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <prvIdleTask+0x28>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d9f9      	bls.n	8008f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <prvIdleTask+0x2c>)
 8008f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f34:	e7f0      	b.n	8008f18 <prvIdleTask+0x8>
 8008f36:	bf00      	nop
 8008f38:	20000858 	.word	0x20000858
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f46:	2300      	movs	r3, #0
 8008f48:	607b      	str	r3, [r7, #4]
 8008f4a:	e00c      	b.n	8008f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4a12      	ldr	r2, [pc, #72]	; (8008fa0 <prvInitialiseTaskLists+0x60>)
 8008f58:	4413      	add	r3, r2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff fb3f 	bl	80085de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3301      	adds	r3, #1
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b06      	cmp	r3, #6
 8008f6a:	d9ef      	bls.n	8008f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f6c:	480d      	ldr	r0, [pc, #52]	; (8008fa4 <prvInitialiseTaskLists+0x64>)
 8008f6e:	f7ff fb36 	bl	80085de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f72:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <prvInitialiseTaskLists+0x68>)
 8008f74:	f7ff fb33 	bl	80085de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f78:	480c      	ldr	r0, [pc, #48]	; (8008fac <prvInitialiseTaskLists+0x6c>)
 8008f7a:	f7ff fb30 	bl	80085de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f7e:	480c      	ldr	r0, [pc, #48]	; (8008fb0 <prvInitialiseTaskLists+0x70>)
 8008f80:	f7ff fb2d 	bl	80085de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f84:	480b      	ldr	r0, [pc, #44]	; (8008fb4 <prvInitialiseTaskLists+0x74>)
 8008f86:	f7ff fb2a 	bl	80085de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <prvInitialiseTaskLists+0x78>)
 8008f8c:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <prvInitialiseTaskLists+0x64>)
 8008f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f90:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <prvInitialiseTaskLists+0x7c>)
 8008f92:	4a05      	ldr	r2, [pc, #20]	; (8008fa8 <prvInitialiseTaskLists+0x68>)
 8008f94:	601a      	str	r2, [r3, #0]
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000858 	.word	0x20000858
 8008fa4:	200008e4 	.word	0x200008e4
 8008fa8:	200008f8 	.word	0x200008f8
 8008fac:	20000914 	.word	0x20000914
 8008fb0:	20000928 	.word	0x20000928
 8008fb4:	20000940 	.word	0x20000940
 8008fb8:	2000090c 	.word	0x2000090c
 8008fbc:	20000910 	.word	0x20000910

08008fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fc6:	e019      	b.n	8008ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fc8:	f000 fa0c 	bl	80093e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <prvCheckTasksWaitingTermination+0x50>)
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fb8a 	bl	80086f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008fde:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <prvCheckTasksWaitingTermination+0x54>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	4a0b      	ldr	r2, [pc, #44]	; (8009014 <prvCheckTasksWaitingTermination+0x54>)
 8008fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <prvCheckTasksWaitingTermination+0x58>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	4a0a      	ldr	r2, [pc, #40]	; (8009018 <prvCheckTasksWaitingTermination+0x58>)
 8008ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ff2:	f000 fa27 	bl	8009444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f810 	bl	800901c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffc:	4b06      	ldr	r3, [pc, #24]	; (8009018 <prvCheckTasksWaitingTermination+0x58>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e1      	bne.n	8008fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20000928 	.word	0x20000928
 8009014:	20000954 	.word	0x20000954
 8009018:	2000093c 	.word	0x2000093c

0800901c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800902a:	2b00      	cmp	r3, #0
 800902c:	d108      	bne.n	8009040 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fb84 	bl	8009740 <vPortFree>
				vPortFree( pxTCB );
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fb81 	bl	8009740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800903e:	e018      	b.n	8009072 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009046:	2b01      	cmp	r3, #1
 8009048:	d103      	bne.n	8009052 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb78 	bl	8009740 <vPortFree>
	}
 8009050:	e00f      	b.n	8009072 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009058:	2b02      	cmp	r3, #2
 800905a:	d00a      	beq.n	8009072 <prvDeleteTCB+0x56>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	60fb      	str	r3, [r7, #12]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <prvDeleteTCB+0x54>
	}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009082:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <prvResetNextTaskUnblockTime+0x38>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800908c:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <prvResetNextTaskUnblockTime+0x3c>)
 800908e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009094:	e008      	b.n	80090a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009096:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <prvResetNextTaskUnblockTime+0x38>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <prvResetNextTaskUnblockTime+0x3c>)
 80090a6:	6013      	str	r3, [r2, #0]
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	2000090c 	.word	0x2000090c
 80090b8:	20000974 	.word	0x20000974

080090bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090c6:	4b29      	ldr	r3, [pc, #164]	; (800916c <prvAddCurrentTaskToDelayedList+0xb0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090cc:	4b28      	ldr	r3, [pc, #160]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7ff fb0d 	bl	80086f2 <uxListRemove>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10b      	bne.n	80090f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80090de:	4b24      	ldr	r3, [pc, #144]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	2201      	movs	r2, #1
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	43da      	mvns	r2, r3
 80090ec:	4b21      	ldr	r3, [pc, #132]	; (8009174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4013      	ands	r3, r2
 80090f2:	4a20      	ldr	r2, [pc, #128]	; (8009174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090fc:	d10a      	bne.n	8009114 <prvAddCurrentTaskToDelayedList+0x58>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d007      	beq.n	8009114 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3304      	adds	r3, #4
 800910a:	4619      	mov	r1, r3
 800910c:	481a      	ldr	r0, [pc, #104]	; (8009178 <prvAddCurrentTaskToDelayedList+0xbc>)
 800910e:	f7ff fa93 	bl	8008638 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009112:	e026      	b.n	8009162 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800911c:	4b14      	ldr	r3, [pc, #80]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	429a      	cmp	r2, r3
 800912a:	d209      	bcs.n	8009140 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800912c:	4b13      	ldr	r3, [pc, #76]	; (800917c <prvAddCurrentTaskToDelayedList+0xc0>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3304      	adds	r3, #4
 8009136:	4619      	mov	r1, r3
 8009138:	4610      	mov	r0, r2
 800913a:	f7ff faa1 	bl	8008680 <vListInsert>
}
 800913e:	e010      	b.n	8009162 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009140:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3304      	adds	r3, #4
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f7ff fa97 	bl	8008680 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009152:	4b0c      	ldr	r3, [pc, #48]	; (8009184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	d202      	bcs.n	8009162 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800915c:	4a09      	ldr	r2, [pc, #36]	; (8009184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6013      	str	r3, [r2, #0]
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000958 	.word	0x20000958
 8009170:	20000854 	.word	0x20000854
 8009174:	2000095c 	.word	0x2000095c
 8009178:	20000940 	.word	0x20000940
 800917c:	20000910 	.word	0x20000910
 8009180:	2000090c 	.word	0x2000090c
 8009184:	20000974 	.word	0x20000974

08009188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3b04      	subs	r3, #4
 8009198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80091a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f023 0201 	bic.w	r2, r3, #1
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3b04      	subs	r3, #4
 80091b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091b8:	4a0c      	ldr	r2, [pc, #48]	; (80091ec <pxPortInitialiseStack+0x64>)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3b14      	subs	r3, #20
 80091c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f06f 0202 	mvn.w	r2, #2
 80091d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3b20      	subs	r3, #32
 80091dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091de:	68fb      	ldr	r3, [r7, #12]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	080091f1 	.word	0x080091f1

080091f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <prvTaskExitError+0x54>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009202:	d00a      	beq.n	800921a <prvTaskExitError+0x2a>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	60fb      	str	r3, [r7, #12]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <prvTaskExitError+0x28>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	60bb      	str	r3, [r7, #8]
}
 800922c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800922e:	bf00      	nop
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0fc      	beq.n	8009230 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	20000024 	.word	0x20000024
	...

08009250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <pxCurrentTCBConst2>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6808      	ldr	r0, [r1, #0]
 8009256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925a:	f380 8809 	msr	PSP, r0
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	4770      	bx	lr
 800926c:	f3af 8000 	nop.w

08009270 <pxCurrentTCBConst2>:
 8009270:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop

08009278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009278:	4808      	ldr	r0, [pc, #32]	; (800929c <prvPortStartFirstTask+0x24>)
 800927a:	6800      	ldr	r0, [r0, #0]
 800927c:	6800      	ldr	r0, [r0, #0]
 800927e:	f380 8808 	msr	MSP, r0
 8009282:	f04f 0000 	mov.w	r0, #0
 8009286:	f380 8814 	msr	CONTROL, r0
 800928a:	b662      	cpsie	i
 800928c:	b661      	cpsie	f
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	df00      	svc	0
 8009298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800929a:	bf00      	nop
 800929c:	e000ed08 	.word	0xe000ed08

080092a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092a6:	4b46      	ldr	r3, [pc, #280]	; (80093c0 <xPortStartScheduler+0x120>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a46      	ldr	r2, [pc, #280]	; (80093c4 <xPortStartScheduler+0x124>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10a      	bne.n	80092c6 <xPortStartScheduler+0x26>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092c6:	4b3e      	ldr	r3, [pc, #248]	; (80093c0 <xPortStartScheduler+0x120>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a3f      	ldr	r2, [pc, #252]	; (80093c8 <xPortStartScheduler+0x128>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d10a      	bne.n	80092e6 <xPortStartScheduler+0x46>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092e6:	4b39      	ldr	r3, [pc, #228]	; (80093cc <xPortStartScheduler+0x12c>)
 80092e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	22ff      	movs	r2, #255	; 0xff
 80092f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009308:	b2da      	uxtb	r2, r3
 800930a:	4b31      	ldr	r3, [pc, #196]	; (80093d0 <xPortStartScheduler+0x130>)
 800930c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800930e:	4b31      	ldr	r3, [pc, #196]	; (80093d4 <xPortStartScheduler+0x134>)
 8009310:	2207      	movs	r2, #7
 8009312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009314:	e009      	b.n	800932a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009316:	4b2f      	ldr	r3, [pc, #188]	; (80093d4 <xPortStartScheduler+0x134>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3b01      	subs	r3, #1
 800931c:	4a2d      	ldr	r2, [pc, #180]	; (80093d4 <xPortStartScheduler+0x134>)
 800931e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b80      	cmp	r3, #128	; 0x80
 8009334:	d0ef      	beq.n	8009316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009336:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <xPortStartScheduler+0x134>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f1c3 0307 	rsb	r3, r3, #7
 800933e:	2b04      	cmp	r3, #4
 8009340:	d00a      	beq.n	8009358 <xPortStartScheduler+0xb8>
	__asm volatile
 8009342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009346:	f383 8811 	msr	BASEPRI, r3
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	f3bf 8f4f 	dsb	sy
 8009352:	60bb      	str	r3, [r7, #8]
}
 8009354:	bf00      	nop
 8009356:	e7fe      	b.n	8009356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <xPortStartScheduler+0x134>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <xPortStartScheduler+0x134>)
 8009360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009362:	4b1c      	ldr	r3, [pc, #112]	; (80093d4 <xPortStartScheduler+0x134>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800936a:	4a1a      	ldr	r2, [pc, #104]	; (80093d4 <xPortStartScheduler+0x134>)
 800936c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	b2da      	uxtb	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009376:	4b18      	ldr	r3, [pc, #96]	; (80093d8 <xPortStartScheduler+0x138>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <xPortStartScheduler+0x138>)
 800937c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <xPortStartScheduler+0x138>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a14      	ldr	r2, [pc, #80]	; (80093d8 <xPortStartScheduler+0x138>)
 8009388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800938c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800938e:	f000 f8dd 	bl	800954c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <xPortStartScheduler+0x13c>)
 8009394:	2200      	movs	r2, #0
 8009396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009398:	f000 f8fc 	bl	8009594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800939c:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <xPortStartScheduler+0x140>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0f      	ldr	r2, [pc, #60]	; (80093e0 <xPortStartScheduler+0x140>)
 80093a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093a8:	f7ff ff66 	bl	8009278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093ac:	f7ff fd54 	bl	8008e58 <vTaskSwitchContext>
	prvTaskExitError();
 80093b0:	f7ff ff1e 	bl	80091f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	e000ed00 	.word	0xe000ed00
 80093c4:	410fc271 	.word	0x410fc271
 80093c8:	410fc270 	.word	0x410fc270
 80093cc:	e000e400 	.word	0xe000e400
 80093d0:	20000980 	.word	0x20000980
 80093d4:	20000984 	.word	0x20000984
 80093d8:	e000ed20 	.word	0xe000ed20
 80093dc:	20000024 	.word	0x20000024
 80093e0:	e000ef34 	.word	0xe000ef34

080093e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	607b      	str	r3, [r7, #4]
}
 80093fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093fe:	4b0f      	ldr	r3, [pc, #60]	; (800943c <vPortEnterCritical+0x58>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3301      	adds	r3, #1
 8009404:	4a0d      	ldr	r2, [pc, #52]	; (800943c <vPortEnterCritical+0x58>)
 8009406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009408:	4b0c      	ldr	r3, [pc, #48]	; (800943c <vPortEnterCritical+0x58>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d10f      	bne.n	8009430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <vPortEnterCritical+0x5c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <vPortEnterCritical+0x4c>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	603b      	str	r3, [r7, #0]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <vPortEnterCritical+0x4a>
	}
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	20000024 	.word	0x20000024
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <vPortExitCritical+0x50>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <vPortExitCritical+0x24>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	607b      	str	r3, [r7, #4]
}
 8009464:	bf00      	nop
 8009466:	e7fe      	b.n	8009466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <vPortExitCritical+0x50>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3b01      	subs	r3, #1
 800946e:	4a09      	ldr	r2, [pc, #36]	; (8009494 <vPortExitCritical+0x50>)
 8009470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009472:	4b08      	ldr	r3, [pc, #32]	; (8009494 <vPortExitCritical+0x50>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <vPortExitCritical+0x42>
 800947a:	2300      	movs	r3, #0
 800947c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20000024 	.word	0x20000024
	...

080094a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094a0:	f3ef 8009 	mrs	r0, PSP
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4b15      	ldr	r3, [pc, #84]	; (8009500 <pxCurrentTCBConst>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	f01e 0f10 	tst.w	lr, #16
 80094b0:	bf08      	it	eq
 80094b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	6010      	str	r0, [r2, #0]
 80094bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094c4:	f380 8811 	msr	BASEPRI, r0
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f7ff fcc2 	bl	8008e58 <vTaskSwitchContext>
 80094d4:	f04f 0000 	mov.w	r0, #0
 80094d8:	f380 8811 	msr	BASEPRI, r0
 80094dc:	bc09      	pop	{r0, r3}
 80094de:	6819      	ldr	r1, [r3, #0]
 80094e0:	6808      	ldr	r0, [r1, #0]
 80094e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e6:	f01e 0f10 	tst.w	lr, #16
 80094ea:	bf08      	it	eq
 80094ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094f0:	f380 8809 	msr	PSP, r0
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w

08009500 <pxCurrentTCBConst>:
 8009500:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop

08009508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	607b      	str	r3, [r7, #4]
}
 8009520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009522:	f7ff fbe1 	bl	8008ce8 <xTaskIncrementTick>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <SysTick_Handler+0x40>)
 800952e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	f383 8811 	msr	BASEPRI, r3
}
 800953e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <vPortSetupTimerInterrupt+0x38>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <vPortSetupTimerInterrupt+0x3c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a0a      	ldr	r2, [pc, #40]	; (800958c <vPortSetupTimerInterrupt+0x40>)
 8009562:	fba2 2303 	umull	r2, r3, r2, r3
 8009566:	099b      	lsrs	r3, r3, #6
 8009568:	4a09      	ldr	r2, [pc, #36]	; (8009590 <vPortSetupTimerInterrupt+0x44>)
 800956a:	3b01      	subs	r3, #1
 800956c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800956e:	4b04      	ldr	r3, [pc, #16]	; (8009580 <vPortSetupTimerInterrupt+0x34>)
 8009570:	2207      	movs	r2, #7
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	e000e010 	.word	0xe000e010
 8009584:	e000e018 	.word	0xe000e018
 8009588:	20000018 	.word	0x20000018
 800958c:	10624dd3 	.word	0x10624dd3
 8009590:	e000e014 	.word	0xe000e014

08009594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095a4 <vPortEnableVFP+0x10>
 8009598:	6801      	ldr	r1, [r0, #0]
 800959a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800959e:	6001      	str	r1, [r0, #0]
 80095a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095a2:	bf00      	nop
 80095a4:	e000ed88 	.word	0xe000ed88

080095a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	; 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095b4:	f7ff faee 	bl	8008b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095b8:	4b5b      	ldr	r3, [pc, #364]	; (8009728 <pvPortMalloc+0x180>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095c0:	f000 f920 	bl	8009804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095c4:	4b59      	ldr	r3, [pc, #356]	; (800972c <pvPortMalloc+0x184>)
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f040 8093 	bne.w	80096f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01d      	beq.n	8009614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80095d8:	2208      	movs	r2, #8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d014      	beq.n	8009614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f023 0307 	bic.w	r3, r3, #7
 80095f0:	3308      	adds	r3, #8
 80095f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f003 0307 	and.w	r3, r3, #7
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <pvPortMalloc+0x6c>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	617b      	str	r3, [r7, #20]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d06e      	beq.n	80096f8 <pvPortMalloc+0x150>
 800961a:	4b45      	ldr	r3, [pc, #276]	; (8009730 <pvPortMalloc+0x188>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	429a      	cmp	r2, r3
 8009622:	d869      	bhi.n	80096f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009624:	4b43      	ldr	r3, [pc, #268]	; (8009734 <pvPortMalloc+0x18c>)
 8009626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009628:	4b42      	ldr	r3, [pc, #264]	; (8009734 <pvPortMalloc+0x18c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800962e:	e004      	b.n	800963a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d903      	bls.n	800964c <pvPortMalloc+0xa4>
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1f1      	bne.n	8009630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800964c:	4b36      	ldr	r3, [pc, #216]	; (8009728 <pvPortMalloc+0x180>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009652:	429a      	cmp	r2, r3
 8009654:	d050      	beq.n	80096f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2208      	movs	r2, #8
 800965c:	4413      	add	r3, r2
 800965e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	2308      	movs	r3, #8
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	429a      	cmp	r2, r3
 8009676:	d91f      	bls.n	80096b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4413      	add	r3, r2
 800967e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <pvPortMalloc+0xf8>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	613b      	str	r3, [r7, #16]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	1ad2      	subs	r2, r2, r3
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096b2:	69b8      	ldr	r0, [r7, #24]
 80096b4:	f000 f908 	bl	80098c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096b8:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <pvPortMalloc+0x188>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	4a1b      	ldr	r2, [pc, #108]	; (8009730 <pvPortMalloc+0x188>)
 80096c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096c6:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <pvPortMalloc+0x188>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <pvPortMalloc+0x190>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d203      	bcs.n	80096da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096d2:	4b17      	ldr	r3, [pc, #92]	; (8009730 <pvPortMalloc+0x188>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a18      	ldr	r2, [pc, #96]	; (8009738 <pvPortMalloc+0x190>)
 80096d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <pvPortMalloc+0x184>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	431a      	orrs	r2, r3
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096ee:	4b13      	ldr	r3, [pc, #76]	; (800973c <pvPortMalloc+0x194>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a11      	ldr	r2, [pc, #68]	; (800973c <pvPortMalloc+0x194>)
 80096f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096f8:	f7ff fa5a 	bl	8008bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	f003 0307 	and.w	r3, r3, #7
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <pvPortMalloc+0x174>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60fb      	str	r3, [r7, #12]
}
 8009718:	bf00      	nop
 800971a:	e7fe      	b.n	800971a <pvPortMalloc+0x172>
	return pvReturn;
 800971c:	69fb      	ldr	r3, [r7, #28]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3728      	adds	r7, #40	; 0x28
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20004590 	.word	0x20004590
 800972c:	200045a4 	.word	0x200045a4
 8009730:	20004594 	.word	0x20004594
 8009734:	20004588 	.word	0x20004588
 8009738:	20004598 	.word	0x20004598
 800973c:	2000459c 	.word	0x2000459c

08009740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d04d      	beq.n	80097ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009752:	2308      	movs	r3, #8
 8009754:	425b      	negs	r3, r3
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	4b24      	ldr	r3, [pc, #144]	; (80097f8 <vPortFree+0xb8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4013      	ands	r3, r2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10a      	bne.n	8009784 <vPortFree+0x44>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	60fb      	str	r3, [r7, #12]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00a      	beq.n	80097a2 <vPortFree+0x62>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60bb      	str	r3, [r7, #8]
}
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <vPortFree+0xb8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d01e      	beq.n	80097ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d11a      	bne.n	80097ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <vPortFree+0xb8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	43db      	mvns	r3, r3
 80097c2:	401a      	ands	r2, r3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097c8:	f7ff f9e4 	bl	8008b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <vPortFree+0xbc>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	4a09      	ldr	r2, [pc, #36]	; (80097fc <vPortFree+0xbc>)
 80097d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80097da:	6938      	ldr	r0, [r7, #16]
 80097dc:	f000 f874 	bl	80098c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <vPortFree+0xc0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3301      	adds	r3, #1
 80097e6:	4a06      	ldr	r2, [pc, #24]	; (8009800 <vPortFree+0xc0>)
 80097e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097ea:	f7ff f9e1 	bl	8008bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097ee:	bf00      	nop
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	200045a4 	.word	0x200045a4
 80097fc:	20004594 	.word	0x20004594
 8009800:	200045a0 	.word	0x200045a0

08009804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800980a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800980e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009810:	4b27      	ldr	r3, [pc, #156]	; (80098b0 <prvHeapInit+0xac>)
 8009812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00c      	beq.n	8009838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3307      	adds	r3, #7
 8009822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 0307 	bic.w	r3, r3, #7
 800982a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	4a1f      	ldr	r2, [pc, #124]	; (80098b0 <prvHeapInit+0xac>)
 8009834:	4413      	add	r3, r2
 8009836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800983c:	4a1d      	ldr	r2, [pc, #116]	; (80098b4 <prvHeapInit+0xb0>)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009842:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <prvHeapInit+0xb0>)
 8009844:	2200      	movs	r2, #0
 8009846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	4413      	add	r3, r2
 800984e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009850:	2208      	movs	r2, #8
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	1a9b      	subs	r3, r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0307 	bic.w	r3, r3, #7
 800985e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4a15      	ldr	r2, [pc, #84]	; (80098b8 <prvHeapInit+0xb4>)
 8009864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009866:	4b14      	ldr	r3, [pc, #80]	; (80098b8 <prvHeapInit+0xb4>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2200      	movs	r2, #0
 800986c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800986e:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <prvHeapInit+0xb4>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009884:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <prvHeapInit+0xb4>)
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	4a0a      	ldr	r2, [pc, #40]	; (80098bc <prvHeapInit+0xb8>)
 8009892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	4a09      	ldr	r2, [pc, #36]	; (80098c0 <prvHeapInit+0xbc>)
 800989a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800989c:	4b09      	ldr	r3, [pc, #36]	; (80098c4 <prvHeapInit+0xc0>)
 800989e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098a2:	601a      	str	r2, [r3, #0]
}
 80098a4:	bf00      	nop
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	20000988 	.word	0x20000988
 80098b4:	20004588 	.word	0x20004588
 80098b8:	20004590 	.word	0x20004590
 80098bc:	20004598 	.word	0x20004598
 80098c0:	20004594 	.word	0x20004594
 80098c4:	200045a4 	.word	0x200045a4

080098c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098d0:	4b28      	ldr	r3, [pc, #160]	; (8009974 <prvInsertBlockIntoFreeList+0xac>)
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	e002      	b.n	80098dc <prvInsertBlockIntoFreeList+0x14>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d8f7      	bhi.n	80098d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d108      	bne.n	800990a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685a      	ldr	r2, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	441a      	add	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	441a      	add	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d118      	bne.n	8009950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4b15      	ldr	r3, [pc, #84]	; (8009978 <prvInsertBlockIntoFreeList+0xb0>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	429a      	cmp	r2, r3
 8009928:	d00d      	beq.n	8009946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	441a      	add	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	e008      	b.n	8009958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009946:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <prvInsertBlockIntoFreeList+0xb0>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	e003      	b.n	8009958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	429a      	cmp	r2, r3
 800995e:	d002      	beq.n	8009966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20004588 	.word	0x20004588
 8009978:	20004590 	.word	0x20004590

0800997c <__errno>:
 800997c:	4b01      	ldr	r3, [pc, #4]	; (8009984 <__errno+0x8>)
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000028 	.word	0x20000028

08009988 <__libc_init_array>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	4d0d      	ldr	r5, [pc, #52]	; (80099c0 <__libc_init_array+0x38>)
 800998c:	4c0d      	ldr	r4, [pc, #52]	; (80099c4 <__libc_init_array+0x3c>)
 800998e:	1b64      	subs	r4, r4, r5
 8009990:	10a4      	asrs	r4, r4, #2
 8009992:	2600      	movs	r6, #0
 8009994:	42a6      	cmp	r6, r4
 8009996:	d109      	bne.n	80099ac <__libc_init_array+0x24>
 8009998:	4d0b      	ldr	r5, [pc, #44]	; (80099c8 <__libc_init_array+0x40>)
 800999a:	4c0c      	ldr	r4, [pc, #48]	; (80099cc <__libc_init_array+0x44>)
 800999c:	f003 f8e2 	bl	800cb64 <_init>
 80099a0:	1b64      	subs	r4, r4, r5
 80099a2:	10a4      	asrs	r4, r4, #2
 80099a4:	2600      	movs	r6, #0
 80099a6:	42a6      	cmp	r6, r4
 80099a8:	d105      	bne.n	80099b6 <__libc_init_array+0x2e>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b0:	4798      	blx	r3
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7ee      	b.n	8009994 <__libc_init_array+0xc>
 80099b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ba:	4798      	blx	r3
 80099bc:	3601      	adds	r6, #1
 80099be:	e7f2      	b.n	80099a6 <__libc_init_array+0x1e>
 80099c0:	0800d4f8 	.word	0x0800d4f8
 80099c4:	0800d4f8 	.word	0x0800d4f8
 80099c8:	0800d4f8 	.word	0x0800d4f8
 80099cc:	0800d4fc 	.word	0x0800d4fc

080099d0 <memcpy>:
 80099d0:	440a      	add	r2, r1
 80099d2:	4291      	cmp	r1, r2
 80099d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80099d8:	d100      	bne.n	80099dc <memcpy+0xc>
 80099da:	4770      	bx	lr
 80099dc:	b510      	push	{r4, lr}
 80099de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e6:	4291      	cmp	r1, r2
 80099e8:	d1f9      	bne.n	80099de <memcpy+0xe>
 80099ea:	bd10      	pop	{r4, pc}

080099ec <memset>:
 80099ec:	4402      	add	r2, r0
 80099ee:	4603      	mov	r3, r0
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d100      	bne.n	80099f6 <memset+0xa>
 80099f4:	4770      	bx	lr
 80099f6:	f803 1b01 	strb.w	r1, [r3], #1
 80099fa:	e7f9      	b.n	80099f0 <memset+0x4>

080099fc <iprintf>:
 80099fc:	b40f      	push	{r0, r1, r2, r3}
 80099fe:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <iprintf+0x2c>)
 8009a00:	b513      	push	{r0, r1, r4, lr}
 8009a02:	681c      	ldr	r4, [r3, #0]
 8009a04:	b124      	cbz	r4, 8009a10 <iprintf+0x14>
 8009a06:	69a3      	ldr	r3, [r4, #24]
 8009a08:	b913      	cbnz	r3, 8009a10 <iprintf+0x14>
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f000 fa5e 	bl	8009ecc <__sinit>
 8009a10:	ab05      	add	r3, sp, #20
 8009a12:	9a04      	ldr	r2, [sp, #16]
 8009a14:	68a1      	ldr	r1, [r4, #8]
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 fc67 	bl	800a2ec <_vfiprintf_r>
 8009a1e:	b002      	add	sp, #8
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	b004      	add	sp, #16
 8009a26:	4770      	bx	lr
 8009a28:	20000028 	.word	0x20000028

08009a2c <_puts_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	460e      	mov	r6, r1
 8009a30:	4605      	mov	r5, r0
 8009a32:	b118      	cbz	r0, 8009a3c <_puts_r+0x10>
 8009a34:	6983      	ldr	r3, [r0, #24]
 8009a36:	b90b      	cbnz	r3, 8009a3c <_puts_r+0x10>
 8009a38:	f000 fa48 	bl	8009ecc <__sinit>
 8009a3c:	69ab      	ldr	r3, [r5, #24]
 8009a3e:	68ac      	ldr	r4, [r5, #8]
 8009a40:	b913      	cbnz	r3, 8009a48 <_puts_r+0x1c>
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 fa42 	bl	8009ecc <__sinit>
 8009a48:	4b2c      	ldr	r3, [pc, #176]	; (8009afc <_puts_r+0xd0>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	d120      	bne.n	8009a90 <_puts_r+0x64>
 8009a4e:	686c      	ldr	r4, [r5, #4]
 8009a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d405      	bmi.n	8009a62 <_puts_r+0x36>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	0598      	lsls	r0, r3, #22
 8009a5a:	d402      	bmi.n	8009a62 <_puts_r+0x36>
 8009a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5e:	f000 fad3 	bl	800a008 <__retarget_lock_acquire_recursive>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	0719      	lsls	r1, r3, #28
 8009a66:	d51d      	bpl.n	8009aa4 <_puts_r+0x78>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	b1db      	cbz	r3, 8009aa4 <_puts_r+0x78>
 8009a6c:	3e01      	subs	r6, #1
 8009a6e:	68a3      	ldr	r3, [r4, #8]
 8009a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a74:	3b01      	subs	r3, #1
 8009a76:	60a3      	str	r3, [r4, #8]
 8009a78:	bb39      	cbnz	r1, 8009aca <_puts_r+0x9e>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da38      	bge.n	8009af0 <_puts_r+0xc4>
 8009a7e:	4622      	mov	r2, r4
 8009a80:	210a      	movs	r1, #10
 8009a82:	4628      	mov	r0, r5
 8009a84:	f000 f848 	bl	8009b18 <__swbuf_r>
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d011      	beq.n	8009ab0 <_puts_r+0x84>
 8009a8c:	250a      	movs	r5, #10
 8009a8e:	e011      	b.n	8009ab4 <_puts_r+0x88>
 8009a90:	4b1b      	ldr	r3, [pc, #108]	; (8009b00 <_puts_r+0xd4>)
 8009a92:	429c      	cmp	r4, r3
 8009a94:	d101      	bne.n	8009a9a <_puts_r+0x6e>
 8009a96:	68ac      	ldr	r4, [r5, #8]
 8009a98:	e7da      	b.n	8009a50 <_puts_r+0x24>
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <_puts_r+0xd8>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	bf08      	it	eq
 8009aa0:	68ec      	ldreq	r4, [r5, #12]
 8009aa2:	e7d5      	b.n	8009a50 <_puts_r+0x24>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 f888 	bl	8009bbc <__swsetup_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d0dd      	beq.n	8009a6c <_puts_r+0x40>
 8009ab0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d405      	bmi.n	8009ac6 <_puts_r+0x9a>
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	059b      	lsls	r3, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_puts_r+0x9a>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac2:	f000 faa2 	bl	800a00a <__retarget_lock_release_recursive>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	bd70      	pop	{r4, r5, r6, pc}
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	da04      	bge.n	8009ad8 <_puts_r+0xac>
 8009ace:	69a2      	ldr	r2, [r4, #24]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	dc06      	bgt.n	8009ae2 <_puts_r+0xb6>
 8009ad4:	290a      	cmp	r1, #10
 8009ad6:	d004      	beq.n	8009ae2 <_puts_r+0xb6>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	6022      	str	r2, [r4, #0]
 8009ade:	7019      	strb	r1, [r3, #0]
 8009ae0:	e7c5      	b.n	8009a6e <_puts_r+0x42>
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f817 	bl	8009b18 <__swbuf_r>
 8009aea:	3001      	adds	r0, #1
 8009aec:	d1bf      	bne.n	8009a6e <_puts_r+0x42>
 8009aee:	e7df      	b.n	8009ab0 <_puts_r+0x84>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	250a      	movs	r5, #10
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	6022      	str	r2, [r4, #0]
 8009af8:	701d      	strb	r5, [r3, #0]
 8009afa:	e7db      	b.n	8009ab4 <_puts_r+0x88>
 8009afc:	0800ce64 	.word	0x0800ce64
 8009b00:	0800ce84 	.word	0x0800ce84
 8009b04:	0800ce44 	.word	0x0800ce44

08009b08 <puts>:
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <puts+0xc>)
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f7ff bf8d 	b.w	8009a2c <_puts_r>
 8009b12:	bf00      	nop
 8009b14:	20000028 	.word	0x20000028

08009b18 <__swbuf_r>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	460e      	mov	r6, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	4605      	mov	r5, r0
 8009b20:	b118      	cbz	r0, 8009b2a <__swbuf_r+0x12>
 8009b22:	6983      	ldr	r3, [r0, #24]
 8009b24:	b90b      	cbnz	r3, 8009b2a <__swbuf_r+0x12>
 8009b26:	f000 f9d1 	bl	8009ecc <__sinit>
 8009b2a:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <__swbuf_r+0x98>)
 8009b2c:	429c      	cmp	r4, r3
 8009b2e:	d12b      	bne.n	8009b88 <__swbuf_r+0x70>
 8009b30:	686c      	ldr	r4, [r5, #4]
 8009b32:	69a3      	ldr	r3, [r4, #24]
 8009b34:	60a3      	str	r3, [r4, #8]
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	071a      	lsls	r2, r3, #28
 8009b3a:	d52f      	bpl.n	8009b9c <__swbuf_r+0x84>
 8009b3c:	6923      	ldr	r3, [r4, #16]
 8009b3e:	b36b      	cbz	r3, 8009b9c <__swbuf_r+0x84>
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	6820      	ldr	r0, [r4, #0]
 8009b44:	1ac0      	subs	r0, r0, r3
 8009b46:	6963      	ldr	r3, [r4, #20]
 8009b48:	b2f6      	uxtb	r6, r6
 8009b4a:	4283      	cmp	r3, r0
 8009b4c:	4637      	mov	r7, r6
 8009b4e:	dc04      	bgt.n	8009b5a <__swbuf_r+0x42>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f926 	bl	8009da4 <_fflush_r>
 8009b58:	bb30      	cbnz	r0, 8009ba8 <__swbuf_r+0x90>
 8009b5a:	68a3      	ldr	r3, [r4, #8]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	60a3      	str	r3, [r4, #8]
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	6022      	str	r2, [r4, #0]
 8009b66:	701e      	strb	r6, [r3, #0]
 8009b68:	6963      	ldr	r3, [r4, #20]
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	4283      	cmp	r3, r0
 8009b6e:	d004      	beq.n	8009b7a <__swbuf_r+0x62>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	07db      	lsls	r3, r3, #31
 8009b74:	d506      	bpl.n	8009b84 <__swbuf_r+0x6c>
 8009b76:	2e0a      	cmp	r6, #10
 8009b78:	d104      	bne.n	8009b84 <__swbuf_r+0x6c>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f000 f911 	bl	8009da4 <_fflush_r>
 8009b82:	b988      	cbnz	r0, 8009ba8 <__swbuf_r+0x90>
 8009b84:	4638      	mov	r0, r7
 8009b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b88:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <__swbuf_r+0x9c>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d101      	bne.n	8009b92 <__swbuf_r+0x7a>
 8009b8e:	68ac      	ldr	r4, [r5, #8]
 8009b90:	e7cf      	b.n	8009b32 <__swbuf_r+0x1a>
 8009b92:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <__swbuf_r+0xa0>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	bf08      	it	eq
 8009b98:	68ec      	ldreq	r4, [r5, #12]
 8009b9a:	e7ca      	b.n	8009b32 <__swbuf_r+0x1a>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f80c 	bl	8009bbc <__swsetup_r>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d0cb      	beq.n	8009b40 <__swbuf_r+0x28>
 8009ba8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009bac:	e7ea      	b.n	8009b84 <__swbuf_r+0x6c>
 8009bae:	bf00      	nop
 8009bb0:	0800ce64 	.word	0x0800ce64
 8009bb4:	0800ce84 	.word	0x0800ce84
 8009bb8:	0800ce44 	.word	0x0800ce44

08009bbc <__swsetup_r>:
 8009bbc:	4b32      	ldr	r3, [pc, #200]	; (8009c88 <__swsetup_r+0xcc>)
 8009bbe:	b570      	push	{r4, r5, r6, lr}
 8009bc0:	681d      	ldr	r5, [r3, #0]
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	b125      	cbz	r5, 8009bd2 <__swsetup_r+0x16>
 8009bc8:	69ab      	ldr	r3, [r5, #24]
 8009bca:	b913      	cbnz	r3, 8009bd2 <__swsetup_r+0x16>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 f97d 	bl	8009ecc <__sinit>
 8009bd2:	4b2e      	ldr	r3, [pc, #184]	; (8009c8c <__swsetup_r+0xd0>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d10f      	bne.n	8009bf8 <__swsetup_r+0x3c>
 8009bd8:	686c      	ldr	r4, [r5, #4]
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009be0:	0719      	lsls	r1, r3, #28
 8009be2:	d42c      	bmi.n	8009c3e <__swsetup_r+0x82>
 8009be4:	06dd      	lsls	r5, r3, #27
 8009be6:	d411      	bmi.n	8009c0c <__swsetup_r+0x50>
 8009be8:	2309      	movs	r3, #9
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bf0:	81a3      	strh	r3, [r4, #12]
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bf6:	e03e      	b.n	8009c76 <__swsetup_r+0xba>
 8009bf8:	4b25      	ldr	r3, [pc, #148]	; (8009c90 <__swsetup_r+0xd4>)
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	d101      	bne.n	8009c02 <__swsetup_r+0x46>
 8009bfe:	68ac      	ldr	r4, [r5, #8]
 8009c00:	e7eb      	b.n	8009bda <__swsetup_r+0x1e>
 8009c02:	4b24      	ldr	r3, [pc, #144]	; (8009c94 <__swsetup_r+0xd8>)
 8009c04:	429c      	cmp	r4, r3
 8009c06:	bf08      	it	eq
 8009c08:	68ec      	ldreq	r4, [r5, #12]
 8009c0a:	e7e6      	b.n	8009bda <__swsetup_r+0x1e>
 8009c0c:	0758      	lsls	r0, r3, #29
 8009c0e:	d512      	bpl.n	8009c36 <__swsetup_r+0x7a>
 8009c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c12:	b141      	cbz	r1, 8009c26 <__swsetup_r+0x6a>
 8009c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c18:	4299      	cmp	r1, r3
 8009c1a:	d002      	beq.n	8009c22 <__swsetup_r+0x66>
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f000 fa5b 	bl	800a0d8 <_free_r>
 8009c22:	2300      	movs	r3, #0
 8009c24:	6363      	str	r3, [r4, #52]	; 0x34
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6063      	str	r3, [r4, #4]
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f043 0308 	orr.w	r3, r3, #8
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	b94b      	cbnz	r3, 8009c56 <__swsetup_r+0x9a>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c4c:	d003      	beq.n	8009c56 <__swsetup_r+0x9a>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4630      	mov	r0, r6
 8009c52:	f000 fa01 	bl	800a058 <__smakebuf_r>
 8009c56:	89a0      	ldrh	r0, [r4, #12]
 8009c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c5c:	f010 0301 	ands.w	r3, r0, #1
 8009c60:	d00a      	beq.n	8009c78 <__swsetup_r+0xbc>
 8009c62:	2300      	movs	r3, #0
 8009c64:	60a3      	str	r3, [r4, #8]
 8009c66:	6963      	ldr	r3, [r4, #20]
 8009c68:	425b      	negs	r3, r3
 8009c6a:	61a3      	str	r3, [r4, #24]
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	b943      	cbnz	r3, 8009c82 <__swsetup_r+0xc6>
 8009c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c74:	d1ba      	bne.n	8009bec <__swsetup_r+0x30>
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	0781      	lsls	r1, r0, #30
 8009c7a:	bf58      	it	pl
 8009c7c:	6963      	ldrpl	r3, [r4, #20]
 8009c7e:	60a3      	str	r3, [r4, #8]
 8009c80:	e7f4      	b.n	8009c6c <__swsetup_r+0xb0>
 8009c82:	2000      	movs	r0, #0
 8009c84:	e7f7      	b.n	8009c76 <__swsetup_r+0xba>
 8009c86:	bf00      	nop
 8009c88:	20000028 	.word	0x20000028
 8009c8c:	0800ce64 	.word	0x0800ce64
 8009c90:	0800ce84 	.word	0x0800ce84
 8009c94:	0800ce44 	.word	0x0800ce44

08009c98 <__sflush_r>:
 8009c98:	898a      	ldrh	r2, [r1, #12]
 8009c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	0710      	lsls	r0, r2, #28
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	d458      	bmi.n	8009d58 <__sflush_r+0xc0>
 8009ca6:	684b      	ldr	r3, [r1, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dc05      	bgt.n	8009cb8 <__sflush_r+0x20>
 8009cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	dc02      	bgt.n	8009cb8 <__sflush_r+0x20>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cba:	2e00      	cmp	r6, #0
 8009cbc:	d0f9      	beq.n	8009cb2 <__sflush_r+0x1a>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cc4:	682f      	ldr	r7, [r5, #0]
 8009cc6:	602b      	str	r3, [r5, #0]
 8009cc8:	d032      	beq.n	8009d30 <__sflush_r+0x98>
 8009cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	075a      	lsls	r2, r3, #29
 8009cd0:	d505      	bpl.n	8009cde <__sflush_r+0x46>
 8009cd2:	6863      	ldr	r3, [r4, #4]
 8009cd4:	1ac0      	subs	r0, r0, r3
 8009cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cd8:	b10b      	cbz	r3, 8009cde <__sflush_r+0x46>
 8009cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cdc:	1ac0      	subs	r0, r0, r3
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ce4:	6a21      	ldr	r1, [r4, #32]
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b0      	blx	r6
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	d106      	bne.n	8009cfe <__sflush_r+0x66>
 8009cf0:	6829      	ldr	r1, [r5, #0]
 8009cf2:	291d      	cmp	r1, #29
 8009cf4:	d82c      	bhi.n	8009d50 <__sflush_r+0xb8>
 8009cf6:	4a2a      	ldr	r2, [pc, #168]	; (8009da0 <__sflush_r+0x108>)
 8009cf8:	40ca      	lsrs	r2, r1
 8009cfa:	07d6      	lsls	r6, r2, #31
 8009cfc:	d528      	bpl.n	8009d50 <__sflush_r+0xb8>
 8009cfe:	2200      	movs	r2, #0
 8009d00:	6062      	str	r2, [r4, #4]
 8009d02:	04d9      	lsls	r1, r3, #19
 8009d04:	6922      	ldr	r2, [r4, #16]
 8009d06:	6022      	str	r2, [r4, #0]
 8009d08:	d504      	bpl.n	8009d14 <__sflush_r+0x7c>
 8009d0a:	1c42      	adds	r2, r0, #1
 8009d0c:	d101      	bne.n	8009d12 <__sflush_r+0x7a>
 8009d0e:	682b      	ldr	r3, [r5, #0]
 8009d10:	b903      	cbnz	r3, 8009d14 <__sflush_r+0x7c>
 8009d12:	6560      	str	r0, [r4, #84]	; 0x54
 8009d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d16:	602f      	str	r7, [r5, #0]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d0ca      	beq.n	8009cb2 <__sflush_r+0x1a>
 8009d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d20:	4299      	cmp	r1, r3
 8009d22:	d002      	beq.n	8009d2a <__sflush_r+0x92>
 8009d24:	4628      	mov	r0, r5
 8009d26:	f000 f9d7 	bl	800a0d8 <_free_r>
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d2e:	e7c1      	b.n	8009cb4 <__sflush_r+0x1c>
 8009d30:	6a21      	ldr	r1, [r4, #32]
 8009d32:	2301      	movs	r3, #1
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b0      	blx	r6
 8009d38:	1c41      	adds	r1, r0, #1
 8009d3a:	d1c7      	bne.n	8009ccc <__sflush_r+0x34>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0c4      	beq.n	8009ccc <__sflush_r+0x34>
 8009d42:	2b1d      	cmp	r3, #29
 8009d44:	d001      	beq.n	8009d4a <__sflush_r+0xb2>
 8009d46:	2b16      	cmp	r3, #22
 8009d48:	d101      	bne.n	8009d4e <__sflush_r+0xb6>
 8009d4a:	602f      	str	r7, [r5, #0]
 8009d4c:	e7b1      	b.n	8009cb2 <__sflush_r+0x1a>
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	e7ad      	b.n	8009cb4 <__sflush_r+0x1c>
 8009d58:	690f      	ldr	r7, [r1, #16]
 8009d5a:	2f00      	cmp	r7, #0
 8009d5c:	d0a9      	beq.n	8009cb2 <__sflush_r+0x1a>
 8009d5e:	0793      	lsls	r3, r2, #30
 8009d60:	680e      	ldr	r6, [r1, #0]
 8009d62:	bf08      	it	eq
 8009d64:	694b      	ldreq	r3, [r1, #20]
 8009d66:	600f      	str	r7, [r1, #0]
 8009d68:	bf18      	it	ne
 8009d6a:	2300      	movne	r3, #0
 8009d6c:	eba6 0807 	sub.w	r8, r6, r7
 8009d70:	608b      	str	r3, [r1, #8]
 8009d72:	f1b8 0f00 	cmp.w	r8, #0
 8009d76:	dd9c      	ble.n	8009cb2 <__sflush_r+0x1a>
 8009d78:	6a21      	ldr	r1, [r4, #32]
 8009d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d7c:	4643      	mov	r3, r8
 8009d7e:	463a      	mov	r2, r7
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b0      	blx	r6
 8009d84:	2800      	cmp	r0, #0
 8009d86:	dc06      	bgt.n	8009d96 <__sflush_r+0xfe>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d94:	e78e      	b.n	8009cb4 <__sflush_r+0x1c>
 8009d96:	4407      	add	r7, r0
 8009d98:	eba8 0800 	sub.w	r8, r8, r0
 8009d9c:	e7e9      	b.n	8009d72 <__sflush_r+0xda>
 8009d9e:	bf00      	nop
 8009da0:	20400001 	.word	0x20400001

08009da4 <_fflush_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	690b      	ldr	r3, [r1, #16]
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	b913      	cbnz	r3, 8009db4 <_fflush_r+0x10>
 8009dae:	2500      	movs	r5, #0
 8009db0:	4628      	mov	r0, r5
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	b118      	cbz	r0, 8009dbe <_fflush_r+0x1a>
 8009db6:	6983      	ldr	r3, [r0, #24]
 8009db8:	b90b      	cbnz	r3, 8009dbe <_fflush_r+0x1a>
 8009dba:	f000 f887 	bl	8009ecc <__sinit>
 8009dbe:	4b14      	ldr	r3, [pc, #80]	; (8009e10 <_fflush_r+0x6c>)
 8009dc0:	429c      	cmp	r4, r3
 8009dc2:	d11b      	bne.n	8009dfc <_fflush_r+0x58>
 8009dc4:	686c      	ldr	r4, [r5, #4]
 8009dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0ef      	beq.n	8009dae <_fflush_r+0xa>
 8009dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dd0:	07d0      	lsls	r0, r2, #31
 8009dd2:	d404      	bmi.n	8009dde <_fflush_r+0x3a>
 8009dd4:	0599      	lsls	r1, r3, #22
 8009dd6:	d402      	bmi.n	8009dde <_fflush_r+0x3a>
 8009dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dda:	f000 f915 	bl	800a008 <__retarget_lock_acquire_recursive>
 8009dde:	4628      	mov	r0, r5
 8009de0:	4621      	mov	r1, r4
 8009de2:	f7ff ff59 	bl	8009c98 <__sflush_r>
 8009de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009de8:	07da      	lsls	r2, r3, #31
 8009dea:	4605      	mov	r5, r0
 8009dec:	d4e0      	bmi.n	8009db0 <_fflush_r+0xc>
 8009dee:	89a3      	ldrh	r3, [r4, #12]
 8009df0:	059b      	lsls	r3, r3, #22
 8009df2:	d4dd      	bmi.n	8009db0 <_fflush_r+0xc>
 8009df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009df6:	f000 f908 	bl	800a00a <__retarget_lock_release_recursive>
 8009dfa:	e7d9      	b.n	8009db0 <_fflush_r+0xc>
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <_fflush_r+0x70>)
 8009dfe:	429c      	cmp	r4, r3
 8009e00:	d101      	bne.n	8009e06 <_fflush_r+0x62>
 8009e02:	68ac      	ldr	r4, [r5, #8]
 8009e04:	e7df      	b.n	8009dc6 <_fflush_r+0x22>
 8009e06:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <_fflush_r+0x74>)
 8009e08:	429c      	cmp	r4, r3
 8009e0a:	bf08      	it	eq
 8009e0c:	68ec      	ldreq	r4, [r5, #12]
 8009e0e:	e7da      	b.n	8009dc6 <_fflush_r+0x22>
 8009e10:	0800ce64 	.word	0x0800ce64
 8009e14:	0800ce84 	.word	0x0800ce84
 8009e18:	0800ce44 	.word	0x0800ce44

08009e1c <std>:
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	b510      	push	{r4, lr}
 8009e20:	4604      	mov	r4, r0
 8009e22:	e9c0 3300 	strd	r3, r3, [r0]
 8009e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e2a:	6083      	str	r3, [r0, #8]
 8009e2c:	8181      	strh	r1, [r0, #12]
 8009e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e30:	81c2      	strh	r2, [r0, #14]
 8009e32:	6183      	str	r3, [r0, #24]
 8009e34:	4619      	mov	r1, r3
 8009e36:	2208      	movs	r2, #8
 8009e38:	305c      	adds	r0, #92	; 0x5c
 8009e3a:	f7ff fdd7 	bl	80099ec <memset>
 8009e3e:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <std+0x38>)
 8009e40:	6263      	str	r3, [r4, #36]	; 0x24
 8009e42:	4b05      	ldr	r3, [pc, #20]	; (8009e58 <std+0x3c>)
 8009e44:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <std+0x40>)
 8009e48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e4a:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <std+0x44>)
 8009e4c:	6224      	str	r4, [r4, #32]
 8009e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	bf00      	nop
 8009e54:	0800a895 	.word	0x0800a895
 8009e58:	0800a8b7 	.word	0x0800a8b7
 8009e5c:	0800a8ef 	.word	0x0800a8ef
 8009e60:	0800a913 	.word	0x0800a913

08009e64 <_cleanup_r>:
 8009e64:	4901      	ldr	r1, [pc, #4]	; (8009e6c <_cleanup_r+0x8>)
 8009e66:	f000 b8af 	b.w	8009fc8 <_fwalk_reent>
 8009e6a:	bf00      	nop
 8009e6c:	08009da5 	.word	0x08009da5

08009e70 <__sfmoreglue>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	2268      	movs	r2, #104	; 0x68
 8009e74:	1e4d      	subs	r5, r1, #1
 8009e76:	4355      	muls	r5, r2
 8009e78:	460e      	mov	r6, r1
 8009e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e7e:	f000 f997 	bl	800a1b0 <_malloc_r>
 8009e82:	4604      	mov	r4, r0
 8009e84:	b140      	cbz	r0, 8009e98 <__sfmoreglue+0x28>
 8009e86:	2100      	movs	r1, #0
 8009e88:	e9c0 1600 	strd	r1, r6, [r0]
 8009e8c:	300c      	adds	r0, #12
 8009e8e:	60a0      	str	r0, [r4, #8]
 8009e90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e94:	f7ff fdaa 	bl	80099ec <memset>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}

08009e9c <__sfp_lock_acquire>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__sfp_lock_acquire+0x8>)
 8009e9e:	f000 b8b3 	b.w	800a008 <__retarget_lock_acquire_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	200045a9 	.word	0x200045a9

08009ea8 <__sfp_lock_release>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__sfp_lock_release+0x8>)
 8009eaa:	f000 b8ae 	b.w	800a00a <__retarget_lock_release_recursive>
 8009eae:	bf00      	nop
 8009eb0:	200045a9 	.word	0x200045a9

08009eb4 <__sinit_lock_acquire>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__sinit_lock_acquire+0x8>)
 8009eb6:	f000 b8a7 	b.w	800a008 <__retarget_lock_acquire_recursive>
 8009eba:	bf00      	nop
 8009ebc:	200045aa 	.word	0x200045aa

08009ec0 <__sinit_lock_release>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__sinit_lock_release+0x8>)
 8009ec2:	f000 b8a2 	b.w	800a00a <__retarget_lock_release_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	200045aa 	.word	0x200045aa

08009ecc <__sinit>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4604      	mov	r4, r0
 8009ed0:	f7ff fff0 	bl	8009eb4 <__sinit_lock_acquire>
 8009ed4:	69a3      	ldr	r3, [r4, #24]
 8009ed6:	b11b      	cbz	r3, 8009ee0 <__sinit+0x14>
 8009ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009edc:	f7ff bff0 	b.w	8009ec0 <__sinit_lock_release>
 8009ee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ee6:	4b13      	ldr	r3, [pc, #76]	; (8009f34 <__sinit+0x68>)
 8009ee8:	4a13      	ldr	r2, [pc, #76]	; (8009f38 <__sinit+0x6c>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8009eee:	42a3      	cmp	r3, r4
 8009ef0:	bf04      	itt	eq
 8009ef2:	2301      	moveq	r3, #1
 8009ef4:	61a3      	streq	r3, [r4, #24]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f820 	bl	8009f3c <__sfp>
 8009efc:	6060      	str	r0, [r4, #4]
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f81c 	bl	8009f3c <__sfp>
 8009f04:	60a0      	str	r0, [r4, #8]
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f818 	bl	8009f3c <__sfp>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	60e0      	str	r0, [r4, #12]
 8009f10:	2104      	movs	r1, #4
 8009f12:	6860      	ldr	r0, [r4, #4]
 8009f14:	f7ff ff82 	bl	8009e1c <std>
 8009f18:	68a0      	ldr	r0, [r4, #8]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	2109      	movs	r1, #9
 8009f1e:	f7ff ff7d 	bl	8009e1c <std>
 8009f22:	68e0      	ldr	r0, [r4, #12]
 8009f24:	2202      	movs	r2, #2
 8009f26:	2112      	movs	r1, #18
 8009f28:	f7ff ff78 	bl	8009e1c <std>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	61a3      	str	r3, [r4, #24]
 8009f30:	e7d2      	b.n	8009ed8 <__sinit+0xc>
 8009f32:	bf00      	nop
 8009f34:	0800ce40 	.word	0x0800ce40
 8009f38:	08009e65 	.word	0x08009e65

08009f3c <__sfp>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	4607      	mov	r7, r0
 8009f40:	f7ff ffac 	bl	8009e9c <__sfp_lock_acquire>
 8009f44:	4b1e      	ldr	r3, [pc, #120]	; (8009fc0 <__sfp+0x84>)
 8009f46:	681e      	ldr	r6, [r3, #0]
 8009f48:	69b3      	ldr	r3, [r6, #24]
 8009f4a:	b913      	cbnz	r3, 8009f52 <__sfp+0x16>
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff ffbd 	bl	8009ecc <__sinit>
 8009f52:	3648      	adds	r6, #72	; 0x48
 8009f54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	d503      	bpl.n	8009f64 <__sfp+0x28>
 8009f5c:	6833      	ldr	r3, [r6, #0]
 8009f5e:	b30b      	cbz	r3, 8009fa4 <__sfp+0x68>
 8009f60:	6836      	ldr	r6, [r6, #0]
 8009f62:	e7f7      	b.n	8009f54 <__sfp+0x18>
 8009f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f68:	b9d5      	cbnz	r5, 8009fa0 <__sfp+0x64>
 8009f6a:	4b16      	ldr	r3, [pc, #88]	; (8009fc4 <__sfp+0x88>)
 8009f6c:	60e3      	str	r3, [r4, #12]
 8009f6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f72:	6665      	str	r5, [r4, #100]	; 0x64
 8009f74:	f000 f847 	bl	800a006 <__retarget_lock_init_recursive>
 8009f78:	f7ff ff96 	bl	8009ea8 <__sfp_lock_release>
 8009f7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f84:	6025      	str	r5, [r4, #0]
 8009f86:	61a5      	str	r5, [r4, #24]
 8009f88:	2208      	movs	r2, #8
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f90:	f7ff fd2c 	bl	80099ec <memset>
 8009f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fa0:	3468      	adds	r4, #104	; 0x68
 8009fa2:	e7d9      	b.n	8009f58 <__sfp+0x1c>
 8009fa4:	2104      	movs	r1, #4
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	f7ff ff62 	bl	8009e70 <__sfmoreglue>
 8009fac:	4604      	mov	r4, r0
 8009fae:	6030      	str	r0, [r6, #0]
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d1d5      	bne.n	8009f60 <__sfp+0x24>
 8009fb4:	f7ff ff78 	bl	8009ea8 <__sfp_lock_release>
 8009fb8:	230c      	movs	r3, #12
 8009fba:	603b      	str	r3, [r7, #0]
 8009fbc:	e7ee      	b.n	8009f9c <__sfp+0x60>
 8009fbe:	bf00      	nop
 8009fc0:	0800ce40 	.word	0x0800ce40
 8009fc4:	ffff0001 	.word	0xffff0001

08009fc8 <_fwalk_reent>:
 8009fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fcc:	4606      	mov	r6, r0
 8009fce:	4688      	mov	r8, r1
 8009fd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fd4:	2700      	movs	r7, #0
 8009fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fda:	f1b9 0901 	subs.w	r9, r9, #1
 8009fde:	d505      	bpl.n	8009fec <_fwalk_reent+0x24>
 8009fe0:	6824      	ldr	r4, [r4, #0]
 8009fe2:	2c00      	cmp	r4, #0
 8009fe4:	d1f7      	bne.n	8009fd6 <_fwalk_reent+0xe>
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fec:	89ab      	ldrh	r3, [r5, #12]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d907      	bls.n	800a002 <_fwalk_reent+0x3a>
 8009ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	d003      	beq.n	800a002 <_fwalk_reent+0x3a>
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	47c0      	blx	r8
 800a000:	4307      	orrs	r7, r0
 800a002:	3568      	adds	r5, #104	; 0x68
 800a004:	e7e9      	b.n	8009fda <_fwalk_reent+0x12>

0800a006 <__retarget_lock_init_recursive>:
 800a006:	4770      	bx	lr

0800a008 <__retarget_lock_acquire_recursive>:
 800a008:	4770      	bx	lr

0800a00a <__retarget_lock_release_recursive>:
 800a00a:	4770      	bx	lr

0800a00c <__swhatbuf_r>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	460e      	mov	r6, r1
 800a010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a014:	2900      	cmp	r1, #0
 800a016:	b096      	sub	sp, #88	; 0x58
 800a018:	4614      	mov	r4, r2
 800a01a:	461d      	mov	r5, r3
 800a01c:	da08      	bge.n	800a030 <__swhatbuf_r+0x24>
 800a01e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	602a      	str	r2, [r5, #0]
 800a026:	061a      	lsls	r2, r3, #24
 800a028:	d410      	bmi.n	800a04c <__swhatbuf_r+0x40>
 800a02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a02e:	e00e      	b.n	800a04e <__swhatbuf_r+0x42>
 800a030:	466a      	mov	r2, sp
 800a032:	f000 fc95 	bl	800a960 <_fstat_r>
 800a036:	2800      	cmp	r0, #0
 800a038:	dbf1      	blt.n	800a01e <__swhatbuf_r+0x12>
 800a03a:	9a01      	ldr	r2, [sp, #4]
 800a03c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a040:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a044:	425a      	negs	r2, r3
 800a046:	415a      	adcs	r2, r3
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	e7ee      	b.n	800a02a <__swhatbuf_r+0x1e>
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	2000      	movs	r0, #0
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	b016      	add	sp, #88	; 0x58
 800a054:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a058 <__smakebuf_r>:
 800a058:	898b      	ldrh	r3, [r1, #12]
 800a05a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a05c:	079d      	lsls	r5, r3, #30
 800a05e:	4606      	mov	r6, r0
 800a060:	460c      	mov	r4, r1
 800a062:	d507      	bpl.n	800a074 <__smakebuf_r+0x1c>
 800a064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	2301      	movs	r3, #1
 800a06e:	6163      	str	r3, [r4, #20]
 800a070:	b002      	add	sp, #8
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	ab01      	add	r3, sp, #4
 800a076:	466a      	mov	r2, sp
 800a078:	f7ff ffc8 	bl	800a00c <__swhatbuf_r>
 800a07c:	9900      	ldr	r1, [sp, #0]
 800a07e:	4605      	mov	r5, r0
 800a080:	4630      	mov	r0, r6
 800a082:	f000 f895 	bl	800a1b0 <_malloc_r>
 800a086:	b948      	cbnz	r0, 800a09c <__smakebuf_r+0x44>
 800a088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a08c:	059a      	lsls	r2, r3, #22
 800a08e:	d4ef      	bmi.n	800a070 <__smakebuf_r+0x18>
 800a090:	f023 0303 	bic.w	r3, r3, #3
 800a094:	f043 0302 	orr.w	r3, r3, #2
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	e7e3      	b.n	800a064 <__smakebuf_r+0xc>
 800a09c:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <__smakebuf_r+0x7c>)
 800a09e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	6020      	str	r0, [r4, #0]
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	9b00      	ldr	r3, [sp, #0]
 800a0ac:	6163      	str	r3, [r4, #20]
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	6120      	str	r0, [r4, #16]
 800a0b2:	b15b      	cbz	r3, 800a0cc <__smakebuf_r+0x74>
 800a0b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 fc63 	bl	800a984 <_isatty_r>
 800a0be:	b128      	cbz	r0, 800a0cc <__smakebuf_r+0x74>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f023 0303 	bic.w	r3, r3, #3
 800a0c6:	f043 0301 	orr.w	r3, r3, #1
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	89a0      	ldrh	r0, [r4, #12]
 800a0ce:	4305      	orrs	r5, r0
 800a0d0:	81a5      	strh	r5, [r4, #12]
 800a0d2:	e7cd      	b.n	800a070 <__smakebuf_r+0x18>
 800a0d4:	08009e65 	.word	0x08009e65

0800a0d8 <_free_r>:
 800a0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	d044      	beq.n	800a168 <_free_r+0x90>
 800a0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e2:	9001      	str	r0, [sp, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a0ea:	bfb8      	it	lt
 800a0ec:	18e4      	addlt	r4, r4, r3
 800a0ee:	f000 fc6b 	bl	800a9c8 <__malloc_lock>
 800a0f2:	4a1e      	ldr	r2, [pc, #120]	; (800a16c <_free_r+0x94>)
 800a0f4:	9801      	ldr	r0, [sp, #4]
 800a0f6:	6813      	ldr	r3, [r2, #0]
 800a0f8:	b933      	cbnz	r3, 800a108 <_free_r+0x30>
 800a0fa:	6063      	str	r3, [r4, #4]
 800a0fc:	6014      	str	r4, [r2, #0]
 800a0fe:	b003      	add	sp, #12
 800a100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a104:	f000 bc66 	b.w	800a9d4 <__malloc_unlock>
 800a108:	42a3      	cmp	r3, r4
 800a10a:	d908      	bls.n	800a11e <_free_r+0x46>
 800a10c:	6825      	ldr	r5, [r4, #0]
 800a10e:	1961      	adds	r1, r4, r5
 800a110:	428b      	cmp	r3, r1
 800a112:	bf01      	itttt	eq
 800a114:	6819      	ldreq	r1, [r3, #0]
 800a116:	685b      	ldreq	r3, [r3, #4]
 800a118:	1949      	addeq	r1, r1, r5
 800a11a:	6021      	streq	r1, [r4, #0]
 800a11c:	e7ed      	b.n	800a0fa <_free_r+0x22>
 800a11e:	461a      	mov	r2, r3
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	b10b      	cbz	r3, 800a128 <_free_r+0x50>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d9fa      	bls.n	800a11e <_free_r+0x46>
 800a128:	6811      	ldr	r1, [r2, #0]
 800a12a:	1855      	adds	r5, r2, r1
 800a12c:	42a5      	cmp	r5, r4
 800a12e:	d10b      	bne.n	800a148 <_free_r+0x70>
 800a130:	6824      	ldr	r4, [r4, #0]
 800a132:	4421      	add	r1, r4
 800a134:	1854      	adds	r4, r2, r1
 800a136:	42a3      	cmp	r3, r4
 800a138:	6011      	str	r1, [r2, #0]
 800a13a:	d1e0      	bne.n	800a0fe <_free_r+0x26>
 800a13c:	681c      	ldr	r4, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	6053      	str	r3, [r2, #4]
 800a142:	4421      	add	r1, r4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	e7da      	b.n	800a0fe <_free_r+0x26>
 800a148:	d902      	bls.n	800a150 <_free_r+0x78>
 800a14a:	230c      	movs	r3, #12
 800a14c:	6003      	str	r3, [r0, #0]
 800a14e:	e7d6      	b.n	800a0fe <_free_r+0x26>
 800a150:	6825      	ldr	r5, [r4, #0]
 800a152:	1961      	adds	r1, r4, r5
 800a154:	428b      	cmp	r3, r1
 800a156:	bf04      	itt	eq
 800a158:	6819      	ldreq	r1, [r3, #0]
 800a15a:	685b      	ldreq	r3, [r3, #4]
 800a15c:	6063      	str	r3, [r4, #4]
 800a15e:	bf04      	itt	eq
 800a160:	1949      	addeq	r1, r1, r5
 800a162:	6021      	streq	r1, [r4, #0]
 800a164:	6054      	str	r4, [r2, #4]
 800a166:	e7ca      	b.n	800a0fe <_free_r+0x26>
 800a168:	b003      	add	sp, #12
 800a16a:	bd30      	pop	{r4, r5, pc}
 800a16c:	200045ac 	.word	0x200045ac

0800a170 <sbrk_aligned>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	4e0e      	ldr	r6, [pc, #56]	; (800a1ac <sbrk_aligned+0x3c>)
 800a174:	460c      	mov	r4, r1
 800a176:	6831      	ldr	r1, [r6, #0]
 800a178:	4605      	mov	r5, r0
 800a17a:	b911      	cbnz	r1, 800a182 <sbrk_aligned+0x12>
 800a17c:	f000 fb7a 	bl	800a874 <_sbrk_r>
 800a180:	6030      	str	r0, [r6, #0]
 800a182:	4621      	mov	r1, r4
 800a184:	4628      	mov	r0, r5
 800a186:	f000 fb75 	bl	800a874 <_sbrk_r>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	d00a      	beq.n	800a1a4 <sbrk_aligned+0x34>
 800a18e:	1cc4      	adds	r4, r0, #3
 800a190:	f024 0403 	bic.w	r4, r4, #3
 800a194:	42a0      	cmp	r0, r4
 800a196:	d007      	beq.n	800a1a8 <sbrk_aligned+0x38>
 800a198:	1a21      	subs	r1, r4, r0
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 fb6a 	bl	800a874 <_sbrk_r>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d101      	bne.n	800a1a8 <sbrk_aligned+0x38>
 800a1a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	200045b0 	.word	0x200045b0

0800a1b0 <_malloc_r>:
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	1ccd      	adds	r5, r1, #3
 800a1b6:	f025 0503 	bic.w	r5, r5, #3
 800a1ba:	3508      	adds	r5, #8
 800a1bc:	2d0c      	cmp	r5, #12
 800a1be:	bf38      	it	cc
 800a1c0:	250c      	movcc	r5, #12
 800a1c2:	2d00      	cmp	r5, #0
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	db01      	blt.n	800a1cc <_malloc_r+0x1c>
 800a1c8:	42a9      	cmp	r1, r5
 800a1ca:	d905      	bls.n	800a1d8 <_malloc_r+0x28>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	2600      	movs	r6, #0
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d8:	4e2e      	ldr	r6, [pc, #184]	; (800a294 <_malloc_r+0xe4>)
 800a1da:	f000 fbf5 	bl	800a9c8 <__malloc_lock>
 800a1de:	6833      	ldr	r3, [r6, #0]
 800a1e0:	461c      	mov	r4, r3
 800a1e2:	bb34      	cbnz	r4, 800a232 <_malloc_r+0x82>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f7ff ffc2 	bl	800a170 <sbrk_aligned>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	d14d      	bne.n	800a28e <_malloc_r+0xde>
 800a1f2:	6834      	ldr	r4, [r6, #0]
 800a1f4:	4626      	mov	r6, r4
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	d140      	bne.n	800a27c <_malloc_r+0xcc>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4638      	mov	r0, r7
 800a200:	eb04 0803 	add.w	r8, r4, r3
 800a204:	f000 fb36 	bl	800a874 <_sbrk_r>
 800a208:	4580      	cmp	r8, r0
 800a20a:	d13a      	bne.n	800a282 <_malloc_r+0xd2>
 800a20c:	6821      	ldr	r1, [r4, #0]
 800a20e:	3503      	adds	r5, #3
 800a210:	1a6d      	subs	r5, r5, r1
 800a212:	f025 0503 	bic.w	r5, r5, #3
 800a216:	3508      	adds	r5, #8
 800a218:	2d0c      	cmp	r5, #12
 800a21a:	bf38      	it	cc
 800a21c:	250c      	movcc	r5, #12
 800a21e:	4629      	mov	r1, r5
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ffa5 	bl	800a170 <sbrk_aligned>
 800a226:	3001      	adds	r0, #1
 800a228:	d02b      	beq.n	800a282 <_malloc_r+0xd2>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	442b      	add	r3, r5
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	e00e      	b.n	800a250 <_malloc_r+0xa0>
 800a232:	6822      	ldr	r2, [r4, #0]
 800a234:	1b52      	subs	r2, r2, r5
 800a236:	d41e      	bmi.n	800a276 <_malloc_r+0xc6>
 800a238:	2a0b      	cmp	r2, #11
 800a23a:	d916      	bls.n	800a26a <_malloc_r+0xba>
 800a23c:	1961      	adds	r1, r4, r5
 800a23e:	42a3      	cmp	r3, r4
 800a240:	6025      	str	r5, [r4, #0]
 800a242:	bf18      	it	ne
 800a244:	6059      	strne	r1, [r3, #4]
 800a246:	6863      	ldr	r3, [r4, #4]
 800a248:	bf08      	it	eq
 800a24a:	6031      	streq	r1, [r6, #0]
 800a24c:	5162      	str	r2, [r4, r5]
 800a24e:	604b      	str	r3, [r1, #4]
 800a250:	4638      	mov	r0, r7
 800a252:	f104 060b 	add.w	r6, r4, #11
 800a256:	f000 fbbd 	bl	800a9d4 <__malloc_unlock>
 800a25a:	f026 0607 	bic.w	r6, r6, #7
 800a25e:	1d23      	adds	r3, r4, #4
 800a260:	1af2      	subs	r2, r6, r3
 800a262:	d0b6      	beq.n	800a1d2 <_malloc_r+0x22>
 800a264:	1b9b      	subs	r3, r3, r6
 800a266:	50a3      	str	r3, [r4, r2]
 800a268:	e7b3      	b.n	800a1d2 <_malloc_r+0x22>
 800a26a:	6862      	ldr	r2, [r4, #4]
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	bf0c      	ite	eq
 800a270:	6032      	streq	r2, [r6, #0]
 800a272:	605a      	strne	r2, [r3, #4]
 800a274:	e7ec      	b.n	800a250 <_malloc_r+0xa0>
 800a276:	4623      	mov	r3, r4
 800a278:	6864      	ldr	r4, [r4, #4]
 800a27a:	e7b2      	b.n	800a1e2 <_malloc_r+0x32>
 800a27c:	4634      	mov	r4, r6
 800a27e:	6876      	ldr	r6, [r6, #4]
 800a280:	e7b9      	b.n	800a1f6 <_malloc_r+0x46>
 800a282:	230c      	movs	r3, #12
 800a284:	603b      	str	r3, [r7, #0]
 800a286:	4638      	mov	r0, r7
 800a288:	f000 fba4 	bl	800a9d4 <__malloc_unlock>
 800a28c:	e7a1      	b.n	800a1d2 <_malloc_r+0x22>
 800a28e:	6025      	str	r5, [r4, #0]
 800a290:	e7de      	b.n	800a250 <_malloc_r+0xa0>
 800a292:	bf00      	nop
 800a294:	200045ac 	.word	0x200045ac

0800a298 <__sfputc_r>:
 800a298:	6893      	ldr	r3, [r2, #8]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	b410      	push	{r4}
 800a2a0:	6093      	str	r3, [r2, #8]
 800a2a2:	da08      	bge.n	800a2b6 <__sfputc_r+0x1e>
 800a2a4:	6994      	ldr	r4, [r2, #24]
 800a2a6:	42a3      	cmp	r3, r4
 800a2a8:	db01      	blt.n	800a2ae <__sfputc_r+0x16>
 800a2aa:	290a      	cmp	r1, #10
 800a2ac:	d103      	bne.n	800a2b6 <__sfputc_r+0x1e>
 800a2ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b2:	f7ff bc31 	b.w	8009b18 <__swbuf_r>
 800a2b6:	6813      	ldr	r3, [r2, #0]
 800a2b8:	1c58      	adds	r0, r3, #1
 800a2ba:	6010      	str	r0, [r2, #0]
 800a2bc:	7019      	strb	r1, [r3, #0]
 800a2be:	4608      	mov	r0, r1
 800a2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <__sfputs_r>:
 800a2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	18d5      	adds	r5, r2, r3
 800a2d0:	42ac      	cmp	r4, r5
 800a2d2:	d101      	bne.n	800a2d8 <__sfputs_r+0x12>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	e007      	b.n	800a2e8 <__sfputs_r+0x22>
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	463a      	mov	r2, r7
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f7ff ffda 	bl	800a298 <__sfputc_r>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d1f3      	bne.n	800a2d0 <__sfputs_r+0xa>
 800a2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2ec <_vfiprintf_r>:
 800a2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	b09d      	sub	sp, #116	; 0x74
 800a2f4:	4614      	mov	r4, r2
 800a2f6:	4698      	mov	r8, r3
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	b118      	cbz	r0, 800a304 <_vfiprintf_r+0x18>
 800a2fc:	6983      	ldr	r3, [r0, #24]
 800a2fe:	b90b      	cbnz	r3, 800a304 <_vfiprintf_r+0x18>
 800a300:	f7ff fde4 	bl	8009ecc <__sinit>
 800a304:	4b89      	ldr	r3, [pc, #548]	; (800a52c <_vfiprintf_r+0x240>)
 800a306:	429d      	cmp	r5, r3
 800a308:	d11b      	bne.n	800a342 <_vfiprintf_r+0x56>
 800a30a:	6875      	ldr	r5, [r6, #4]
 800a30c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a30e:	07d9      	lsls	r1, r3, #31
 800a310:	d405      	bmi.n	800a31e <_vfiprintf_r+0x32>
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	059a      	lsls	r2, r3, #22
 800a316:	d402      	bmi.n	800a31e <_vfiprintf_r+0x32>
 800a318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31a:	f7ff fe75 	bl	800a008 <__retarget_lock_acquire_recursive>
 800a31e:	89ab      	ldrh	r3, [r5, #12]
 800a320:	071b      	lsls	r3, r3, #28
 800a322:	d501      	bpl.n	800a328 <_vfiprintf_r+0x3c>
 800a324:	692b      	ldr	r3, [r5, #16]
 800a326:	b9eb      	cbnz	r3, 800a364 <_vfiprintf_r+0x78>
 800a328:	4629      	mov	r1, r5
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff fc46 	bl	8009bbc <__swsetup_r>
 800a330:	b1c0      	cbz	r0, 800a364 <_vfiprintf_r+0x78>
 800a332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a334:	07dc      	lsls	r4, r3, #31
 800a336:	d50e      	bpl.n	800a356 <_vfiprintf_r+0x6a>
 800a338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a33c:	b01d      	add	sp, #116	; 0x74
 800a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a342:	4b7b      	ldr	r3, [pc, #492]	; (800a530 <_vfiprintf_r+0x244>)
 800a344:	429d      	cmp	r5, r3
 800a346:	d101      	bne.n	800a34c <_vfiprintf_r+0x60>
 800a348:	68b5      	ldr	r5, [r6, #8]
 800a34a:	e7df      	b.n	800a30c <_vfiprintf_r+0x20>
 800a34c:	4b79      	ldr	r3, [pc, #484]	; (800a534 <_vfiprintf_r+0x248>)
 800a34e:	429d      	cmp	r5, r3
 800a350:	bf08      	it	eq
 800a352:	68f5      	ldreq	r5, [r6, #12]
 800a354:	e7da      	b.n	800a30c <_vfiprintf_r+0x20>
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	0598      	lsls	r0, r3, #22
 800a35a:	d4ed      	bmi.n	800a338 <_vfiprintf_r+0x4c>
 800a35c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a35e:	f7ff fe54 	bl	800a00a <__retarget_lock_release_recursive>
 800a362:	e7e9      	b.n	800a338 <_vfiprintf_r+0x4c>
 800a364:	2300      	movs	r3, #0
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	2320      	movs	r3, #32
 800a36a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a36e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a372:	2330      	movs	r3, #48	; 0x30
 800a374:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a538 <_vfiprintf_r+0x24c>
 800a378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a37c:	f04f 0901 	mov.w	r9, #1
 800a380:	4623      	mov	r3, r4
 800a382:	469a      	mov	sl, r3
 800a384:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a388:	b10a      	cbz	r2, 800a38e <_vfiprintf_r+0xa2>
 800a38a:	2a25      	cmp	r2, #37	; 0x25
 800a38c:	d1f9      	bne.n	800a382 <_vfiprintf_r+0x96>
 800a38e:	ebba 0b04 	subs.w	fp, sl, r4
 800a392:	d00b      	beq.n	800a3ac <_vfiprintf_r+0xc0>
 800a394:	465b      	mov	r3, fp
 800a396:	4622      	mov	r2, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ff93 	bl	800a2c6 <__sfputs_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f000 80aa 	beq.w	800a4fa <_vfiprintf_r+0x20e>
 800a3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3a8:	445a      	add	r2, fp
 800a3aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 80a2 	beq.w	800a4fa <_vfiprintf_r+0x20e>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3c0:	f10a 0a01 	add.w	sl, sl, #1
 800a3c4:	9304      	str	r3, [sp, #16]
 800a3c6:	9307      	str	r3, [sp, #28]
 800a3c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ce:	4654      	mov	r4, sl
 800a3d0:	2205      	movs	r2, #5
 800a3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d6:	4858      	ldr	r0, [pc, #352]	; (800a538 <_vfiprintf_r+0x24c>)
 800a3d8:	f7f5 fefa 	bl	80001d0 <memchr>
 800a3dc:	9a04      	ldr	r2, [sp, #16]
 800a3de:	b9d8      	cbnz	r0, 800a418 <_vfiprintf_r+0x12c>
 800a3e0:	06d1      	lsls	r1, r2, #27
 800a3e2:	bf44      	itt	mi
 800a3e4:	2320      	movmi	r3, #32
 800a3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ea:	0713      	lsls	r3, r2, #28
 800a3ec:	bf44      	itt	mi
 800a3ee:	232b      	movmi	r3, #43	; 0x2b
 800a3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fa:	d015      	beq.n	800a428 <_vfiprintf_r+0x13c>
 800a3fc:	9a07      	ldr	r2, [sp, #28]
 800a3fe:	4654      	mov	r4, sl
 800a400:	2000      	movs	r0, #0
 800a402:	f04f 0c0a 	mov.w	ip, #10
 800a406:	4621      	mov	r1, r4
 800a408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a40c:	3b30      	subs	r3, #48	; 0x30
 800a40e:	2b09      	cmp	r3, #9
 800a410:	d94e      	bls.n	800a4b0 <_vfiprintf_r+0x1c4>
 800a412:	b1b0      	cbz	r0, 800a442 <_vfiprintf_r+0x156>
 800a414:	9207      	str	r2, [sp, #28]
 800a416:	e014      	b.n	800a442 <_vfiprintf_r+0x156>
 800a418:	eba0 0308 	sub.w	r3, r0, r8
 800a41c:	fa09 f303 	lsl.w	r3, r9, r3
 800a420:	4313      	orrs	r3, r2
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	46a2      	mov	sl, r4
 800a426:	e7d2      	b.n	800a3ce <_vfiprintf_r+0xe2>
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	1d19      	adds	r1, r3, #4
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	9103      	str	r1, [sp, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	bfbb      	ittet	lt
 800a434:	425b      	neglt	r3, r3
 800a436:	f042 0202 	orrlt.w	r2, r2, #2
 800a43a:	9307      	strge	r3, [sp, #28]
 800a43c:	9307      	strlt	r3, [sp, #28]
 800a43e:	bfb8      	it	lt
 800a440:	9204      	strlt	r2, [sp, #16]
 800a442:	7823      	ldrb	r3, [r4, #0]
 800a444:	2b2e      	cmp	r3, #46	; 0x2e
 800a446:	d10c      	bne.n	800a462 <_vfiprintf_r+0x176>
 800a448:	7863      	ldrb	r3, [r4, #1]
 800a44a:	2b2a      	cmp	r3, #42	; 0x2a
 800a44c:	d135      	bne.n	800a4ba <_vfiprintf_r+0x1ce>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	1d1a      	adds	r2, r3, #4
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	9203      	str	r2, [sp, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfb8      	it	lt
 800a45a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a45e:	3402      	adds	r4, #2
 800a460:	9305      	str	r3, [sp, #20]
 800a462:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a548 <_vfiprintf_r+0x25c>
 800a466:	7821      	ldrb	r1, [r4, #0]
 800a468:	2203      	movs	r2, #3
 800a46a:	4650      	mov	r0, sl
 800a46c:	f7f5 feb0 	bl	80001d0 <memchr>
 800a470:	b140      	cbz	r0, 800a484 <_vfiprintf_r+0x198>
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	eba0 000a 	sub.w	r0, r0, sl
 800a478:	fa03 f000 	lsl.w	r0, r3, r0
 800a47c:	9b04      	ldr	r3, [sp, #16]
 800a47e:	4303      	orrs	r3, r0
 800a480:	3401      	adds	r4, #1
 800a482:	9304      	str	r3, [sp, #16]
 800a484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a488:	482c      	ldr	r0, [pc, #176]	; (800a53c <_vfiprintf_r+0x250>)
 800a48a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a48e:	2206      	movs	r2, #6
 800a490:	f7f5 fe9e 	bl	80001d0 <memchr>
 800a494:	2800      	cmp	r0, #0
 800a496:	d03f      	beq.n	800a518 <_vfiprintf_r+0x22c>
 800a498:	4b29      	ldr	r3, [pc, #164]	; (800a540 <_vfiprintf_r+0x254>)
 800a49a:	bb1b      	cbnz	r3, 800a4e4 <_vfiprintf_r+0x1f8>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	3307      	adds	r3, #7
 800a4a0:	f023 0307 	bic.w	r3, r3, #7
 800a4a4:	3308      	adds	r3, #8
 800a4a6:	9303      	str	r3, [sp, #12]
 800a4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4aa:	443b      	add	r3, r7
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	e767      	b.n	800a380 <_vfiprintf_r+0x94>
 800a4b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	e7a5      	b.n	800a406 <_vfiprintf_r+0x11a>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	3401      	adds	r4, #1
 800a4be:	9305      	str	r3, [sp, #20]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f04f 0c0a 	mov.w	ip, #10
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4cc:	3a30      	subs	r2, #48	; 0x30
 800a4ce:	2a09      	cmp	r2, #9
 800a4d0:	d903      	bls.n	800a4da <_vfiprintf_r+0x1ee>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0c5      	beq.n	800a462 <_vfiprintf_r+0x176>
 800a4d6:	9105      	str	r1, [sp, #20]
 800a4d8:	e7c3      	b.n	800a462 <_vfiprintf_r+0x176>
 800a4da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4de:	4604      	mov	r4, r0
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e7f0      	b.n	800a4c6 <_vfiprintf_r+0x1da>
 800a4e4:	ab03      	add	r3, sp, #12
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	462a      	mov	r2, r5
 800a4ea:	4b16      	ldr	r3, [pc, #88]	; (800a544 <_vfiprintf_r+0x258>)
 800a4ec:	a904      	add	r1, sp, #16
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f3af 8000 	nop.w
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	1c78      	adds	r0, r7, #1
 800a4f8:	d1d6      	bne.n	800a4a8 <_vfiprintf_r+0x1bc>
 800a4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4fc:	07d9      	lsls	r1, r3, #31
 800a4fe:	d405      	bmi.n	800a50c <_vfiprintf_r+0x220>
 800a500:	89ab      	ldrh	r3, [r5, #12]
 800a502:	059a      	lsls	r2, r3, #22
 800a504:	d402      	bmi.n	800a50c <_vfiprintf_r+0x220>
 800a506:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a508:	f7ff fd7f 	bl	800a00a <__retarget_lock_release_recursive>
 800a50c:	89ab      	ldrh	r3, [r5, #12]
 800a50e:	065b      	lsls	r3, r3, #25
 800a510:	f53f af12 	bmi.w	800a338 <_vfiprintf_r+0x4c>
 800a514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a516:	e711      	b.n	800a33c <_vfiprintf_r+0x50>
 800a518:	ab03      	add	r3, sp, #12
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	462a      	mov	r2, r5
 800a51e:	4b09      	ldr	r3, [pc, #36]	; (800a544 <_vfiprintf_r+0x258>)
 800a520:	a904      	add	r1, sp, #16
 800a522:	4630      	mov	r0, r6
 800a524:	f000 f880 	bl	800a628 <_printf_i>
 800a528:	e7e4      	b.n	800a4f4 <_vfiprintf_r+0x208>
 800a52a:	bf00      	nop
 800a52c:	0800ce64 	.word	0x0800ce64
 800a530:	0800ce84 	.word	0x0800ce84
 800a534:	0800ce44 	.word	0x0800ce44
 800a538:	0800cea4 	.word	0x0800cea4
 800a53c:	0800ceae 	.word	0x0800ceae
 800a540:	00000000 	.word	0x00000000
 800a544:	0800a2c7 	.word	0x0800a2c7
 800a548:	0800ceaa 	.word	0x0800ceaa

0800a54c <_printf_common>:
 800a54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a550:	4616      	mov	r6, r2
 800a552:	4699      	mov	r9, r3
 800a554:	688a      	ldr	r2, [r1, #8]
 800a556:	690b      	ldr	r3, [r1, #16]
 800a558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a55c:	4293      	cmp	r3, r2
 800a55e:	bfb8      	it	lt
 800a560:	4613      	movlt	r3, r2
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a568:	4607      	mov	r7, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	b10a      	cbz	r2, 800a572 <_printf_common+0x26>
 800a56e:	3301      	adds	r3, #1
 800a570:	6033      	str	r3, [r6, #0]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	0699      	lsls	r1, r3, #26
 800a576:	bf42      	ittt	mi
 800a578:	6833      	ldrmi	r3, [r6, #0]
 800a57a:	3302      	addmi	r3, #2
 800a57c:	6033      	strmi	r3, [r6, #0]
 800a57e:	6825      	ldr	r5, [r4, #0]
 800a580:	f015 0506 	ands.w	r5, r5, #6
 800a584:	d106      	bne.n	800a594 <_printf_common+0x48>
 800a586:	f104 0a19 	add.w	sl, r4, #25
 800a58a:	68e3      	ldr	r3, [r4, #12]
 800a58c:	6832      	ldr	r2, [r6, #0]
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	42ab      	cmp	r3, r5
 800a592:	dc26      	bgt.n	800a5e2 <_printf_common+0x96>
 800a594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a598:	1e13      	subs	r3, r2, #0
 800a59a:	6822      	ldr	r2, [r4, #0]
 800a59c:	bf18      	it	ne
 800a59e:	2301      	movne	r3, #1
 800a5a0:	0692      	lsls	r2, r2, #26
 800a5a2:	d42b      	bmi.n	800a5fc <_printf_common+0xb0>
 800a5a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5a8:	4649      	mov	r1, r9
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	47c0      	blx	r8
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d01e      	beq.n	800a5f0 <_printf_common+0xa4>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	68e5      	ldr	r5, [r4, #12]
 800a5b6:	6832      	ldr	r2, [r6, #0]
 800a5b8:	f003 0306 	and.w	r3, r3, #6
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	bf08      	it	eq
 800a5c0:	1aad      	subeq	r5, r5, r2
 800a5c2:	68a3      	ldr	r3, [r4, #8]
 800a5c4:	6922      	ldr	r2, [r4, #16]
 800a5c6:	bf0c      	ite	eq
 800a5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5cc:	2500      	movne	r5, #0
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	bfc4      	itt	gt
 800a5d2:	1a9b      	subgt	r3, r3, r2
 800a5d4:	18ed      	addgt	r5, r5, r3
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	341a      	adds	r4, #26
 800a5da:	42b5      	cmp	r5, r6
 800a5dc:	d11a      	bne.n	800a614 <_printf_common+0xc8>
 800a5de:	2000      	movs	r0, #0
 800a5e0:	e008      	b.n	800a5f4 <_printf_common+0xa8>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4652      	mov	r2, sl
 800a5e6:	4649      	mov	r1, r9
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	47c0      	blx	r8
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d103      	bne.n	800a5f8 <_printf_common+0xac>
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f8:	3501      	adds	r5, #1
 800a5fa:	e7c6      	b.n	800a58a <_printf_common+0x3e>
 800a5fc:	18e1      	adds	r1, r4, r3
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	2030      	movs	r0, #48	; 0x30
 800a602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a606:	4422      	add	r2, r4
 800a608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a60c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a610:	3302      	adds	r3, #2
 800a612:	e7c7      	b.n	800a5a4 <_printf_common+0x58>
 800a614:	2301      	movs	r3, #1
 800a616:	4622      	mov	r2, r4
 800a618:	4649      	mov	r1, r9
 800a61a:	4638      	mov	r0, r7
 800a61c:	47c0      	blx	r8
 800a61e:	3001      	adds	r0, #1
 800a620:	d0e6      	beq.n	800a5f0 <_printf_common+0xa4>
 800a622:	3601      	adds	r6, #1
 800a624:	e7d9      	b.n	800a5da <_printf_common+0x8e>
	...

0800a628 <_printf_i>:
 800a628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	7e0f      	ldrb	r7, [r1, #24]
 800a62e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a630:	2f78      	cmp	r7, #120	; 0x78
 800a632:	4691      	mov	r9, r2
 800a634:	4680      	mov	r8, r0
 800a636:	460c      	mov	r4, r1
 800a638:	469a      	mov	sl, r3
 800a63a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a63e:	d807      	bhi.n	800a650 <_printf_i+0x28>
 800a640:	2f62      	cmp	r7, #98	; 0x62
 800a642:	d80a      	bhi.n	800a65a <_printf_i+0x32>
 800a644:	2f00      	cmp	r7, #0
 800a646:	f000 80d8 	beq.w	800a7fa <_printf_i+0x1d2>
 800a64a:	2f58      	cmp	r7, #88	; 0x58
 800a64c:	f000 80a3 	beq.w	800a796 <_printf_i+0x16e>
 800a650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a658:	e03a      	b.n	800a6d0 <_printf_i+0xa8>
 800a65a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a65e:	2b15      	cmp	r3, #21
 800a660:	d8f6      	bhi.n	800a650 <_printf_i+0x28>
 800a662:	a101      	add	r1, pc, #4	; (adr r1, 800a668 <_printf_i+0x40>)
 800a664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a668:	0800a6c1 	.word	0x0800a6c1
 800a66c:	0800a6d5 	.word	0x0800a6d5
 800a670:	0800a651 	.word	0x0800a651
 800a674:	0800a651 	.word	0x0800a651
 800a678:	0800a651 	.word	0x0800a651
 800a67c:	0800a651 	.word	0x0800a651
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a651 	.word	0x0800a651
 800a688:	0800a651 	.word	0x0800a651
 800a68c:	0800a651 	.word	0x0800a651
 800a690:	0800a651 	.word	0x0800a651
 800a694:	0800a7e1 	.word	0x0800a7e1
 800a698:	0800a705 	.word	0x0800a705
 800a69c:	0800a7c3 	.word	0x0800a7c3
 800a6a0:	0800a651 	.word	0x0800a651
 800a6a4:	0800a651 	.word	0x0800a651
 800a6a8:	0800a803 	.word	0x0800a803
 800a6ac:	0800a651 	.word	0x0800a651
 800a6b0:	0800a705 	.word	0x0800a705
 800a6b4:	0800a651 	.word	0x0800a651
 800a6b8:	0800a651 	.word	0x0800a651
 800a6bc:	0800a7cb 	.word	0x0800a7cb
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	1d1a      	adds	r2, r3, #4
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	602a      	str	r2, [r5, #0]
 800a6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e0a3      	b.n	800a81c <_printf_i+0x1f4>
 800a6d4:	6820      	ldr	r0, [r4, #0]
 800a6d6:	6829      	ldr	r1, [r5, #0]
 800a6d8:	0606      	lsls	r6, r0, #24
 800a6da:	f101 0304 	add.w	r3, r1, #4
 800a6de:	d50a      	bpl.n	800a6f6 <_printf_i+0xce>
 800a6e0:	680e      	ldr	r6, [r1, #0]
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	2e00      	cmp	r6, #0
 800a6e6:	da03      	bge.n	800a6f0 <_printf_i+0xc8>
 800a6e8:	232d      	movs	r3, #45	; 0x2d
 800a6ea:	4276      	negs	r6, r6
 800a6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f0:	485e      	ldr	r0, [pc, #376]	; (800a86c <_printf_i+0x244>)
 800a6f2:	230a      	movs	r3, #10
 800a6f4:	e019      	b.n	800a72a <_printf_i+0x102>
 800a6f6:	680e      	ldr	r6, [r1, #0]
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6fe:	bf18      	it	ne
 800a700:	b236      	sxthne	r6, r6
 800a702:	e7ef      	b.n	800a6e4 <_printf_i+0xbc>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	6820      	ldr	r0, [r4, #0]
 800a708:	1d19      	adds	r1, r3, #4
 800a70a:	6029      	str	r1, [r5, #0]
 800a70c:	0601      	lsls	r1, r0, #24
 800a70e:	d501      	bpl.n	800a714 <_printf_i+0xec>
 800a710:	681e      	ldr	r6, [r3, #0]
 800a712:	e002      	b.n	800a71a <_printf_i+0xf2>
 800a714:	0646      	lsls	r6, r0, #25
 800a716:	d5fb      	bpl.n	800a710 <_printf_i+0xe8>
 800a718:	881e      	ldrh	r6, [r3, #0]
 800a71a:	4854      	ldr	r0, [pc, #336]	; (800a86c <_printf_i+0x244>)
 800a71c:	2f6f      	cmp	r7, #111	; 0x6f
 800a71e:	bf0c      	ite	eq
 800a720:	2308      	moveq	r3, #8
 800a722:	230a      	movne	r3, #10
 800a724:	2100      	movs	r1, #0
 800a726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a72a:	6865      	ldr	r5, [r4, #4]
 800a72c:	60a5      	str	r5, [r4, #8]
 800a72e:	2d00      	cmp	r5, #0
 800a730:	bfa2      	ittt	ge
 800a732:	6821      	ldrge	r1, [r4, #0]
 800a734:	f021 0104 	bicge.w	r1, r1, #4
 800a738:	6021      	strge	r1, [r4, #0]
 800a73a:	b90e      	cbnz	r6, 800a740 <_printf_i+0x118>
 800a73c:	2d00      	cmp	r5, #0
 800a73e:	d04d      	beq.n	800a7dc <_printf_i+0x1b4>
 800a740:	4615      	mov	r5, r2
 800a742:	fbb6 f1f3 	udiv	r1, r6, r3
 800a746:	fb03 6711 	mls	r7, r3, r1, r6
 800a74a:	5dc7      	ldrb	r7, [r0, r7]
 800a74c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a750:	4637      	mov	r7, r6
 800a752:	42bb      	cmp	r3, r7
 800a754:	460e      	mov	r6, r1
 800a756:	d9f4      	bls.n	800a742 <_printf_i+0x11a>
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d10b      	bne.n	800a774 <_printf_i+0x14c>
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	07de      	lsls	r6, r3, #31
 800a760:	d508      	bpl.n	800a774 <_printf_i+0x14c>
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	6861      	ldr	r1, [r4, #4]
 800a766:	4299      	cmp	r1, r3
 800a768:	bfde      	ittt	le
 800a76a:	2330      	movle	r3, #48	; 0x30
 800a76c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a770:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a774:	1b52      	subs	r2, r2, r5
 800a776:	6122      	str	r2, [r4, #16]
 800a778:	f8cd a000 	str.w	sl, [sp]
 800a77c:	464b      	mov	r3, r9
 800a77e:	aa03      	add	r2, sp, #12
 800a780:	4621      	mov	r1, r4
 800a782:	4640      	mov	r0, r8
 800a784:	f7ff fee2 	bl	800a54c <_printf_common>
 800a788:	3001      	adds	r0, #1
 800a78a:	d14c      	bne.n	800a826 <_printf_i+0x1fe>
 800a78c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a790:	b004      	add	sp, #16
 800a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a796:	4835      	ldr	r0, [pc, #212]	; (800a86c <_printf_i+0x244>)
 800a798:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a79c:	6829      	ldr	r1, [r5, #0]
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7a4:	6029      	str	r1, [r5, #0]
 800a7a6:	061d      	lsls	r5, r3, #24
 800a7a8:	d514      	bpl.n	800a7d4 <_printf_i+0x1ac>
 800a7aa:	07df      	lsls	r7, r3, #31
 800a7ac:	bf44      	itt	mi
 800a7ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a7b2:	6023      	strmi	r3, [r4, #0]
 800a7b4:	b91e      	cbnz	r6, 800a7be <_printf_i+0x196>
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f023 0320 	bic.w	r3, r3, #32
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	2310      	movs	r3, #16
 800a7c0:	e7b0      	b.n	800a724 <_printf_i+0xfc>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	f043 0320 	orr.w	r3, r3, #32
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	2378      	movs	r3, #120	; 0x78
 800a7cc:	4828      	ldr	r0, [pc, #160]	; (800a870 <_printf_i+0x248>)
 800a7ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7d2:	e7e3      	b.n	800a79c <_printf_i+0x174>
 800a7d4:	0659      	lsls	r1, r3, #25
 800a7d6:	bf48      	it	mi
 800a7d8:	b2b6      	uxthmi	r6, r6
 800a7da:	e7e6      	b.n	800a7aa <_printf_i+0x182>
 800a7dc:	4615      	mov	r5, r2
 800a7de:	e7bb      	b.n	800a758 <_printf_i+0x130>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	6826      	ldr	r6, [r4, #0]
 800a7e4:	6961      	ldr	r1, [r4, #20]
 800a7e6:	1d18      	adds	r0, r3, #4
 800a7e8:	6028      	str	r0, [r5, #0]
 800a7ea:	0635      	lsls	r5, r6, #24
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	d501      	bpl.n	800a7f4 <_printf_i+0x1cc>
 800a7f0:	6019      	str	r1, [r3, #0]
 800a7f2:	e002      	b.n	800a7fa <_printf_i+0x1d2>
 800a7f4:	0670      	lsls	r0, r6, #25
 800a7f6:	d5fb      	bpl.n	800a7f0 <_printf_i+0x1c8>
 800a7f8:	8019      	strh	r1, [r3, #0]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6123      	str	r3, [r4, #16]
 800a7fe:	4615      	mov	r5, r2
 800a800:	e7ba      	b.n	800a778 <_printf_i+0x150>
 800a802:	682b      	ldr	r3, [r5, #0]
 800a804:	1d1a      	adds	r2, r3, #4
 800a806:	602a      	str	r2, [r5, #0]
 800a808:	681d      	ldr	r5, [r3, #0]
 800a80a:	6862      	ldr	r2, [r4, #4]
 800a80c:	2100      	movs	r1, #0
 800a80e:	4628      	mov	r0, r5
 800a810:	f7f5 fcde 	bl	80001d0 <memchr>
 800a814:	b108      	cbz	r0, 800a81a <_printf_i+0x1f2>
 800a816:	1b40      	subs	r0, r0, r5
 800a818:	6060      	str	r0, [r4, #4]
 800a81a:	6863      	ldr	r3, [r4, #4]
 800a81c:	6123      	str	r3, [r4, #16]
 800a81e:	2300      	movs	r3, #0
 800a820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a824:	e7a8      	b.n	800a778 <_printf_i+0x150>
 800a826:	6923      	ldr	r3, [r4, #16]
 800a828:	462a      	mov	r2, r5
 800a82a:	4649      	mov	r1, r9
 800a82c:	4640      	mov	r0, r8
 800a82e:	47d0      	blx	sl
 800a830:	3001      	adds	r0, #1
 800a832:	d0ab      	beq.n	800a78c <_printf_i+0x164>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	079b      	lsls	r3, r3, #30
 800a838:	d413      	bmi.n	800a862 <_printf_i+0x23a>
 800a83a:	68e0      	ldr	r0, [r4, #12]
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	4298      	cmp	r0, r3
 800a840:	bfb8      	it	lt
 800a842:	4618      	movlt	r0, r3
 800a844:	e7a4      	b.n	800a790 <_printf_i+0x168>
 800a846:	2301      	movs	r3, #1
 800a848:	4632      	mov	r2, r6
 800a84a:	4649      	mov	r1, r9
 800a84c:	4640      	mov	r0, r8
 800a84e:	47d0      	blx	sl
 800a850:	3001      	adds	r0, #1
 800a852:	d09b      	beq.n	800a78c <_printf_i+0x164>
 800a854:	3501      	adds	r5, #1
 800a856:	68e3      	ldr	r3, [r4, #12]
 800a858:	9903      	ldr	r1, [sp, #12]
 800a85a:	1a5b      	subs	r3, r3, r1
 800a85c:	42ab      	cmp	r3, r5
 800a85e:	dcf2      	bgt.n	800a846 <_printf_i+0x21e>
 800a860:	e7eb      	b.n	800a83a <_printf_i+0x212>
 800a862:	2500      	movs	r5, #0
 800a864:	f104 0619 	add.w	r6, r4, #25
 800a868:	e7f5      	b.n	800a856 <_printf_i+0x22e>
 800a86a:	bf00      	nop
 800a86c:	0800ceb5 	.word	0x0800ceb5
 800a870:	0800cec6 	.word	0x0800cec6

0800a874 <_sbrk_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d06      	ldr	r5, [pc, #24]	; (800a890 <_sbrk_r+0x1c>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	602b      	str	r3, [r5, #0]
 800a880:	f7f8 ff6c 	bl	800375c <_sbrk>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_sbrk_r+0x1a>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_sbrk_r+0x1a>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	200045b4 	.word	0x200045b4

0800a894 <__sread>:
 800a894:	b510      	push	{r4, lr}
 800a896:	460c      	mov	r4, r1
 800a898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89c:	f000 f8a0 	bl	800a9e0 <_read_r>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	bfab      	itete	ge
 800a8a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8a8:	181b      	addge	r3, r3, r0
 800a8aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8ae:	bfac      	ite	ge
 800a8b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8b2:	81a3      	strhlt	r3, [r4, #12]
 800a8b4:	bd10      	pop	{r4, pc}

0800a8b6 <__swrite>:
 800a8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ba:	461f      	mov	r7, r3
 800a8bc:	898b      	ldrh	r3, [r1, #12]
 800a8be:	05db      	lsls	r3, r3, #23
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	4616      	mov	r6, r2
 800a8c6:	d505      	bpl.n	800a8d4 <__swrite+0x1e>
 800a8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f000 f868 	bl	800a9a4 <_lseek_r>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ea:	f000 b817 	b.w	800a91c <_write_r>

0800a8ee <__sseek>:
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f6:	f000 f855 	bl	800a9a4 <_lseek_r>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	bf15      	itete	ne
 800a900:	6560      	strne	r0, [r4, #84]	; 0x54
 800a902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a90a:	81a3      	strheq	r3, [r4, #12]
 800a90c:	bf18      	it	ne
 800a90e:	81a3      	strhne	r3, [r4, #12]
 800a910:	bd10      	pop	{r4, pc}

0800a912 <__sclose>:
 800a912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a916:	f000 b813 	b.w	800a940 <_close_r>
	...

0800a91c <_write_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	; (800a93c <_write_r+0x20>)
 800a920:	4604      	mov	r4, r0
 800a922:	4608      	mov	r0, r1
 800a924:	4611      	mov	r1, r2
 800a926:	2200      	movs	r2, #0
 800a928:	602a      	str	r2, [r5, #0]
 800a92a:	461a      	mov	r2, r3
 800a92c:	f7f8 fec5 	bl	80036ba <_write>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_write_r+0x1e>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_write_r+0x1e>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	200045b4 	.word	0x200045b4

0800a940 <_close_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	; (800a95c <_close_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f8 fed1 	bl	80036f2 <_close>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_close_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_close_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	200045b4 	.word	0x200045b4

0800a960 <_fstat_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d07      	ldr	r5, [pc, #28]	; (800a980 <_fstat_r+0x20>)
 800a964:	2300      	movs	r3, #0
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	4611      	mov	r1, r2
 800a96c:	602b      	str	r3, [r5, #0]
 800a96e:	f7f8 fecc 	bl	800370a <_fstat>
 800a972:	1c43      	adds	r3, r0, #1
 800a974:	d102      	bne.n	800a97c <_fstat_r+0x1c>
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	b103      	cbz	r3, 800a97c <_fstat_r+0x1c>
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	bf00      	nop
 800a980:	200045b4 	.word	0x200045b4

0800a984 <_isatty_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d06      	ldr	r5, [pc, #24]	; (800a9a0 <_isatty_r+0x1c>)
 800a988:	2300      	movs	r3, #0
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	602b      	str	r3, [r5, #0]
 800a990:	f7f8 fecb 	bl	800372a <_isatty>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_isatty_r+0x1a>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_isatty_r+0x1a>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	200045b4 	.word	0x200045b4

0800a9a4 <_lseek_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4d07      	ldr	r5, [pc, #28]	; (800a9c4 <_lseek_r+0x20>)
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	602a      	str	r2, [r5, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f7f8 fec4 	bl	8003740 <_lseek>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_lseek_r+0x1e>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_lseek_r+0x1e>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	200045b4 	.word	0x200045b4

0800a9c8 <__malloc_lock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	; (800a9d0 <__malloc_lock+0x8>)
 800a9ca:	f7ff bb1d 	b.w	800a008 <__retarget_lock_acquire_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	200045a8 	.word	0x200045a8

0800a9d4 <__malloc_unlock>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	; (800a9dc <__malloc_unlock+0x8>)
 800a9d6:	f7ff bb18 	b.w	800a00a <__retarget_lock_release_recursive>
 800a9da:	bf00      	nop
 800a9dc:	200045a8 	.word	0x200045a8

0800a9e0 <_read_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	4d07      	ldr	r5, [pc, #28]	; (800aa00 <_read_r+0x20>)
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	4608      	mov	r0, r1
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	602a      	str	r2, [r5, #0]
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f7f8 fe46 	bl	8003680 <_read>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_read_r+0x1e>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_read_r+0x1e>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	200045b4 	.word	0x200045b4
 800aa04:	00000000 	.word	0x00000000

0800aa08 <cos>:
 800aa08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa0a:	ec53 2b10 	vmov	r2, r3, d0
 800aa0e:	4826      	ldr	r0, [pc, #152]	; (800aaa8 <cos+0xa0>)
 800aa10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa14:	4281      	cmp	r1, r0
 800aa16:	dc06      	bgt.n	800aa26 <cos+0x1e>
 800aa18:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800aaa0 <cos+0x98>
 800aa1c:	b005      	add	sp, #20
 800aa1e:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa22:	f000 bd3d 	b.w	800b4a0 <__kernel_cos>
 800aa26:	4821      	ldr	r0, [pc, #132]	; (800aaac <cos+0xa4>)
 800aa28:	4281      	cmp	r1, r0
 800aa2a:	dd09      	ble.n	800aa40 <cos+0x38>
 800aa2c:	ee10 0a10 	vmov	r0, s0
 800aa30:	4619      	mov	r1, r3
 800aa32:	f7f5 fc21 	bl	8000278 <__aeabi_dsub>
 800aa36:	ec41 0b10 	vmov	d0, r0, r1
 800aa3a:	b005      	add	sp, #20
 800aa3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa40:	4668      	mov	r0, sp
 800aa42:	f000 f9e5 	bl	800ae10 <__ieee754_rem_pio2>
 800aa46:	f000 0003 	and.w	r0, r0, #3
 800aa4a:	2801      	cmp	r0, #1
 800aa4c:	d00b      	beq.n	800aa66 <cos+0x5e>
 800aa4e:	2802      	cmp	r0, #2
 800aa50:	d016      	beq.n	800aa80 <cos+0x78>
 800aa52:	b9e0      	cbnz	r0, 800aa8e <cos+0x86>
 800aa54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa58:	ed9d 0b00 	vldr	d0, [sp]
 800aa5c:	f000 fd20 	bl	800b4a0 <__kernel_cos>
 800aa60:	ec51 0b10 	vmov	r0, r1, d0
 800aa64:	e7e7      	b.n	800aa36 <cos+0x2e>
 800aa66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa6a:	ed9d 0b00 	vldr	d0, [sp]
 800aa6e:	f001 f92f 	bl	800bcd0 <__kernel_sin>
 800aa72:	ec53 2b10 	vmov	r2, r3, d0
 800aa76:	ee10 0a10 	vmov	r0, s0
 800aa7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa7e:	e7da      	b.n	800aa36 <cos+0x2e>
 800aa80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa84:	ed9d 0b00 	vldr	d0, [sp]
 800aa88:	f000 fd0a 	bl	800b4a0 <__kernel_cos>
 800aa8c:	e7f1      	b.n	800aa72 <cos+0x6a>
 800aa8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa92:	ed9d 0b00 	vldr	d0, [sp]
 800aa96:	2001      	movs	r0, #1
 800aa98:	f001 f91a 	bl	800bcd0 <__kernel_sin>
 800aa9c:	e7e0      	b.n	800aa60 <cos+0x58>
 800aa9e:	bf00      	nop
	...
 800aaa8:	3fe921fb 	.word	0x3fe921fb
 800aaac:	7fefffff 	.word	0x7fefffff

0800aab0 <sin>:
 800aab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aab2:	ec53 2b10 	vmov	r2, r3, d0
 800aab6:	4828      	ldr	r0, [pc, #160]	; (800ab58 <sin+0xa8>)
 800aab8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aabc:	4281      	cmp	r1, r0
 800aabe:	dc07      	bgt.n	800aad0 <sin+0x20>
 800aac0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ab50 <sin+0xa0>
 800aac4:	2000      	movs	r0, #0
 800aac6:	b005      	add	sp, #20
 800aac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aacc:	f001 b900 	b.w	800bcd0 <__kernel_sin>
 800aad0:	4822      	ldr	r0, [pc, #136]	; (800ab5c <sin+0xac>)
 800aad2:	4281      	cmp	r1, r0
 800aad4:	dd09      	ble.n	800aaea <sin+0x3a>
 800aad6:	ee10 0a10 	vmov	r0, s0
 800aada:	4619      	mov	r1, r3
 800aadc:	f7f5 fbcc 	bl	8000278 <__aeabi_dsub>
 800aae0:	ec41 0b10 	vmov	d0, r0, r1
 800aae4:	b005      	add	sp, #20
 800aae6:	f85d fb04 	ldr.w	pc, [sp], #4
 800aaea:	4668      	mov	r0, sp
 800aaec:	f000 f990 	bl	800ae10 <__ieee754_rem_pio2>
 800aaf0:	f000 0003 	and.w	r0, r0, #3
 800aaf4:	2801      	cmp	r0, #1
 800aaf6:	d00c      	beq.n	800ab12 <sin+0x62>
 800aaf8:	2802      	cmp	r0, #2
 800aafa:	d011      	beq.n	800ab20 <sin+0x70>
 800aafc:	b9f0      	cbnz	r0, 800ab3c <sin+0x8c>
 800aafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab02:	ed9d 0b00 	vldr	d0, [sp]
 800ab06:	2001      	movs	r0, #1
 800ab08:	f001 f8e2 	bl	800bcd0 <__kernel_sin>
 800ab0c:	ec51 0b10 	vmov	r0, r1, d0
 800ab10:	e7e6      	b.n	800aae0 <sin+0x30>
 800ab12:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab16:	ed9d 0b00 	vldr	d0, [sp]
 800ab1a:	f000 fcc1 	bl	800b4a0 <__kernel_cos>
 800ab1e:	e7f5      	b.n	800ab0c <sin+0x5c>
 800ab20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab24:	ed9d 0b00 	vldr	d0, [sp]
 800ab28:	2001      	movs	r0, #1
 800ab2a:	f001 f8d1 	bl	800bcd0 <__kernel_sin>
 800ab2e:	ec53 2b10 	vmov	r2, r3, d0
 800ab32:	ee10 0a10 	vmov	r0, s0
 800ab36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ab3a:	e7d1      	b.n	800aae0 <sin+0x30>
 800ab3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab40:	ed9d 0b00 	vldr	d0, [sp]
 800ab44:	f000 fcac 	bl	800b4a0 <__kernel_cos>
 800ab48:	e7f1      	b.n	800ab2e <sin+0x7e>
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w
	...
 800ab58:	3fe921fb 	.word	0x3fe921fb
 800ab5c:	7fefffff 	.word	0x7fefffff

0800ab60 <cosf>:
 800ab60:	ee10 3a10 	vmov	r3, s0
 800ab64:	b507      	push	{r0, r1, r2, lr}
 800ab66:	4a1e      	ldr	r2, [pc, #120]	; (800abe0 <cosf+0x80>)
 800ab68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	dc06      	bgt.n	800ab7e <cosf+0x1e>
 800ab70:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800abe4 <cosf+0x84>
 800ab74:	b003      	add	sp, #12
 800ab76:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab7a:	f001 b967 	b.w	800be4c <__kernel_cosf>
 800ab7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab82:	db04      	blt.n	800ab8e <cosf+0x2e>
 800ab84:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ab88:	b003      	add	sp, #12
 800ab8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab8e:	4668      	mov	r0, sp
 800ab90:	f000 fb4a 	bl	800b228 <__ieee754_rem_pio2f>
 800ab94:	f000 0003 	and.w	r0, r0, #3
 800ab98:	2801      	cmp	r0, #1
 800ab9a:	d009      	beq.n	800abb0 <cosf+0x50>
 800ab9c:	2802      	cmp	r0, #2
 800ab9e:	d010      	beq.n	800abc2 <cosf+0x62>
 800aba0:	b9b0      	cbnz	r0, 800abd0 <cosf+0x70>
 800aba2:	eddd 0a01 	vldr	s1, [sp, #4]
 800aba6:	ed9d 0a00 	vldr	s0, [sp]
 800abaa:	f001 f94f 	bl	800be4c <__kernel_cosf>
 800abae:	e7eb      	b.n	800ab88 <cosf+0x28>
 800abb0:	eddd 0a01 	vldr	s1, [sp, #4]
 800abb4:	ed9d 0a00 	vldr	s0, [sp]
 800abb8:	f001 fc1e 	bl	800c3f8 <__kernel_sinf>
 800abbc:	eeb1 0a40 	vneg.f32	s0, s0
 800abc0:	e7e2      	b.n	800ab88 <cosf+0x28>
 800abc2:	eddd 0a01 	vldr	s1, [sp, #4]
 800abc6:	ed9d 0a00 	vldr	s0, [sp]
 800abca:	f001 f93f 	bl	800be4c <__kernel_cosf>
 800abce:	e7f5      	b.n	800abbc <cosf+0x5c>
 800abd0:	eddd 0a01 	vldr	s1, [sp, #4]
 800abd4:	ed9d 0a00 	vldr	s0, [sp]
 800abd8:	2001      	movs	r0, #1
 800abda:	f001 fc0d 	bl	800c3f8 <__kernel_sinf>
 800abde:	e7d3      	b.n	800ab88 <cosf+0x28>
 800abe0:	3f490fd8 	.word	0x3f490fd8
 800abe4:	00000000 	.word	0x00000000

0800abe8 <sinf>:
 800abe8:	ee10 3a10 	vmov	r3, s0
 800abec:	b507      	push	{r0, r1, r2, lr}
 800abee:	4a1f      	ldr	r2, [pc, #124]	; (800ac6c <sinf+0x84>)
 800abf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abf4:	4293      	cmp	r3, r2
 800abf6:	dc07      	bgt.n	800ac08 <sinf+0x20>
 800abf8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ac70 <sinf+0x88>
 800abfc:	2000      	movs	r0, #0
 800abfe:	b003      	add	sp, #12
 800ac00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac04:	f001 bbf8 	b.w	800c3f8 <__kernel_sinf>
 800ac08:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac0c:	db04      	blt.n	800ac18 <sinf+0x30>
 800ac0e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ac12:	b003      	add	sp, #12
 800ac14:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac18:	4668      	mov	r0, sp
 800ac1a:	f000 fb05 	bl	800b228 <__ieee754_rem_pio2f>
 800ac1e:	f000 0003 	and.w	r0, r0, #3
 800ac22:	2801      	cmp	r0, #1
 800ac24:	d00a      	beq.n	800ac3c <sinf+0x54>
 800ac26:	2802      	cmp	r0, #2
 800ac28:	d00f      	beq.n	800ac4a <sinf+0x62>
 800ac2a:	b9c0      	cbnz	r0, 800ac5e <sinf+0x76>
 800ac2c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac30:	ed9d 0a00 	vldr	s0, [sp]
 800ac34:	2001      	movs	r0, #1
 800ac36:	f001 fbdf 	bl	800c3f8 <__kernel_sinf>
 800ac3a:	e7ea      	b.n	800ac12 <sinf+0x2a>
 800ac3c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac40:	ed9d 0a00 	vldr	s0, [sp]
 800ac44:	f001 f902 	bl	800be4c <__kernel_cosf>
 800ac48:	e7e3      	b.n	800ac12 <sinf+0x2a>
 800ac4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac4e:	ed9d 0a00 	vldr	s0, [sp]
 800ac52:	2001      	movs	r0, #1
 800ac54:	f001 fbd0 	bl	800c3f8 <__kernel_sinf>
 800ac58:	eeb1 0a40 	vneg.f32	s0, s0
 800ac5c:	e7d9      	b.n	800ac12 <sinf+0x2a>
 800ac5e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac62:	ed9d 0a00 	vldr	s0, [sp]
 800ac66:	f001 f8f1 	bl	800be4c <__kernel_cosf>
 800ac6a:	e7f5      	b.n	800ac58 <sinf+0x70>
 800ac6c:	3f490fd8 	.word	0x3f490fd8
 800ac70:	00000000 	.word	0x00000000

0800ac74 <atan2>:
 800ac74:	f000 b800 	b.w	800ac78 <__ieee754_atan2>

0800ac78 <__ieee754_atan2>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	ec57 6b11 	vmov	r6, r7, d1
 800ac80:	4273      	negs	r3, r6
 800ac82:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ae08 <__ieee754_atan2+0x190>
 800ac86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ac8a:	4333      	orrs	r3, r6
 800ac8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac90:	4573      	cmp	r3, lr
 800ac92:	ec51 0b10 	vmov	r0, r1, d0
 800ac96:	ee11 8a10 	vmov	r8, s2
 800ac9a:	d80a      	bhi.n	800acb2 <__ieee754_atan2+0x3a>
 800ac9c:	4244      	negs	r4, r0
 800ac9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aca2:	4304      	orrs	r4, r0
 800aca4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aca8:	4574      	cmp	r4, lr
 800acaa:	ee10 9a10 	vmov	r9, s0
 800acae:	468c      	mov	ip, r1
 800acb0:	d907      	bls.n	800acc2 <__ieee754_atan2+0x4a>
 800acb2:	4632      	mov	r2, r6
 800acb4:	463b      	mov	r3, r7
 800acb6:	f7f5 fae1 	bl	800027c <__adddf3>
 800acba:	ec41 0b10 	vmov	d0, r0, r1
 800acbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800acc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800acca:	4334      	orrs	r4, r6
 800accc:	d103      	bne.n	800acd6 <__ieee754_atan2+0x5e>
 800acce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd2:	f001 bbd9 	b.w	800c488 <atan>
 800acd6:	17bc      	asrs	r4, r7, #30
 800acd8:	f004 0402 	and.w	r4, r4, #2
 800acdc:	ea53 0909 	orrs.w	r9, r3, r9
 800ace0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ace4:	d107      	bne.n	800acf6 <__ieee754_atan2+0x7e>
 800ace6:	2c02      	cmp	r4, #2
 800ace8:	d060      	beq.n	800adac <__ieee754_atan2+0x134>
 800acea:	2c03      	cmp	r4, #3
 800acec:	d1e5      	bne.n	800acba <__ieee754_atan2+0x42>
 800acee:	a142      	add	r1, pc, #264	; (adr r1, 800adf8 <__ieee754_atan2+0x180>)
 800acf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acf4:	e7e1      	b.n	800acba <__ieee754_atan2+0x42>
 800acf6:	ea52 0808 	orrs.w	r8, r2, r8
 800acfa:	d106      	bne.n	800ad0a <__ieee754_atan2+0x92>
 800acfc:	f1bc 0f00 	cmp.w	ip, #0
 800ad00:	da5f      	bge.n	800adc2 <__ieee754_atan2+0x14a>
 800ad02:	a13f      	add	r1, pc, #252	; (adr r1, 800ae00 <__ieee754_atan2+0x188>)
 800ad04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad08:	e7d7      	b.n	800acba <__ieee754_atan2+0x42>
 800ad0a:	4572      	cmp	r2, lr
 800ad0c:	d10f      	bne.n	800ad2e <__ieee754_atan2+0xb6>
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ad14:	d107      	bne.n	800ad26 <__ieee754_atan2+0xae>
 800ad16:	2c02      	cmp	r4, #2
 800ad18:	d84c      	bhi.n	800adb4 <__ieee754_atan2+0x13c>
 800ad1a:	4b35      	ldr	r3, [pc, #212]	; (800adf0 <__ieee754_atan2+0x178>)
 800ad1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ad20:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ad24:	e7c9      	b.n	800acba <__ieee754_atan2+0x42>
 800ad26:	2c02      	cmp	r4, #2
 800ad28:	d848      	bhi.n	800adbc <__ieee754_atan2+0x144>
 800ad2a:	4b32      	ldr	r3, [pc, #200]	; (800adf4 <__ieee754_atan2+0x17c>)
 800ad2c:	e7f6      	b.n	800ad1c <__ieee754_atan2+0xa4>
 800ad2e:	4573      	cmp	r3, lr
 800ad30:	d0e4      	beq.n	800acfc <__ieee754_atan2+0x84>
 800ad32:	1a9b      	subs	r3, r3, r2
 800ad34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ad38:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad3c:	da1e      	bge.n	800ad7c <__ieee754_atan2+0x104>
 800ad3e:	2f00      	cmp	r7, #0
 800ad40:	da01      	bge.n	800ad46 <__ieee754_atan2+0xce>
 800ad42:	323c      	adds	r2, #60	; 0x3c
 800ad44:	db1e      	blt.n	800ad84 <__ieee754_atan2+0x10c>
 800ad46:	4632      	mov	r2, r6
 800ad48:	463b      	mov	r3, r7
 800ad4a:	f7f5 fd77 	bl	800083c <__aeabi_ddiv>
 800ad4e:	ec41 0b10 	vmov	d0, r0, r1
 800ad52:	f001 fd39 	bl	800c7c8 <fabs>
 800ad56:	f001 fb97 	bl	800c488 <atan>
 800ad5a:	ec51 0b10 	vmov	r0, r1, d0
 800ad5e:	2c01      	cmp	r4, #1
 800ad60:	d013      	beq.n	800ad8a <__ieee754_atan2+0x112>
 800ad62:	2c02      	cmp	r4, #2
 800ad64:	d015      	beq.n	800ad92 <__ieee754_atan2+0x11a>
 800ad66:	2c00      	cmp	r4, #0
 800ad68:	d0a7      	beq.n	800acba <__ieee754_atan2+0x42>
 800ad6a:	a319      	add	r3, pc, #100	; (adr r3, 800add0 <__ieee754_atan2+0x158>)
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 fa82 	bl	8000278 <__aeabi_dsub>
 800ad74:	a318      	add	r3, pc, #96	; (adr r3, 800add8 <__ieee754_atan2+0x160>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	e014      	b.n	800ada6 <__ieee754_atan2+0x12e>
 800ad7c:	a118      	add	r1, pc, #96	; (adr r1, 800ade0 <__ieee754_atan2+0x168>)
 800ad7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad82:	e7ec      	b.n	800ad5e <__ieee754_atan2+0xe6>
 800ad84:	2000      	movs	r0, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	e7e9      	b.n	800ad5e <__ieee754_atan2+0xe6>
 800ad8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad8e:	4619      	mov	r1, r3
 800ad90:	e793      	b.n	800acba <__ieee754_atan2+0x42>
 800ad92:	a30f      	add	r3, pc, #60	; (adr r3, 800add0 <__ieee754_atan2+0x158>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fa6e 	bl	8000278 <__aeabi_dsub>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	a10d      	add	r1, pc, #52	; (adr r1, 800add8 <__ieee754_atan2+0x160>)
 800ada2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ada6:	f7f5 fa67 	bl	8000278 <__aeabi_dsub>
 800adaa:	e786      	b.n	800acba <__ieee754_atan2+0x42>
 800adac:	a10a      	add	r1, pc, #40	; (adr r1, 800add8 <__ieee754_atan2+0x160>)
 800adae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adb2:	e782      	b.n	800acba <__ieee754_atan2+0x42>
 800adb4:	a10c      	add	r1, pc, #48	; (adr r1, 800ade8 <__ieee754_atan2+0x170>)
 800adb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adba:	e77e      	b.n	800acba <__ieee754_atan2+0x42>
 800adbc:	2000      	movs	r0, #0
 800adbe:	2100      	movs	r1, #0
 800adc0:	e77b      	b.n	800acba <__ieee754_atan2+0x42>
 800adc2:	a107      	add	r1, pc, #28	; (adr r1, 800ade0 <__ieee754_atan2+0x168>)
 800adc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc8:	e777      	b.n	800acba <__ieee754_atan2+0x42>
 800adca:	bf00      	nop
 800adcc:	f3af 8000 	nop.w
 800add0:	33145c07 	.word	0x33145c07
 800add4:	3ca1a626 	.word	0x3ca1a626
 800add8:	54442d18 	.word	0x54442d18
 800addc:	400921fb 	.word	0x400921fb
 800ade0:	54442d18 	.word	0x54442d18
 800ade4:	3ff921fb 	.word	0x3ff921fb
 800ade8:	54442d18 	.word	0x54442d18
 800adec:	3fe921fb 	.word	0x3fe921fb
 800adf0:	0800ced8 	.word	0x0800ced8
 800adf4:	0800cef0 	.word	0x0800cef0
 800adf8:	54442d18 	.word	0x54442d18
 800adfc:	c00921fb 	.word	0xc00921fb
 800ae00:	54442d18 	.word	0x54442d18
 800ae04:	bff921fb 	.word	0xbff921fb
 800ae08:	7ff00000 	.word	0x7ff00000
 800ae0c:	00000000 	.word	0x00000000

0800ae10 <__ieee754_rem_pio2>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	ed2d 8b02 	vpush	{d8}
 800ae18:	ec55 4b10 	vmov	r4, r5, d0
 800ae1c:	4bca      	ldr	r3, [pc, #808]	; (800b148 <__ieee754_rem_pio2+0x338>)
 800ae1e:	b08b      	sub	sp, #44	; 0x2c
 800ae20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae24:	4598      	cmp	r8, r3
 800ae26:	4682      	mov	sl, r0
 800ae28:	9502      	str	r5, [sp, #8]
 800ae2a:	dc08      	bgt.n	800ae3e <__ieee754_rem_pio2+0x2e>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	2300      	movs	r3, #0
 800ae30:	ed80 0b00 	vstr	d0, [r0]
 800ae34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ae38:	f04f 0b00 	mov.w	fp, #0
 800ae3c:	e028      	b.n	800ae90 <__ieee754_rem_pio2+0x80>
 800ae3e:	4bc3      	ldr	r3, [pc, #780]	; (800b14c <__ieee754_rem_pio2+0x33c>)
 800ae40:	4598      	cmp	r8, r3
 800ae42:	dc78      	bgt.n	800af36 <__ieee754_rem_pio2+0x126>
 800ae44:	9b02      	ldr	r3, [sp, #8]
 800ae46:	4ec2      	ldr	r6, [pc, #776]	; (800b150 <__ieee754_rem_pio2+0x340>)
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	ee10 0a10 	vmov	r0, s0
 800ae4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b110 <__ieee754_rem_pio2+0x300>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	4629      	mov	r1, r5
 800ae56:	dd39      	ble.n	800aecc <__ieee754_rem_pio2+0xbc>
 800ae58:	f7f5 fa0e 	bl	8000278 <__aeabi_dsub>
 800ae5c:	45b0      	cmp	r8, r6
 800ae5e:	4604      	mov	r4, r0
 800ae60:	460d      	mov	r5, r1
 800ae62:	d01b      	beq.n	800ae9c <__ieee754_rem_pio2+0x8c>
 800ae64:	a3ac      	add	r3, pc, #688	; (adr r3, 800b118 <__ieee754_rem_pio2+0x308>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 fa05 	bl	8000278 <__aeabi_dsub>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	e9ca 2300 	strd	r2, r3, [sl]
 800ae76:	4620      	mov	r0, r4
 800ae78:	4629      	mov	r1, r5
 800ae7a:	f7f5 f9fd 	bl	8000278 <__aeabi_dsub>
 800ae7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b118 <__ieee754_rem_pio2+0x308>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 f9f8 	bl	8000278 <__aeabi_dsub>
 800ae88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae8c:	f04f 0b01 	mov.w	fp, #1
 800ae90:	4658      	mov	r0, fp
 800ae92:	b00b      	add	sp, #44	; 0x2c
 800ae94:	ecbd 8b02 	vpop	{d8}
 800ae98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800b120 <__ieee754_rem_pio2+0x310>)
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f7f5 f9e9 	bl	8000278 <__aeabi_dsub>
 800aea6:	a3a0      	add	r3, pc, #640	; (adr r3, 800b128 <__ieee754_rem_pio2+0x318>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	4604      	mov	r4, r0
 800aeae:	460d      	mov	r5, r1
 800aeb0:	f7f5 f9e2 	bl	8000278 <__aeabi_dsub>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	e9ca 2300 	strd	r2, r3, [sl]
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 f9da 	bl	8000278 <__aeabi_dsub>
 800aec4:	a398      	add	r3, pc, #608	; (adr r3, 800b128 <__ieee754_rem_pio2+0x318>)
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	e7db      	b.n	800ae84 <__ieee754_rem_pio2+0x74>
 800aecc:	f7f5 f9d6 	bl	800027c <__adddf3>
 800aed0:	45b0      	cmp	r8, r6
 800aed2:	4604      	mov	r4, r0
 800aed4:	460d      	mov	r5, r1
 800aed6:	d016      	beq.n	800af06 <__ieee754_rem_pio2+0xf6>
 800aed8:	a38f      	add	r3, pc, #572	; (adr r3, 800b118 <__ieee754_rem_pio2+0x308>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9cd 	bl	800027c <__adddf3>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	e9ca 2300 	strd	r2, r3, [sl]
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 f9c3 	bl	8000278 <__aeabi_dsub>
 800aef2:	a389      	add	r3, pc, #548	; (adr r3, 800b118 <__ieee754_rem_pio2+0x308>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f7f5 f9c0 	bl	800027c <__adddf3>
 800aefc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800af00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af04:	e7c4      	b.n	800ae90 <__ieee754_rem_pio2+0x80>
 800af06:	a386      	add	r3, pc, #536	; (adr r3, 800b120 <__ieee754_rem_pio2+0x310>)
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f7f5 f9b6 	bl	800027c <__adddf3>
 800af10:	a385      	add	r3, pc, #532	; (adr r3, 800b128 <__ieee754_rem_pio2+0x318>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	4604      	mov	r4, r0
 800af18:	460d      	mov	r5, r1
 800af1a:	f7f5 f9af 	bl	800027c <__adddf3>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	e9ca 2300 	strd	r2, r3, [sl]
 800af26:	4620      	mov	r0, r4
 800af28:	4629      	mov	r1, r5
 800af2a:	f7f5 f9a5 	bl	8000278 <__aeabi_dsub>
 800af2e:	a37e      	add	r3, pc, #504	; (adr r3, 800b128 <__ieee754_rem_pio2+0x318>)
 800af30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af34:	e7e0      	b.n	800aef8 <__ieee754_rem_pio2+0xe8>
 800af36:	4b87      	ldr	r3, [pc, #540]	; (800b154 <__ieee754_rem_pio2+0x344>)
 800af38:	4598      	cmp	r8, r3
 800af3a:	f300 80d9 	bgt.w	800b0f0 <__ieee754_rem_pio2+0x2e0>
 800af3e:	f001 fc43 	bl	800c7c8 <fabs>
 800af42:	ec55 4b10 	vmov	r4, r5, d0
 800af46:	ee10 0a10 	vmov	r0, s0
 800af4a:	a379      	add	r3, pc, #484	; (adr r3, 800b130 <__ieee754_rem_pio2+0x320>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 fb49 	bl	80005e8 <__aeabi_dmul>
 800af56:	4b80      	ldr	r3, [pc, #512]	; (800b158 <__ieee754_rem_pio2+0x348>)
 800af58:	2200      	movs	r2, #0
 800af5a:	f7f5 f98f 	bl	800027c <__adddf3>
 800af5e:	f7f5 fddd 	bl	8000b1c <__aeabi_d2iz>
 800af62:	4683      	mov	fp, r0
 800af64:	f7f5 fad6 	bl	8000514 <__aeabi_i2d>
 800af68:	4602      	mov	r2, r0
 800af6a:	460b      	mov	r3, r1
 800af6c:	ec43 2b18 	vmov	d8, r2, r3
 800af70:	a367      	add	r3, pc, #412	; (adr r3, 800b110 <__ieee754_rem_pio2+0x300>)
 800af72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af76:	f7f5 fb37 	bl	80005e8 <__aeabi_dmul>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	f7f5 f979 	bl	8000278 <__aeabi_dsub>
 800af86:	a364      	add	r3, pc, #400	; (adr r3, 800b118 <__ieee754_rem_pio2+0x308>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	4606      	mov	r6, r0
 800af8e:	460f      	mov	r7, r1
 800af90:	ec51 0b18 	vmov	r0, r1, d8
 800af94:	f7f5 fb28 	bl	80005e8 <__aeabi_dmul>
 800af98:	f1bb 0f1f 	cmp.w	fp, #31
 800af9c:	4604      	mov	r4, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	dc0d      	bgt.n	800afbe <__ieee754_rem_pio2+0x1ae>
 800afa2:	4b6e      	ldr	r3, [pc, #440]	; (800b15c <__ieee754_rem_pio2+0x34c>)
 800afa4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800afa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afac:	4543      	cmp	r3, r8
 800afae:	d006      	beq.n	800afbe <__ieee754_rem_pio2+0x1ae>
 800afb0:	4622      	mov	r2, r4
 800afb2:	462b      	mov	r3, r5
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 f95e 	bl	8000278 <__aeabi_dsub>
 800afbc:	e00f      	b.n	800afde <__ieee754_rem_pio2+0x1ce>
 800afbe:	462b      	mov	r3, r5
 800afc0:	4622      	mov	r2, r4
 800afc2:	4630      	mov	r0, r6
 800afc4:	4639      	mov	r1, r7
 800afc6:	f7f5 f957 	bl	8000278 <__aeabi_dsub>
 800afca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800afd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800afd8:	f1b8 0f10 	cmp.w	r8, #16
 800afdc:	dc02      	bgt.n	800afe4 <__ieee754_rem_pio2+0x1d4>
 800afde:	e9ca 0100 	strd	r0, r1, [sl]
 800afe2:	e039      	b.n	800b058 <__ieee754_rem_pio2+0x248>
 800afe4:	a34e      	add	r3, pc, #312	; (adr r3, 800b120 <__ieee754_rem_pio2+0x310>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	ec51 0b18 	vmov	r0, r1, d8
 800afee:	f7f5 fafb 	bl	80005e8 <__aeabi_dmul>
 800aff2:	4604      	mov	r4, r0
 800aff4:	460d      	mov	r5, r1
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 f93b 	bl	8000278 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	4680      	mov	r8, r0
 800b008:	4689      	mov	r9, r1
 800b00a:	4630      	mov	r0, r6
 800b00c:	4639      	mov	r1, r7
 800b00e:	f7f5 f933 	bl	8000278 <__aeabi_dsub>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 f92f 	bl	8000278 <__aeabi_dsub>
 800b01a:	a343      	add	r3, pc, #268	; (adr r3, 800b128 <__ieee754_rem_pio2+0x318>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	4604      	mov	r4, r0
 800b022:	460d      	mov	r5, r1
 800b024:	ec51 0b18 	vmov	r0, r1, d8
 800b028:	f7f5 fade 	bl	80005e8 <__aeabi_dmul>
 800b02c:	4622      	mov	r2, r4
 800b02e:	462b      	mov	r3, r5
 800b030:	f7f5 f922 	bl	8000278 <__aeabi_dsub>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4604      	mov	r4, r0
 800b03a:	460d      	mov	r5, r1
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	f7f5 f91a 	bl	8000278 <__aeabi_dsub>
 800b044:	9a03      	ldr	r2, [sp, #12]
 800b046:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b31      	cmp	r3, #49	; 0x31
 800b04e:	dc24      	bgt.n	800b09a <__ieee754_rem_pio2+0x28a>
 800b050:	e9ca 0100 	strd	r0, r1, [sl]
 800b054:	4646      	mov	r6, r8
 800b056:	464f      	mov	r7, r9
 800b058:	e9da 8900 	ldrd	r8, r9, [sl]
 800b05c:	4630      	mov	r0, r6
 800b05e:	4642      	mov	r2, r8
 800b060:	464b      	mov	r3, r9
 800b062:	4639      	mov	r1, r7
 800b064:	f7f5 f908 	bl	8000278 <__aeabi_dsub>
 800b068:	462b      	mov	r3, r5
 800b06a:	4622      	mov	r2, r4
 800b06c:	f7f5 f904 	bl	8000278 <__aeabi_dsub>
 800b070:	9b02      	ldr	r3, [sp, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b078:	f6bf af0a 	bge.w	800ae90 <__ieee754_rem_pio2+0x80>
 800b07c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b080:	f8ca 3004 	str.w	r3, [sl, #4]
 800b084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b088:	f8ca 8000 	str.w	r8, [sl]
 800b08c:	f8ca 0008 	str.w	r0, [sl, #8]
 800b090:	f8ca 300c 	str.w	r3, [sl, #12]
 800b094:	f1cb 0b00 	rsb	fp, fp, #0
 800b098:	e6fa      	b.n	800ae90 <__ieee754_rem_pio2+0x80>
 800b09a:	a327      	add	r3, pc, #156	; (adr r3, 800b138 <__ieee754_rem_pio2+0x328>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	ec51 0b18 	vmov	r0, r1, d8
 800b0a4:	f7f5 faa0 	bl	80005e8 <__aeabi_dmul>
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 f8e0 	bl	8000278 <__aeabi_dsub>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	4606      	mov	r6, r0
 800b0be:	460f      	mov	r7, r1
 800b0c0:	4640      	mov	r0, r8
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	f7f5 f8d8 	bl	8000278 <__aeabi_dsub>
 800b0c8:	4622      	mov	r2, r4
 800b0ca:	462b      	mov	r3, r5
 800b0cc:	f7f5 f8d4 	bl	8000278 <__aeabi_dsub>
 800b0d0:	a31b      	add	r3, pc, #108	; (adr r3, 800b140 <__ieee754_rem_pio2+0x330>)
 800b0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	460d      	mov	r5, r1
 800b0da:	ec51 0b18 	vmov	r0, r1, d8
 800b0de:	f7f5 fa83 	bl	80005e8 <__aeabi_dmul>
 800b0e2:	4622      	mov	r2, r4
 800b0e4:	462b      	mov	r3, r5
 800b0e6:	f7f5 f8c7 	bl	8000278 <__aeabi_dsub>
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	460d      	mov	r5, r1
 800b0ee:	e75f      	b.n	800afb0 <__ieee754_rem_pio2+0x1a0>
 800b0f0:	4b1b      	ldr	r3, [pc, #108]	; (800b160 <__ieee754_rem_pio2+0x350>)
 800b0f2:	4598      	cmp	r8, r3
 800b0f4:	dd36      	ble.n	800b164 <__ieee754_rem_pio2+0x354>
 800b0f6:	ee10 2a10 	vmov	r2, s0
 800b0fa:	462b      	mov	r3, r5
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 f8ba 	bl	8000278 <__aeabi_dsub>
 800b104:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b108:	e9ca 0100 	strd	r0, r1, [sl]
 800b10c:	e694      	b.n	800ae38 <__ieee754_rem_pio2+0x28>
 800b10e:	bf00      	nop
 800b110:	54400000 	.word	0x54400000
 800b114:	3ff921fb 	.word	0x3ff921fb
 800b118:	1a626331 	.word	0x1a626331
 800b11c:	3dd0b461 	.word	0x3dd0b461
 800b120:	1a600000 	.word	0x1a600000
 800b124:	3dd0b461 	.word	0x3dd0b461
 800b128:	2e037073 	.word	0x2e037073
 800b12c:	3ba3198a 	.word	0x3ba3198a
 800b130:	6dc9c883 	.word	0x6dc9c883
 800b134:	3fe45f30 	.word	0x3fe45f30
 800b138:	2e000000 	.word	0x2e000000
 800b13c:	3ba3198a 	.word	0x3ba3198a
 800b140:	252049c1 	.word	0x252049c1
 800b144:	397b839a 	.word	0x397b839a
 800b148:	3fe921fb 	.word	0x3fe921fb
 800b14c:	4002d97b 	.word	0x4002d97b
 800b150:	3ff921fb 	.word	0x3ff921fb
 800b154:	413921fb 	.word	0x413921fb
 800b158:	3fe00000 	.word	0x3fe00000
 800b15c:	0800cf08 	.word	0x0800cf08
 800b160:	7fefffff 	.word	0x7fefffff
 800b164:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b168:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b16c:	ee10 0a10 	vmov	r0, s0
 800b170:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b174:	ee10 6a10 	vmov	r6, s0
 800b178:	460f      	mov	r7, r1
 800b17a:	f7f5 fccf 	bl	8000b1c <__aeabi_d2iz>
 800b17e:	f7f5 f9c9 	bl	8000514 <__aeabi_i2d>
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	4630      	mov	r0, r6
 800b188:	4639      	mov	r1, r7
 800b18a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b18e:	f7f5 f873 	bl	8000278 <__aeabi_dsub>
 800b192:	4b23      	ldr	r3, [pc, #140]	; (800b220 <__ieee754_rem_pio2+0x410>)
 800b194:	2200      	movs	r2, #0
 800b196:	f7f5 fa27 	bl	80005e8 <__aeabi_dmul>
 800b19a:	460f      	mov	r7, r1
 800b19c:	4606      	mov	r6, r0
 800b19e:	f7f5 fcbd 	bl	8000b1c <__aeabi_d2iz>
 800b1a2:	f7f5 f9b7 	bl	8000514 <__aeabi_i2d>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1b2:	f7f5 f861 	bl	8000278 <__aeabi_dsub>
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <__ieee754_rem_pio2+0x410>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f7f5 fa15 	bl	80005e8 <__aeabi_dmul>
 800b1be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1c2:	ad04      	add	r5, sp, #16
 800b1c4:	f04f 0803 	mov.w	r8, #3
 800b1c8:	46a9      	mov	r9, r5
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	2700      	movs	r7, #0
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b1d6:	46c3      	mov	fp, r8
 800b1d8:	3d08      	subs	r5, #8
 800b1da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b1de:	f7f5 fc6b 	bl	8000ab8 <__aeabi_dcmpeq>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d1f3      	bne.n	800b1ce <__ieee754_rem_pio2+0x3be>
 800b1e6:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <__ieee754_rem_pio2+0x414>)
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	465b      	mov	r3, fp
 800b1f2:	4651      	mov	r1, sl
 800b1f4:	4648      	mov	r0, r9
 800b1f6:	f000 fa1b 	bl	800b630 <__kernel_rem_pio2>
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	4683      	mov	fp, r0
 800b200:	f6bf ae46 	bge.w	800ae90 <__ieee754_rem_pio2+0x80>
 800b204:	e9da 2100 	ldrd	r2, r1, [sl]
 800b208:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b20c:	e9ca 2300 	strd	r2, r3, [sl]
 800b210:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b218:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b21c:	e73a      	b.n	800b094 <__ieee754_rem_pio2+0x284>
 800b21e:	bf00      	nop
 800b220:	41700000 	.word	0x41700000
 800b224:	0800cf88 	.word	0x0800cf88

0800b228 <__ieee754_rem_pio2f>:
 800b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b22a:	ee10 6a10 	vmov	r6, s0
 800b22e:	4b8e      	ldr	r3, [pc, #568]	; (800b468 <__ieee754_rem_pio2f+0x240>)
 800b230:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b234:	429d      	cmp	r5, r3
 800b236:	b087      	sub	sp, #28
 800b238:	eef0 7a40 	vmov.f32	s15, s0
 800b23c:	4604      	mov	r4, r0
 800b23e:	dc05      	bgt.n	800b24c <__ieee754_rem_pio2f+0x24>
 800b240:	2300      	movs	r3, #0
 800b242:	ed80 0a00 	vstr	s0, [r0]
 800b246:	6043      	str	r3, [r0, #4]
 800b248:	2000      	movs	r0, #0
 800b24a:	e01a      	b.n	800b282 <__ieee754_rem_pio2f+0x5a>
 800b24c:	4b87      	ldr	r3, [pc, #540]	; (800b46c <__ieee754_rem_pio2f+0x244>)
 800b24e:	429d      	cmp	r5, r3
 800b250:	dc46      	bgt.n	800b2e0 <__ieee754_rem_pio2f+0xb8>
 800b252:	2e00      	cmp	r6, #0
 800b254:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b470 <__ieee754_rem_pio2f+0x248>
 800b258:	4b86      	ldr	r3, [pc, #536]	; (800b474 <__ieee754_rem_pio2f+0x24c>)
 800b25a:	f025 050f 	bic.w	r5, r5, #15
 800b25e:	dd1f      	ble.n	800b2a0 <__ieee754_rem_pio2f+0x78>
 800b260:	429d      	cmp	r5, r3
 800b262:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b266:	d00e      	beq.n	800b286 <__ieee754_rem_pio2f+0x5e>
 800b268:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b478 <__ieee754_rem_pio2f+0x250>
 800b26c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b270:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b274:	ed80 0a00 	vstr	s0, [r0]
 800b278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b27c:	2001      	movs	r0, #1
 800b27e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b282:	b007      	add	sp, #28
 800b284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b286:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b47c <__ieee754_rem_pio2f+0x254>
 800b28a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b480 <__ieee754_rem_pio2f+0x258>
 800b28e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b292:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b296:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b29a:	edc0 6a00 	vstr	s13, [r0]
 800b29e:	e7eb      	b.n	800b278 <__ieee754_rem_pio2f+0x50>
 800b2a0:	429d      	cmp	r5, r3
 800b2a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b2a6:	d00e      	beq.n	800b2c6 <__ieee754_rem_pio2f+0x9e>
 800b2a8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b478 <__ieee754_rem_pio2f+0x250>
 800b2ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b2b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b2b4:	ed80 0a00 	vstr	s0, [r0]
 800b2b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c0:	edc4 7a01 	vstr	s15, [r4, #4]
 800b2c4:	e7dd      	b.n	800b282 <__ieee754_rem_pio2f+0x5a>
 800b2c6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b47c <__ieee754_rem_pio2f+0x254>
 800b2ca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b480 <__ieee754_rem_pio2f+0x258>
 800b2ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b2d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b2d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b2da:	edc0 6a00 	vstr	s13, [r0]
 800b2de:	e7eb      	b.n	800b2b8 <__ieee754_rem_pio2f+0x90>
 800b2e0:	4b68      	ldr	r3, [pc, #416]	; (800b484 <__ieee754_rem_pio2f+0x25c>)
 800b2e2:	429d      	cmp	r5, r3
 800b2e4:	dc72      	bgt.n	800b3cc <__ieee754_rem_pio2f+0x1a4>
 800b2e6:	f001 fb81 	bl	800c9ec <fabsf>
 800b2ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b488 <__ieee754_rem_pio2f+0x260>
 800b2ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b2f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b2f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2fe:	ee17 0a90 	vmov	r0, s15
 800b302:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b470 <__ieee754_rem_pio2f+0x248>
 800b306:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b30a:	281f      	cmp	r0, #31
 800b30c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b478 <__ieee754_rem_pio2f+0x250>
 800b310:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b314:	eeb1 6a47 	vneg.f32	s12, s14
 800b318:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b31c:	ee16 2a90 	vmov	r2, s13
 800b320:	dc1c      	bgt.n	800b35c <__ieee754_rem_pio2f+0x134>
 800b322:	495a      	ldr	r1, [pc, #360]	; (800b48c <__ieee754_rem_pio2f+0x264>)
 800b324:	1e47      	subs	r7, r0, #1
 800b326:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b32a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b32e:	428b      	cmp	r3, r1
 800b330:	d014      	beq.n	800b35c <__ieee754_rem_pio2f+0x134>
 800b332:	6022      	str	r2, [r4, #0]
 800b334:	ed94 7a00 	vldr	s14, [r4]
 800b338:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b33c:	2e00      	cmp	r6, #0
 800b33e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b342:	ed84 0a01 	vstr	s0, [r4, #4]
 800b346:	da9c      	bge.n	800b282 <__ieee754_rem_pio2f+0x5a>
 800b348:	eeb1 7a47 	vneg.f32	s14, s14
 800b34c:	eeb1 0a40 	vneg.f32	s0, s0
 800b350:	ed84 7a00 	vstr	s14, [r4]
 800b354:	ed84 0a01 	vstr	s0, [r4, #4]
 800b358:	4240      	negs	r0, r0
 800b35a:	e792      	b.n	800b282 <__ieee754_rem_pio2f+0x5a>
 800b35c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b360:	15eb      	asrs	r3, r5, #23
 800b362:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b366:	2d08      	cmp	r5, #8
 800b368:	dde3      	ble.n	800b332 <__ieee754_rem_pio2f+0x10a>
 800b36a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b47c <__ieee754_rem_pio2f+0x254>
 800b36e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b480 <__ieee754_rem_pio2f+0x258>
 800b372:	eef0 6a40 	vmov.f32	s13, s0
 800b376:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b37a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b37e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b382:	eef0 7a40 	vmov.f32	s15, s0
 800b386:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b38a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b38e:	ee15 2a90 	vmov	r2, s11
 800b392:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b396:	1a5b      	subs	r3, r3, r1
 800b398:	2b19      	cmp	r3, #25
 800b39a:	dc04      	bgt.n	800b3a6 <__ieee754_rem_pio2f+0x17e>
 800b39c:	edc4 5a00 	vstr	s11, [r4]
 800b3a0:	eeb0 0a66 	vmov.f32	s0, s13
 800b3a4:	e7c6      	b.n	800b334 <__ieee754_rem_pio2f+0x10c>
 800b3a6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b490 <__ieee754_rem_pio2f+0x268>
 800b3aa:	eeb0 0a66 	vmov.f32	s0, s13
 800b3ae:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b3b2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b3b6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b494 <__ieee754_rem_pio2f+0x26c>
 800b3ba:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b3be:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b3c2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b3c6:	ed84 7a00 	vstr	s14, [r4]
 800b3ca:	e7b3      	b.n	800b334 <__ieee754_rem_pio2f+0x10c>
 800b3cc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b3d0:	db06      	blt.n	800b3e0 <__ieee754_rem_pio2f+0x1b8>
 800b3d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b3d6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3da:	edc0 7a00 	vstr	s15, [r0]
 800b3de:	e733      	b.n	800b248 <__ieee754_rem_pio2f+0x20>
 800b3e0:	15ea      	asrs	r2, r5, #23
 800b3e2:	3a86      	subs	r2, #134	; 0x86
 800b3e4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b3e8:	ee07 3a90 	vmov	s15, r3
 800b3ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b3f0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b498 <__ieee754_rem_pio2f+0x270>
 800b3f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b3f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3fc:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b400:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b404:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b410:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b420:	edcd 7a05 	vstr	s15, [sp, #20]
 800b424:	d11e      	bne.n	800b464 <__ieee754_rem_pio2f+0x23c>
 800b426:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42e:	bf14      	ite	ne
 800b430:	2302      	movne	r3, #2
 800b432:	2301      	moveq	r3, #1
 800b434:	4919      	ldr	r1, [pc, #100]	; (800b49c <__ieee754_rem_pio2f+0x274>)
 800b436:	9101      	str	r1, [sp, #4]
 800b438:	2102      	movs	r1, #2
 800b43a:	9100      	str	r1, [sp, #0]
 800b43c:	a803      	add	r0, sp, #12
 800b43e:	4621      	mov	r1, r4
 800b440:	f000 fd64 	bl	800bf0c <__kernel_rem_pio2f>
 800b444:	2e00      	cmp	r6, #0
 800b446:	f6bf af1c 	bge.w	800b282 <__ieee754_rem_pio2f+0x5a>
 800b44a:	edd4 7a00 	vldr	s15, [r4]
 800b44e:	eef1 7a67 	vneg.f32	s15, s15
 800b452:	edc4 7a00 	vstr	s15, [r4]
 800b456:	edd4 7a01 	vldr	s15, [r4, #4]
 800b45a:	eef1 7a67 	vneg.f32	s15, s15
 800b45e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b462:	e779      	b.n	800b358 <__ieee754_rem_pio2f+0x130>
 800b464:	2303      	movs	r3, #3
 800b466:	e7e5      	b.n	800b434 <__ieee754_rem_pio2f+0x20c>
 800b468:	3f490fd8 	.word	0x3f490fd8
 800b46c:	4016cbe3 	.word	0x4016cbe3
 800b470:	3fc90f80 	.word	0x3fc90f80
 800b474:	3fc90fd0 	.word	0x3fc90fd0
 800b478:	37354443 	.word	0x37354443
 800b47c:	37354400 	.word	0x37354400
 800b480:	2e85a308 	.word	0x2e85a308
 800b484:	43490f80 	.word	0x43490f80
 800b488:	3f22f984 	.word	0x3f22f984
 800b48c:	0800d090 	.word	0x0800d090
 800b490:	2e85a300 	.word	0x2e85a300
 800b494:	248d3132 	.word	0x248d3132
 800b498:	43800000 	.word	0x43800000
 800b49c:	0800d110 	.word	0x0800d110

0800b4a0 <__kernel_cos>:
 800b4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	ec57 6b10 	vmov	r6, r7, d0
 800b4a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b4ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b4b0:	ed8d 1b00 	vstr	d1, [sp]
 800b4b4:	da07      	bge.n	800b4c6 <__kernel_cos+0x26>
 800b4b6:	ee10 0a10 	vmov	r0, s0
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	f7f5 fb2e 	bl	8000b1c <__aeabi_d2iz>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f000 8088 	beq.w	800b5d6 <__kernel_cos+0x136>
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	463b      	mov	r3, r7
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f7f5 f88b 	bl	80005e8 <__aeabi_dmul>
 800b4d2:	4b51      	ldr	r3, [pc, #324]	; (800b618 <__kernel_cos+0x178>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	f7f5 f885 	bl	80005e8 <__aeabi_dmul>
 800b4de:	a340      	add	r3, pc, #256	; (adr r3, 800b5e0 <__kernel_cos+0x140>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	468b      	mov	fp, r1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7f5 f87c 	bl	80005e8 <__aeabi_dmul>
 800b4f0:	a33d      	add	r3, pc, #244	; (adr r3, 800b5e8 <__kernel_cos+0x148>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fec1 	bl	800027c <__adddf3>
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	f7f5 f873 	bl	80005e8 <__aeabi_dmul>
 800b502:	a33b      	add	r3, pc, #236	; (adr r3, 800b5f0 <__kernel_cos+0x150>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 feb6 	bl	8000278 <__aeabi_dsub>
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	f7f5 f86a 	bl	80005e8 <__aeabi_dmul>
 800b514:	a338      	add	r3, pc, #224	; (adr r3, 800b5f8 <__kernel_cos+0x158>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 feaf 	bl	800027c <__adddf3>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f5 f861 	bl	80005e8 <__aeabi_dmul>
 800b526:	a336      	add	r3, pc, #216	; (adr r3, 800b600 <__kernel_cos+0x160>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 fea4 	bl	8000278 <__aeabi_dsub>
 800b530:	4622      	mov	r2, r4
 800b532:	462b      	mov	r3, r5
 800b534:	f7f5 f858 	bl	80005e8 <__aeabi_dmul>
 800b538:	a333      	add	r3, pc, #204	; (adr r3, 800b608 <__kernel_cos+0x168>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f4 fe9d 	bl	800027c <__adddf3>
 800b542:	4622      	mov	r2, r4
 800b544:	462b      	mov	r3, r5
 800b546:	f7f5 f84f 	bl	80005e8 <__aeabi_dmul>
 800b54a:	4622      	mov	r2, r4
 800b54c:	462b      	mov	r3, r5
 800b54e:	f7f5 f84b 	bl	80005e8 <__aeabi_dmul>
 800b552:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b556:	4604      	mov	r4, r0
 800b558:	460d      	mov	r5, r1
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	f7f5 f843 	bl	80005e8 <__aeabi_dmul>
 800b562:	460b      	mov	r3, r1
 800b564:	4602      	mov	r2, r0
 800b566:	4629      	mov	r1, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	f7f4 fe85 	bl	8000278 <__aeabi_dsub>
 800b56e:	4b2b      	ldr	r3, [pc, #172]	; (800b61c <__kernel_cos+0x17c>)
 800b570:	4598      	cmp	r8, r3
 800b572:	4606      	mov	r6, r0
 800b574:	460f      	mov	r7, r1
 800b576:	dc10      	bgt.n	800b59a <__kernel_cos+0xfa>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4650      	mov	r0, sl
 800b57e:	4659      	mov	r1, fp
 800b580:	f7f4 fe7a 	bl	8000278 <__aeabi_dsub>
 800b584:	460b      	mov	r3, r1
 800b586:	4926      	ldr	r1, [pc, #152]	; (800b620 <__kernel_cos+0x180>)
 800b588:	4602      	mov	r2, r0
 800b58a:	2000      	movs	r0, #0
 800b58c:	f7f4 fe74 	bl	8000278 <__aeabi_dsub>
 800b590:	ec41 0b10 	vmov	d0, r0, r1
 800b594:	b003      	add	sp, #12
 800b596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59a:	4b22      	ldr	r3, [pc, #136]	; (800b624 <__kernel_cos+0x184>)
 800b59c:	4920      	ldr	r1, [pc, #128]	; (800b620 <__kernel_cos+0x180>)
 800b59e:	4598      	cmp	r8, r3
 800b5a0:	bfcc      	ite	gt
 800b5a2:	4d21      	ldrgt	r5, [pc, #132]	; (800b628 <__kernel_cos+0x188>)
 800b5a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b5a8:	2400      	movs	r4, #0
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	462b      	mov	r3, r5
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	f7f4 fe62 	bl	8000278 <__aeabi_dsub>
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	4650      	mov	r0, sl
 800b5be:	4659      	mov	r1, fp
 800b5c0:	f7f4 fe5a 	bl	8000278 <__aeabi_dsub>
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	463b      	mov	r3, r7
 800b5c8:	f7f4 fe56 	bl	8000278 <__aeabi_dsub>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	e7da      	b.n	800b58c <__kernel_cos+0xec>
 800b5d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b610 <__kernel_cos+0x170>
 800b5da:	e7db      	b.n	800b594 <__kernel_cos+0xf4>
 800b5dc:	f3af 8000 	nop.w
 800b5e0:	be8838d4 	.word	0xbe8838d4
 800b5e4:	bda8fae9 	.word	0xbda8fae9
 800b5e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b5ec:	3e21ee9e 	.word	0x3e21ee9e
 800b5f0:	809c52ad 	.word	0x809c52ad
 800b5f4:	3e927e4f 	.word	0x3e927e4f
 800b5f8:	19cb1590 	.word	0x19cb1590
 800b5fc:	3efa01a0 	.word	0x3efa01a0
 800b600:	16c15177 	.word	0x16c15177
 800b604:	3f56c16c 	.word	0x3f56c16c
 800b608:	5555554c 	.word	0x5555554c
 800b60c:	3fa55555 	.word	0x3fa55555
 800b610:	00000000 	.word	0x00000000
 800b614:	3ff00000 	.word	0x3ff00000
 800b618:	3fe00000 	.word	0x3fe00000
 800b61c:	3fd33332 	.word	0x3fd33332
 800b620:	3ff00000 	.word	0x3ff00000
 800b624:	3fe90000 	.word	0x3fe90000
 800b628:	3fd20000 	.word	0x3fd20000
 800b62c:	00000000 	.word	0x00000000

0800b630 <__kernel_rem_pio2>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	ed2d 8b02 	vpush	{d8}
 800b638:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b63c:	f112 0f14 	cmn.w	r2, #20
 800b640:	9308      	str	r3, [sp, #32]
 800b642:	9101      	str	r1, [sp, #4]
 800b644:	4bc4      	ldr	r3, [pc, #784]	; (800b958 <__kernel_rem_pio2+0x328>)
 800b646:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b648:	900b      	str	r0, [sp, #44]	; 0x2c
 800b64a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b64e:	9302      	str	r3, [sp, #8]
 800b650:	9b08      	ldr	r3, [sp, #32]
 800b652:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b656:	bfa8      	it	ge
 800b658:	1ed4      	subge	r4, r2, #3
 800b65a:	9306      	str	r3, [sp, #24]
 800b65c:	bfb2      	itee	lt
 800b65e:	2400      	movlt	r4, #0
 800b660:	2318      	movge	r3, #24
 800b662:	fb94 f4f3 	sdivge	r4, r4, r3
 800b666:	f06f 0317 	mvn.w	r3, #23
 800b66a:	fb04 3303 	mla	r3, r4, r3, r3
 800b66e:	eb03 0a02 	add.w	sl, r3, r2
 800b672:	9b02      	ldr	r3, [sp, #8]
 800b674:	9a06      	ldr	r2, [sp, #24]
 800b676:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b948 <__kernel_rem_pio2+0x318>
 800b67a:	eb03 0802 	add.w	r8, r3, r2
 800b67e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b680:	1aa7      	subs	r7, r4, r2
 800b682:	ae22      	add	r6, sp, #136	; 0x88
 800b684:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b688:	2500      	movs	r5, #0
 800b68a:	4545      	cmp	r5, r8
 800b68c:	dd13      	ble.n	800b6b6 <__kernel_rem_pio2+0x86>
 800b68e:	9b08      	ldr	r3, [sp, #32]
 800b690:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b948 <__kernel_rem_pio2+0x318>
 800b694:	aa22      	add	r2, sp, #136	; 0x88
 800b696:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b69a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b69e:	f04f 0800 	mov.w	r8, #0
 800b6a2:	9b02      	ldr	r3, [sp, #8]
 800b6a4:	4598      	cmp	r8, r3
 800b6a6:	dc2f      	bgt.n	800b708 <__kernel_rem_pio2+0xd8>
 800b6a8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b6ac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b6b0:	462f      	mov	r7, r5
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	e01b      	b.n	800b6ee <__kernel_rem_pio2+0xbe>
 800b6b6:	42ef      	cmn	r7, r5
 800b6b8:	d407      	bmi.n	800b6ca <__kernel_rem_pio2+0x9a>
 800b6ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b6be:	f7f4 ff29 	bl	8000514 <__aeabi_i2d>
 800b6c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b6c6:	3501      	adds	r5, #1
 800b6c8:	e7df      	b.n	800b68a <__kernel_rem_pio2+0x5a>
 800b6ca:	ec51 0b18 	vmov	r0, r1, d8
 800b6ce:	e7f8      	b.n	800b6c2 <__kernel_rem_pio2+0x92>
 800b6d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b6d8:	f7f4 ff86 	bl	80005e8 <__aeabi_dmul>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e4:	f7f4 fdca 	bl	800027c <__adddf3>
 800b6e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	9b06      	ldr	r3, [sp, #24]
 800b6f0:	429e      	cmp	r6, r3
 800b6f2:	f1a7 0708 	sub.w	r7, r7, #8
 800b6f6:	ddeb      	ble.n	800b6d0 <__kernel_rem_pio2+0xa0>
 800b6f8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b6fc:	f108 0801 	add.w	r8, r8, #1
 800b700:	ecab 7b02 	vstmia	fp!, {d7}
 800b704:	3508      	adds	r5, #8
 800b706:	e7cc      	b.n	800b6a2 <__kernel_rem_pio2+0x72>
 800b708:	9b02      	ldr	r3, [sp, #8]
 800b70a:	aa0e      	add	r2, sp, #56	; 0x38
 800b70c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b710:	930d      	str	r3, [sp, #52]	; 0x34
 800b712:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b714:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b718:	9c02      	ldr	r4, [sp, #8]
 800b71a:	930c      	str	r3, [sp, #48]	; 0x30
 800b71c:	00e3      	lsls	r3, r4, #3
 800b71e:	930a      	str	r3, [sp, #40]	; 0x28
 800b720:	ab9a      	add	r3, sp, #616	; 0x268
 800b722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b726:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b72a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b72e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b730:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b734:	46c3      	mov	fp, r8
 800b736:	46a1      	mov	r9, r4
 800b738:	f1b9 0f00 	cmp.w	r9, #0
 800b73c:	f1a5 0508 	sub.w	r5, r5, #8
 800b740:	dc77      	bgt.n	800b832 <__kernel_rem_pio2+0x202>
 800b742:	ec47 6b10 	vmov	d0, r6, r7
 800b746:	4650      	mov	r0, sl
 800b748:	f001 f8ca 	bl	800c8e0 <scalbn>
 800b74c:	ec57 6b10 	vmov	r6, r7, d0
 800b750:	2200      	movs	r2, #0
 800b752:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b756:	ee10 0a10 	vmov	r0, s0
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f4 ff44 	bl	80005e8 <__aeabi_dmul>
 800b760:	ec41 0b10 	vmov	d0, r0, r1
 800b764:	f001 f83c 	bl	800c7e0 <floor>
 800b768:	4b7c      	ldr	r3, [pc, #496]	; (800b95c <__kernel_rem_pio2+0x32c>)
 800b76a:	ec51 0b10 	vmov	r0, r1, d0
 800b76e:	2200      	movs	r2, #0
 800b770:	f7f4 ff3a 	bl	80005e8 <__aeabi_dmul>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4630      	mov	r0, r6
 800b77a:	4639      	mov	r1, r7
 800b77c:	f7f4 fd7c 	bl	8000278 <__aeabi_dsub>
 800b780:	460f      	mov	r7, r1
 800b782:	4606      	mov	r6, r0
 800b784:	f7f5 f9ca 	bl	8000b1c <__aeabi_d2iz>
 800b788:	9004      	str	r0, [sp, #16]
 800b78a:	f7f4 fec3 	bl	8000514 <__aeabi_i2d>
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	4630      	mov	r0, r6
 800b794:	4639      	mov	r1, r7
 800b796:	f7f4 fd6f 	bl	8000278 <__aeabi_dsub>
 800b79a:	f1ba 0f00 	cmp.w	sl, #0
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460f      	mov	r7, r1
 800b7a2:	dd6d      	ble.n	800b880 <__kernel_rem_pio2+0x250>
 800b7a4:	1e62      	subs	r2, r4, #1
 800b7a6:	ab0e      	add	r3, sp, #56	; 0x38
 800b7a8:	9d04      	ldr	r5, [sp, #16]
 800b7aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b7ae:	f1ca 0118 	rsb	r1, sl, #24
 800b7b2:	fa40 f301 	asr.w	r3, r0, r1
 800b7b6:	441d      	add	r5, r3
 800b7b8:	408b      	lsls	r3, r1
 800b7ba:	1ac0      	subs	r0, r0, r3
 800b7bc:	ab0e      	add	r3, sp, #56	; 0x38
 800b7be:	9504      	str	r5, [sp, #16]
 800b7c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b7c4:	f1ca 0317 	rsb	r3, sl, #23
 800b7c8:	fa40 fb03 	asr.w	fp, r0, r3
 800b7cc:	f1bb 0f00 	cmp.w	fp, #0
 800b7d0:	dd65      	ble.n	800b89e <__kernel_rem_pio2+0x26e>
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	4615      	mov	r5, r2
 800b7dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b7e0:	4294      	cmp	r4, r2
 800b7e2:	f300 809c 	bgt.w	800b91e <__kernel_rem_pio2+0x2ee>
 800b7e6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ea:	dd07      	ble.n	800b7fc <__kernel_rem_pio2+0x1cc>
 800b7ec:	f1ba 0f01 	cmp.w	sl, #1
 800b7f0:	f000 80c0 	beq.w	800b974 <__kernel_rem_pio2+0x344>
 800b7f4:	f1ba 0f02 	cmp.w	sl, #2
 800b7f8:	f000 80c6 	beq.w	800b988 <__kernel_rem_pio2+0x358>
 800b7fc:	f1bb 0f02 	cmp.w	fp, #2
 800b800:	d14d      	bne.n	800b89e <__kernel_rem_pio2+0x26e>
 800b802:	4632      	mov	r2, r6
 800b804:	463b      	mov	r3, r7
 800b806:	4956      	ldr	r1, [pc, #344]	; (800b960 <__kernel_rem_pio2+0x330>)
 800b808:	2000      	movs	r0, #0
 800b80a:	f7f4 fd35 	bl	8000278 <__aeabi_dsub>
 800b80e:	4606      	mov	r6, r0
 800b810:	460f      	mov	r7, r1
 800b812:	2d00      	cmp	r5, #0
 800b814:	d043      	beq.n	800b89e <__kernel_rem_pio2+0x26e>
 800b816:	4650      	mov	r0, sl
 800b818:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b950 <__kernel_rem_pio2+0x320>
 800b81c:	f001 f860 	bl	800c8e0 <scalbn>
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	ec53 2b10 	vmov	r2, r3, d0
 800b828:	f7f4 fd26 	bl	8000278 <__aeabi_dsub>
 800b82c:	4606      	mov	r6, r0
 800b82e:	460f      	mov	r7, r1
 800b830:	e035      	b.n	800b89e <__kernel_rem_pio2+0x26e>
 800b832:	4b4c      	ldr	r3, [pc, #304]	; (800b964 <__kernel_rem_pio2+0x334>)
 800b834:	2200      	movs	r2, #0
 800b836:	4630      	mov	r0, r6
 800b838:	4639      	mov	r1, r7
 800b83a:	f7f4 fed5 	bl	80005e8 <__aeabi_dmul>
 800b83e:	f7f5 f96d 	bl	8000b1c <__aeabi_d2iz>
 800b842:	f7f4 fe67 	bl	8000514 <__aeabi_i2d>
 800b846:	4602      	mov	r2, r0
 800b848:	460b      	mov	r3, r1
 800b84a:	ec43 2b18 	vmov	d8, r2, r3
 800b84e:	4b46      	ldr	r3, [pc, #280]	; (800b968 <__kernel_rem_pio2+0x338>)
 800b850:	2200      	movs	r2, #0
 800b852:	f7f4 fec9 	bl	80005e8 <__aeabi_dmul>
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	4630      	mov	r0, r6
 800b85c:	4639      	mov	r1, r7
 800b85e:	f7f4 fd0b 	bl	8000278 <__aeabi_dsub>
 800b862:	f7f5 f95b 	bl	8000b1c <__aeabi_d2iz>
 800b866:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b86a:	f84b 0b04 	str.w	r0, [fp], #4
 800b86e:	ec51 0b18 	vmov	r0, r1, d8
 800b872:	f7f4 fd03 	bl	800027c <__adddf3>
 800b876:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b87a:	4606      	mov	r6, r0
 800b87c:	460f      	mov	r7, r1
 800b87e:	e75b      	b.n	800b738 <__kernel_rem_pio2+0x108>
 800b880:	d106      	bne.n	800b890 <__kernel_rem_pio2+0x260>
 800b882:	1e63      	subs	r3, r4, #1
 800b884:	aa0e      	add	r2, sp, #56	; 0x38
 800b886:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b88a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b88e:	e79d      	b.n	800b7cc <__kernel_rem_pio2+0x19c>
 800b890:	4b36      	ldr	r3, [pc, #216]	; (800b96c <__kernel_rem_pio2+0x33c>)
 800b892:	2200      	movs	r2, #0
 800b894:	f7f5 f92e 	bl	8000af4 <__aeabi_dcmpge>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d13d      	bne.n	800b918 <__kernel_rem_pio2+0x2e8>
 800b89c:	4683      	mov	fp, r0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	4639      	mov	r1, r7
 800b8a6:	f7f5 f907 	bl	8000ab8 <__aeabi_dcmpeq>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f000 80c0 	beq.w	800ba30 <__kernel_rem_pio2+0x400>
 800b8b0:	1e65      	subs	r5, r4, #1
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	9902      	ldr	r1, [sp, #8]
 800b8b8:	428b      	cmp	r3, r1
 800b8ba:	da6c      	bge.n	800b996 <__kernel_rem_pio2+0x366>
 800b8bc:	2a00      	cmp	r2, #0
 800b8be:	f000 8089 	beq.w	800b9d4 <__kernel_rem_pio2+0x3a4>
 800b8c2:	ab0e      	add	r3, sp, #56	; 0x38
 800b8c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b8c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f000 80ad 	beq.w	800ba2c <__kernel_rem_pio2+0x3fc>
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b950 <__kernel_rem_pio2+0x320>
 800b8d8:	f001 f802 	bl	800c8e0 <scalbn>
 800b8dc:	ab9a      	add	r3, sp, #616	; 0x268
 800b8de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b8e2:	ec57 6b10 	vmov	r6, r7, d0
 800b8e6:	00ec      	lsls	r4, r5, #3
 800b8e8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b8ec:	46aa      	mov	sl, r5
 800b8ee:	f1ba 0f00 	cmp.w	sl, #0
 800b8f2:	f280 80d6 	bge.w	800baa2 <__kernel_rem_pio2+0x472>
 800b8f6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b948 <__kernel_rem_pio2+0x318>
 800b8fa:	462e      	mov	r6, r5
 800b8fc:	2e00      	cmp	r6, #0
 800b8fe:	f2c0 8104 	blt.w	800bb0a <__kernel_rem_pio2+0x4da>
 800b902:	ab72      	add	r3, sp, #456	; 0x1c8
 800b904:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b908:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b970 <__kernel_rem_pio2+0x340>
 800b90c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b910:	f04f 0800 	mov.w	r8, #0
 800b914:	1baf      	subs	r7, r5, r6
 800b916:	e0ea      	b.n	800baee <__kernel_rem_pio2+0x4be>
 800b918:	f04f 0b02 	mov.w	fp, #2
 800b91c:	e759      	b.n	800b7d2 <__kernel_rem_pio2+0x1a2>
 800b91e:	f8d8 3000 	ldr.w	r3, [r8]
 800b922:	b955      	cbnz	r5, 800b93a <__kernel_rem_pio2+0x30a>
 800b924:	b123      	cbz	r3, 800b930 <__kernel_rem_pio2+0x300>
 800b926:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b92a:	f8c8 3000 	str.w	r3, [r8]
 800b92e:	2301      	movs	r3, #1
 800b930:	3201      	adds	r2, #1
 800b932:	f108 0804 	add.w	r8, r8, #4
 800b936:	461d      	mov	r5, r3
 800b938:	e752      	b.n	800b7e0 <__kernel_rem_pio2+0x1b0>
 800b93a:	1acb      	subs	r3, r1, r3
 800b93c:	f8c8 3000 	str.w	r3, [r8]
 800b940:	462b      	mov	r3, r5
 800b942:	e7f5      	b.n	800b930 <__kernel_rem_pio2+0x300>
 800b944:	f3af 8000 	nop.w
	...
 800b954:	3ff00000 	.word	0x3ff00000
 800b958:	0800d468 	.word	0x0800d468
 800b95c:	40200000 	.word	0x40200000
 800b960:	3ff00000 	.word	0x3ff00000
 800b964:	3e700000 	.word	0x3e700000
 800b968:	41700000 	.word	0x41700000
 800b96c:	3fe00000 	.word	0x3fe00000
 800b970:	0800d428 	.word	0x0800d428
 800b974:	1e62      	subs	r2, r4, #1
 800b976:	ab0e      	add	r3, sp, #56	; 0x38
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b980:	a90e      	add	r1, sp, #56	; 0x38
 800b982:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b986:	e739      	b.n	800b7fc <__kernel_rem_pio2+0x1cc>
 800b988:	1e62      	subs	r2, r4, #1
 800b98a:	ab0e      	add	r3, sp, #56	; 0x38
 800b98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b990:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b994:	e7f4      	b.n	800b980 <__kernel_rem_pio2+0x350>
 800b996:	a90e      	add	r1, sp, #56	; 0x38
 800b998:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b99c:	3b01      	subs	r3, #1
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	e789      	b.n	800b8b6 <__kernel_rem_pio2+0x286>
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b9a8:	2900      	cmp	r1, #0
 800b9aa:	d0fa      	beq.n	800b9a2 <__kernel_rem_pio2+0x372>
 800b9ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9ae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b9b2:	446a      	add	r2, sp
 800b9b4:	3a98      	subs	r2, #152	; 0x98
 800b9b6:	920a      	str	r2, [sp, #40]	; 0x28
 800b9b8:	9a08      	ldr	r2, [sp, #32]
 800b9ba:	18e3      	adds	r3, r4, r3
 800b9bc:	18a5      	adds	r5, r4, r2
 800b9be:	aa22      	add	r2, sp, #136	; 0x88
 800b9c0:	f104 0801 	add.w	r8, r4, #1
 800b9c4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b9c8:	9304      	str	r3, [sp, #16]
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	4543      	cmp	r3, r8
 800b9ce:	da04      	bge.n	800b9da <__kernel_rem_pio2+0x3aa>
 800b9d0:	461c      	mov	r4, r3
 800b9d2:	e6a3      	b.n	800b71c <__kernel_rem_pio2+0xec>
 800b9d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e7e4      	b.n	800b9a4 <__kernel_rem_pio2+0x374>
 800b9da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9dc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b9e0:	f7f4 fd98 	bl	8000514 <__aeabi_i2d>
 800b9e4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ea:	46ab      	mov	fp, r5
 800b9ec:	461c      	mov	r4, r3
 800b9ee:	f04f 0900 	mov.w	r9, #0
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	2700      	movs	r7, #0
 800b9f6:	9b06      	ldr	r3, [sp, #24]
 800b9f8:	4599      	cmp	r9, r3
 800b9fa:	dd06      	ble.n	800ba0a <__kernel_rem_pio2+0x3da>
 800b9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9fe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ba02:	f108 0801 	add.w	r8, r8, #1
 800ba06:	930a      	str	r3, [sp, #40]	; 0x28
 800ba08:	e7df      	b.n	800b9ca <__kernel_rem_pio2+0x39a>
 800ba0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ba0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ba12:	f7f4 fde9 	bl	80005e8 <__aeabi_dmul>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	4639      	mov	r1, r7
 800ba1e:	f7f4 fc2d 	bl	800027c <__adddf3>
 800ba22:	f109 0901 	add.w	r9, r9, #1
 800ba26:	4606      	mov	r6, r0
 800ba28:	460f      	mov	r7, r1
 800ba2a:	e7e4      	b.n	800b9f6 <__kernel_rem_pio2+0x3c6>
 800ba2c:	3d01      	subs	r5, #1
 800ba2e:	e748      	b.n	800b8c2 <__kernel_rem_pio2+0x292>
 800ba30:	ec47 6b10 	vmov	d0, r6, r7
 800ba34:	f1ca 0000 	rsb	r0, sl, #0
 800ba38:	f000 ff52 	bl	800c8e0 <scalbn>
 800ba3c:	ec57 6b10 	vmov	r6, r7, d0
 800ba40:	4ba0      	ldr	r3, [pc, #640]	; (800bcc4 <__kernel_rem_pio2+0x694>)
 800ba42:	ee10 0a10 	vmov	r0, s0
 800ba46:	2200      	movs	r2, #0
 800ba48:	4639      	mov	r1, r7
 800ba4a:	f7f5 f853 	bl	8000af4 <__aeabi_dcmpge>
 800ba4e:	b1f8      	cbz	r0, 800ba90 <__kernel_rem_pio2+0x460>
 800ba50:	4b9d      	ldr	r3, [pc, #628]	; (800bcc8 <__kernel_rem_pio2+0x698>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f7f4 fdc6 	bl	80005e8 <__aeabi_dmul>
 800ba5c:	f7f5 f85e 	bl	8000b1c <__aeabi_d2iz>
 800ba60:	4680      	mov	r8, r0
 800ba62:	f7f4 fd57 	bl	8000514 <__aeabi_i2d>
 800ba66:	4b97      	ldr	r3, [pc, #604]	; (800bcc4 <__kernel_rem_pio2+0x694>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f7f4 fdbd 	bl	80005e8 <__aeabi_dmul>
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4602      	mov	r2, r0
 800ba72:	4639      	mov	r1, r7
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7f4 fbff 	bl	8000278 <__aeabi_dsub>
 800ba7a:	f7f5 f84f 	bl	8000b1c <__aeabi_d2iz>
 800ba7e:	1c65      	adds	r5, r4, #1
 800ba80:	ab0e      	add	r3, sp, #56	; 0x38
 800ba82:	f10a 0a18 	add.w	sl, sl, #24
 800ba86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ba8e:	e720      	b.n	800b8d2 <__kernel_rem_pio2+0x2a2>
 800ba90:	4630      	mov	r0, r6
 800ba92:	4639      	mov	r1, r7
 800ba94:	f7f5 f842 	bl	8000b1c <__aeabi_d2iz>
 800ba98:	ab0e      	add	r3, sp, #56	; 0x38
 800ba9a:	4625      	mov	r5, r4
 800ba9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800baa0:	e717      	b.n	800b8d2 <__kernel_rem_pio2+0x2a2>
 800baa2:	ab0e      	add	r3, sp, #56	; 0x38
 800baa4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800baa8:	f7f4 fd34 	bl	8000514 <__aeabi_i2d>
 800baac:	4632      	mov	r2, r6
 800baae:	463b      	mov	r3, r7
 800bab0:	f7f4 fd9a 	bl	80005e8 <__aeabi_dmul>
 800bab4:	4b84      	ldr	r3, [pc, #528]	; (800bcc8 <__kernel_rem_pio2+0x698>)
 800bab6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800baba:	2200      	movs	r2, #0
 800babc:	4630      	mov	r0, r6
 800babe:	4639      	mov	r1, r7
 800bac0:	f7f4 fd92 	bl	80005e8 <__aeabi_dmul>
 800bac4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bac8:	4606      	mov	r6, r0
 800baca:	460f      	mov	r7, r1
 800bacc:	e70f      	b.n	800b8ee <__kernel_rem_pio2+0x2be>
 800bace:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bad2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bad6:	f7f4 fd87 	bl	80005e8 <__aeabi_dmul>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bae2:	f7f4 fbcb 	bl	800027c <__adddf3>
 800bae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800baea:	f108 0801 	add.w	r8, r8, #1
 800baee:	9b02      	ldr	r3, [sp, #8]
 800baf0:	4598      	cmp	r8, r3
 800baf2:	dc01      	bgt.n	800baf8 <__kernel_rem_pio2+0x4c8>
 800baf4:	45b8      	cmp	r8, r7
 800baf6:	ddea      	ble.n	800bace <__kernel_rem_pio2+0x49e>
 800baf8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bafc:	ab4a      	add	r3, sp, #296	; 0x128
 800bafe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bb02:	ed87 7b00 	vstr	d7, [r7]
 800bb06:	3e01      	subs	r6, #1
 800bb08:	e6f8      	b.n	800b8fc <__kernel_rem_pio2+0x2cc>
 800bb0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	dc0b      	bgt.n	800bb28 <__kernel_rem_pio2+0x4f8>
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	dc35      	bgt.n	800bb80 <__kernel_rem_pio2+0x550>
 800bb14:	d059      	beq.n	800bbca <__kernel_rem_pio2+0x59a>
 800bb16:	9b04      	ldr	r3, [sp, #16]
 800bb18:	f003 0007 	and.w	r0, r3, #7
 800bb1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bb20:	ecbd 8b02 	vpop	{d8}
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d1f3      	bne.n	800bb16 <__kernel_rem_pio2+0x4e6>
 800bb2e:	ab4a      	add	r3, sp, #296	; 0x128
 800bb30:	4423      	add	r3, r4
 800bb32:	9306      	str	r3, [sp, #24]
 800bb34:	461c      	mov	r4, r3
 800bb36:	469a      	mov	sl, r3
 800bb38:	9502      	str	r5, [sp, #8]
 800bb3a:	9b02      	ldr	r3, [sp, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f1aa 0a08 	sub.w	sl, sl, #8
 800bb42:	dc6b      	bgt.n	800bc1c <__kernel_rem_pio2+0x5ec>
 800bb44:	46aa      	mov	sl, r5
 800bb46:	f1ba 0f01 	cmp.w	sl, #1
 800bb4a:	f1a4 0408 	sub.w	r4, r4, #8
 800bb4e:	f300 8085 	bgt.w	800bc5c <__kernel_rem_pio2+0x62c>
 800bb52:	9c06      	ldr	r4, [sp, #24]
 800bb54:	2000      	movs	r0, #0
 800bb56:	3408      	adds	r4, #8
 800bb58:	2100      	movs	r1, #0
 800bb5a:	2d01      	cmp	r5, #1
 800bb5c:	f300 809d 	bgt.w	800bc9a <__kernel_rem_pio2+0x66a>
 800bb60:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bb64:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800bb68:	f1bb 0f00 	cmp.w	fp, #0
 800bb6c:	f040 809b 	bne.w	800bca6 <__kernel_rem_pio2+0x676>
 800bb70:	9b01      	ldr	r3, [sp, #4]
 800bb72:	e9c3 5600 	strd	r5, r6, [r3]
 800bb76:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bb7a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bb7e:	e7ca      	b.n	800bb16 <__kernel_rem_pio2+0x4e6>
 800bb80:	3408      	adds	r4, #8
 800bb82:	ab4a      	add	r3, sp, #296	; 0x128
 800bb84:	441c      	add	r4, r3
 800bb86:	462e      	mov	r6, r5
 800bb88:	2000      	movs	r0, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	2e00      	cmp	r6, #0
 800bb8e:	da36      	bge.n	800bbfe <__kernel_rem_pio2+0x5ce>
 800bb90:	f1bb 0f00 	cmp.w	fp, #0
 800bb94:	d039      	beq.n	800bc0a <__kernel_rem_pio2+0x5da>
 800bb96:	4602      	mov	r2, r0
 800bb98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb9c:	9c01      	ldr	r4, [sp, #4]
 800bb9e:	e9c4 2300 	strd	r2, r3, [r4]
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bbaa:	f7f4 fb65 	bl	8000278 <__aeabi_dsub>
 800bbae:	ae4c      	add	r6, sp, #304	; 0x130
 800bbb0:	2401      	movs	r4, #1
 800bbb2:	42a5      	cmp	r5, r4
 800bbb4:	da2c      	bge.n	800bc10 <__kernel_rem_pio2+0x5e0>
 800bbb6:	f1bb 0f00 	cmp.w	fp, #0
 800bbba:	d002      	beq.n	800bbc2 <__kernel_rem_pio2+0x592>
 800bbbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	9b01      	ldr	r3, [sp, #4]
 800bbc4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bbc8:	e7a5      	b.n	800bb16 <__kernel_rem_pio2+0x4e6>
 800bbca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800bbce:	eb0d 0403 	add.w	r4, sp, r3
 800bbd2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	2100      	movs	r1, #0
 800bbda:	2d00      	cmp	r5, #0
 800bbdc:	da09      	bge.n	800bbf2 <__kernel_rem_pio2+0x5c2>
 800bbde:	f1bb 0f00 	cmp.w	fp, #0
 800bbe2:	d002      	beq.n	800bbea <__kernel_rem_pio2+0x5ba>
 800bbe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbe8:	4619      	mov	r1, r3
 800bbea:	9b01      	ldr	r3, [sp, #4]
 800bbec:	e9c3 0100 	strd	r0, r1, [r3]
 800bbf0:	e791      	b.n	800bb16 <__kernel_rem_pio2+0x4e6>
 800bbf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bbf6:	f7f4 fb41 	bl	800027c <__adddf3>
 800bbfa:	3d01      	subs	r5, #1
 800bbfc:	e7ed      	b.n	800bbda <__kernel_rem_pio2+0x5aa>
 800bbfe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc02:	f7f4 fb3b 	bl	800027c <__adddf3>
 800bc06:	3e01      	subs	r6, #1
 800bc08:	e7c0      	b.n	800bb8c <__kernel_rem_pio2+0x55c>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	e7c5      	b.n	800bb9c <__kernel_rem_pio2+0x56c>
 800bc10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bc14:	f7f4 fb32 	bl	800027c <__adddf3>
 800bc18:	3401      	adds	r4, #1
 800bc1a:	e7ca      	b.n	800bbb2 <__kernel_rem_pio2+0x582>
 800bc1c:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bc24:	9b02      	ldr	r3, [sp, #8]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	4632      	mov	r2, r6
 800bc2c:	463b      	mov	r3, r7
 800bc2e:	4640      	mov	r0, r8
 800bc30:	4649      	mov	r1, r9
 800bc32:	f7f4 fb23 	bl	800027c <__adddf3>
 800bc36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fb19 	bl	8000278 <__aeabi_dsub>
 800bc46:	4632      	mov	r2, r6
 800bc48:	463b      	mov	r3, r7
 800bc4a:	f7f4 fb17 	bl	800027c <__adddf3>
 800bc4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800bc52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc56:	ed8a 7b00 	vstr	d7, [sl]
 800bc5a:	e76e      	b.n	800bb3a <__kernel_rem_pio2+0x50a>
 800bc5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bc60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bc64:	4640      	mov	r0, r8
 800bc66:	4632      	mov	r2, r6
 800bc68:	463b      	mov	r3, r7
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7f4 fb06 	bl	800027c <__adddf3>
 800bc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	f7f4 fafc 	bl	8000278 <__aeabi_dsub>
 800bc80:	4632      	mov	r2, r6
 800bc82:	463b      	mov	r3, r7
 800bc84:	f7f4 fafa 	bl	800027c <__adddf3>
 800bc88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc90:	ed84 7b00 	vstr	d7, [r4]
 800bc94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc98:	e755      	b.n	800bb46 <__kernel_rem_pio2+0x516>
 800bc9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc9e:	f7f4 faed 	bl	800027c <__adddf3>
 800bca2:	3d01      	subs	r5, #1
 800bca4:	e759      	b.n	800bb5a <__kernel_rem_pio2+0x52a>
 800bca6:	9b01      	ldr	r3, [sp, #4]
 800bca8:	9a01      	ldr	r2, [sp, #4]
 800bcaa:	601d      	str	r5, [r3, #0]
 800bcac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bcb0:	605c      	str	r4, [r3, #4]
 800bcb2:	609f      	str	r7, [r3, #8]
 800bcb4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bcb8:	60d3      	str	r3, [r2, #12]
 800bcba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcbe:	6110      	str	r0, [r2, #16]
 800bcc0:	6153      	str	r3, [r2, #20]
 800bcc2:	e728      	b.n	800bb16 <__kernel_rem_pio2+0x4e6>
 800bcc4:	41700000 	.word	0x41700000
 800bcc8:	3e700000 	.word	0x3e700000
 800bccc:	00000000 	.word	0x00000000

0800bcd0 <__kernel_sin>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	ed2d 8b04 	vpush	{d8-d9}
 800bcd8:	eeb0 8a41 	vmov.f32	s16, s2
 800bcdc:	eef0 8a61 	vmov.f32	s17, s3
 800bce0:	ec55 4b10 	vmov	r4, r5, d0
 800bce4:	b083      	sub	sp, #12
 800bce6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bcea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bcee:	9001      	str	r0, [sp, #4]
 800bcf0:	da06      	bge.n	800bd00 <__kernel_sin+0x30>
 800bcf2:	ee10 0a10 	vmov	r0, s0
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f7f4 ff10 	bl	8000b1c <__aeabi_d2iz>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d051      	beq.n	800bda4 <__kernel_sin+0xd4>
 800bd00:	4622      	mov	r2, r4
 800bd02:	462b      	mov	r3, r5
 800bd04:	4620      	mov	r0, r4
 800bd06:	4629      	mov	r1, r5
 800bd08:	f7f4 fc6e 	bl	80005e8 <__aeabi_dmul>
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	468b      	mov	fp, r1
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4620      	mov	r0, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	f7f4 fc66 	bl	80005e8 <__aeabi_dmul>
 800bd1c:	a341      	add	r3, pc, #260	; (adr r3, 800be24 <__kernel_sin+0x154>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	4680      	mov	r8, r0
 800bd24:	4689      	mov	r9, r1
 800bd26:	4650      	mov	r0, sl
 800bd28:	4659      	mov	r1, fp
 800bd2a:	f7f4 fc5d 	bl	80005e8 <__aeabi_dmul>
 800bd2e:	a33f      	add	r3, pc, #252	; (adr r3, 800be2c <__kernel_sin+0x15c>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 faa0 	bl	8000278 <__aeabi_dsub>
 800bd38:	4652      	mov	r2, sl
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	f7f4 fc54 	bl	80005e8 <__aeabi_dmul>
 800bd40:	a33c      	add	r3, pc, #240	; (adr r3, 800be34 <__kernel_sin+0x164>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f7f4 fa99 	bl	800027c <__adddf3>
 800bd4a:	4652      	mov	r2, sl
 800bd4c:	465b      	mov	r3, fp
 800bd4e:	f7f4 fc4b 	bl	80005e8 <__aeabi_dmul>
 800bd52:	a33a      	add	r3, pc, #232	; (adr r3, 800be3c <__kernel_sin+0x16c>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa8e 	bl	8000278 <__aeabi_dsub>
 800bd5c:	4652      	mov	r2, sl
 800bd5e:	465b      	mov	r3, fp
 800bd60:	f7f4 fc42 	bl	80005e8 <__aeabi_dmul>
 800bd64:	a337      	add	r3, pc, #220	; (adr r3, 800be44 <__kernel_sin+0x174>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f7f4 fa87 	bl	800027c <__adddf3>
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	4606      	mov	r6, r0
 800bd72:	460f      	mov	r7, r1
 800bd74:	b9eb      	cbnz	r3, 800bdb2 <__kernel_sin+0xe2>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4650      	mov	r0, sl
 800bd7c:	4659      	mov	r1, fp
 800bd7e:	f7f4 fc33 	bl	80005e8 <__aeabi_dmul>
 800bd82:	a325      	add	r3, pc, #148	; (adr r3, 800be18 <__kernel_sin+0x148>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fa76 	bl	8000278 <__aeabi_dsub>
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	464b      	mov	r3, r9
 800bd90:	f7f4 fc2a 	bl	80005e8 <__aeabi_dmul>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7f4 fa6e 	bl	800027c <__adddf3>
 800bda0:	4604      	mov	r4, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	ec45 4b10 	vmov	d0, r4, r5
 800bda8:	b003      	add	sp, #12
 800bdaa:	ecbd 8b04 	vpop	{d8-d9}
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	4b1b      	ldr	r3, [pc, #108]	; (800be20 <__kernel_sin+0x150>)
 800bdb4:	ec51 0b18 	vmov	r0, r1, d8
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f7f4 fc15 	bl	80005e8 <__aeabi_dmul>
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	ec41 0b19 	vmov	d9, r0, r1
 800bdc4:	463b      	mov	r3, r7
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	f7f4 fc0d 	bl	80005e8 <__aeabi_dmul>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	ec51 0b19 	vmov	r0, r1, d9
 800bdd6:	f7f4 fa4f 	bl	8000278 <__aeabi_dsub>
 800bdda:	4652      	mov	r2, sl
 800bddc:	465b      	mov	r3, fp
 800bdde:	f7f4 fc03 	bl	80005e8 <__aeabi_dmul>
 800bde2:	ec53 2b18 	vmov	r2, r3, d8
 800bde6:	f7f4 fa47 	bl	8000278 <__aeabi_dsub>
 800bdea:	a30b      	add	r3, pc, #44	; (adr r3, 800be18 <__kernel_sin+0x148>)
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	460f      	mov	r7, r1
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	f7f4 fbf6 	bl	80005e8 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 fa3a 	bl	800027c <__adddf3>
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4620      	mov	r0, r4
 800be0e:	4629      	mov	r1, r5
 800be10:	f7f4 fa32 	bl	8000278 <__aeabi_dsub>
 800be14:	e7c4      	b.n	800bda0 <__kernel_sin+0xd0>
 800be16:	bf00      	nop
 800be18:	55555549 	.word	0x55555549
 800be1c:	3fc55555 	.word	0x3fc55555
 800be20:	3fe00000 	.word	0x3fe00000
 800be24:	5acfd57c 	.word	0x5acfd57c
 800be28:	3de5d93a 	.word	0x3de5d93a
 800be2c:	8a2b9ceb 	.word	0x8a2b9ceb
 800be30:	3e5ae5e6 	.word	0x3e5ae5e6
 800be34:	57b1fe7d 	.word	0x57b1fe7d
 800be38:	3ec71de3 	.word	0x3ec71de3
 800be3c:	19c161d5 	.word	0x19c161d5
 800be40:	3f2a01a0 	.word	0x3f2a01a0
 800be44:	1110f8a6 	.word	0x1110f8a6
 800be48:	3f811111 	.word	0x3f811111

0800be4c <__kernel_cosf>:
 800be4c:	ee10 3a10 	vmov	r3, s0
 800be50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be54:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800be58:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800be5c:	da05      	bge.n	800be6a <__kernel_cosf+0x1e>
 800be5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800be62:	ee17 2a90 	vmov	r2, s15
 800be66:	2a00      	cmp	r2, #0
 800be68:	d03d      	beq.n	800bee6 <__kernel_cosf+0x9a>
 800be6a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800be6e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800beec <__kernel_cosf+0xa0>
 800be72:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bef0 <__kernel_cosf+0xa4>
 800be76:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bef4 <__kernel_cosf+0xa8>
 800be7a:	4a1f      	ldr	r2, [pc, #124]	; (800bef8 <__kernel_cosf+0xac>)
 800be7c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800be80:	4293      	cmp	r3, r2
 800be82:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800befc <__kernel_cosf+0xb0>
 800be86:	eee7 7a25 	vfma.f32	s15, s14, s11
 800be8a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bf00 <__kernel_cosf+0xb4>
 800be8e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800be92:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bf04 <__kernel_cosf+0xb8>
 800be96:	eee7 7a25 	vfma.f32	s15, s14, s11
 800be9a:	eeb0 7a66 	vmov.f32	s14, s13
 800be9e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bea2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bea6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800beaa:	ee67 6a25 	vmul.f32	s13, s14, s11
 800beae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800beb2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800beb6:	dc04      	bgt.n	800bec2 <__kernel_cosf+0x76>
 800beb8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bebc:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bec0:	4770      	bx	lr
 800bec2:	4a11      	ldr	r2, [pc, #68]	; (800bf08 <__kernel_cosf+0xbc>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	bfda      	itte	le
 800bec8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800becc:	ee06 3a90 	vmovle	s13, r3
 800bed0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bed4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bed8:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bedc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bee0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bee4:	4770      	bx	lr
 800bee6:	eeb0 0a46 	vmov.f32	s0, s12
 800beea:	4770      	bx	lr
 800beec:	ad47d74e 	.word	0xad47d74e
 800bef0:	310f74f6 	.word	0x310f74f6
 800bef4:	3d2aaaab 	.word	0x3d2aaaab
 800bef8:	3e999999 	.word	0x3e999999
 800befc:	b493f27c 	.word	0xb493f27c
 800bf00:	37d00d01 	.word	0x37d00d01
 800bf04:	bab60b61 	.word	0xbab60b61
 800bf08:	3f480000 	.word	0x3f480000

0800bf0c <__kernel_rem_pio2f>:
 800bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	ed2d 8b04 	vpush	{d8-d9}
 800bf14:	b0d9      	sub	sp, #356	; 0x164
 800bf16:	4688      	mov	r8, r1
 800bf18:	9002      	str	r0, [sp, #8]
 800bf1a:	49bb      	ldr	r1, [pc, #748]	; (800c208 <__kernel_rem_pio2f+0x2fc>)
 800bf1c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bf24:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800bf28:	1e59      	subs	r1, r3, #1
 800bf2a:	1d13      	adds	r3, r2, #4
 800bf2c:	db27      	blt.n	800bf7e <__kernel_rem_pio2f+0x72>
 800bf2e:	f1b2 0b03 	subs.w	fp, r2, #3
 800bf32:	bf48      	it	mi
 800bf34:	f102 0b04 	addmi.w	fp, r2, #4
 800bf38:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800bf3c:	1c45      	adds	r5, r0, #1
 800bf3e:	00ec      	lsls	r4, r5, #3
 800bf40:	1a47      	subs	r7, r0, r1
 800bf42:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800bf46:	9403      	str	r4, [sp, #12]
 800bf48:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bf4c:	eb0a 0c01 	add.w	ip, sl, r1
 800bf50:	ae1c      	add	r6, sp, #112	; 0x70
 800bf52:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800bf56:	2400      	movs	r4, #0
 800bf58:	4564      	cmp	r4, ip
 800bf5a:	dd12      	ble.n	800bf82 <__kernel_rem_pio2f+0x76>
 800bf5c:	9b01      	ldr	r3, [sp, #4]
 800bf5e:	ac1c      	add	r4, sp, #112	; 0x70
 800bf60:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bf64:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800bf68:	f04f 0c00 	mov.w	ip, #0
 800bf6c:	45d4      	cmp	ip, sl
 800bf6e:	dc27      	bgt.n	800bfc0 <__kernel_rem_pio2f+0xb4>
 800bf70:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800bf74:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800bf78:	4627      	mov	r7, r4
 800bf7a:	2600      	movs	r6, #0
 800bf7c:	e016      	b.n	800bfac <__kernel_rem_pio2f+0xa0>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e7dc      	b.n	800bf3c <__kernel_rem_pio2f+0x30>
 800bf82:	42e7      	cmn	r7, r4
 800bf84:	bf5d      	ittte	pl
 800bf86:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800bf8a:	ee07 3a90 	vmovpl	s15, r3
 800bf8e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bf92:	eef0 7a47 	vmovmi.f32	s15, s14
 800bf96:	ece6 7a01 	vstmia	r6!, {s15}
 800bf9a:	3401      	adds	r4, #1
 800bf9c:	e7dc      	b.n	800bf58 <__kernel_rem_pio2f+0x4c>
 800bf9e:	ecf9 6a01 	vldmia	r9!, {s13}
 800bfa2:	ed97 7a00 	vldr	s14, [r7]
 800bfa6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfaa:	3601      	adds	r6, #1
 800bfac:	428e      	cmp	r6, r1
 800bfae:	f1a7 0704 	sub.w	r7, r7, #4
 800bfb2:	ddf4      	ble.n	800bf9e <__kernel_rem_pio2f+0x92>
 800bfb4:	eceb 7a01 	vstmia	fp!, {s15}
 800bfb8:	f10c 0c01 	add.w	ip, ip, #1
 800bfbc:	3404      	adds	r4, #4
 800bfbe:	e7d5      	b.n	800bf6c <__kernel_rem_pio2f+0x60>
 800bfc0:	ab08      	add	r3, sp, #32
 800bfc2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800bfc6:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c214 <__kernel_rem_pio2f+0x308>
 800bfca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c210 <__kernel_rem_pio2f+0x304>
 800bfce:	9304      	str	r3, [sp, #16]
 800bfd0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800bfd4:	4656      	mov	r6, sl
 800bfd6:	00b3      	lsls	r3, r6, #2
 800bfd8:	9305      	str	r3, [sp, #20]
 800bfda:	ab58      	add	r3, sp, #352	; 0x160
 800bfdc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bfe0:	ac08      	add	r4, sp, #32
 800bfe2:	ab44      	add	r3, sp, #272	; 0x110
 800bfe4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bfe8:	46a4      	mov	ip, r4
 800bfea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bfee:	4637      	mov	r7, r6
 800bff0:	2f00      	cmp	r7, #0
 800bff2:	f1a0 0004 	sub.w	r0, r0, #4
 800bff6:	dc4f      	bgt.n	800c098 <__kernel_rem_pio2f+0x18c>
 800bff8:	4628      	mov	r0, r5
 800bffa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bffe:	f000 fd3f 	bl	800ca80 <scalbnf>
 800c002:	eeb0 8a40 	vmov.f32	s16, s0
 800c006:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c00a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c00e:	f000 fcf5 	bl	800c9fc <floorf>
 800c012:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c016:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c01a:	2d00      	cmp	r5, #0
 800c01c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c020:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c024:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c028:	ee17 9a90 	vmov	r9, s15
 800c02c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c030:	dd44      	ble.n	800c0bc <__kernel_rem_pio2f+0x1b0>
 800c032:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800c036:	ab08      	add	r3, sp, #32
 800c038:	f1c5 0e08 	rsb	lr, r5, #8
 800c03c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800c040:	fa47 f00e 	asr.w	r0, r7, lr
 800c044:	4481      	add	r9, r0
 800c046:	fa00 f00e 	lsl.w	r0, r0, lr
 800c04a:	1a3f      	subs	r7, r7, r0
 800c04c:	f1c5 0007 	rsb	r0, r5, #7
 800c050:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800c054:	4107      	asrs	r7, r0
 800c056:	2f00      	cmp	r7, #0
 800c058:	dd3f      	ble.n	800c0da <__kernel_rem_pio2f+0x1ce>
 800c05a:	f04f 0e00 	mov.w	lr, #0
 800c05e:	f109 0901 	add.w	r9, r9, #1
 800c062:	4673      	mov	r3, lr
 800c064:	4576      	cmp	r6, lr
 800c066:	dc6b      	bgt.n	800c140 <__kernel_rem_pio2f+0x234>
 800c068:	2d00      	cmp	r5, #0
 800c06a:	dd04      	ble.n	800c076 <__kernel_rem_pio2f+0x16a>
 800c06c:	2d01      	cmp	r5, #1
 800c06e:	d078      	beq.n	800c162 <__kernel_rem_pio2f+0x256>
 800c070:	2d02      	cmp	r5, #2
 800c072:	f000 8081 	beq.w	800c178 <__kernel_rem_pio2f+0x26c>
 800c076:	2f02      	cmp	r7, #2
 800c078:	d12f      	bne.n	800c0da <__kernel_rem_pio2f+0x1ce>
 800c07a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c07e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c082:	b353      	cbz	r3, 800c0da <__kernel_rem_pio2f+0x1ce>
 800c084:	4628      	mov	r0, r5
 800c086:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c08a:	f000 fcf9 	bl	800ca80 <scalbnf>
 800c08e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800c092:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c096:	e020      	b.n	800c0da <__kernel_rem_pio2f+0x1ce>
 800c098:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c09c:	3f01      	subs	r7, #1
 800c09e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c0aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c0ae:	ecac 0a01 	vstmia	ip!, {s0}
 800c0b2:	ed90 0a00 	vldr	s0, [r0]
 800c0b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c0ba:	e799      	b.n	800bff0 <__kernel_rem_pio2f+0xe4>
 800c0bc:	d105      	bne.n	800c0ca <__kernel_rem_pio2f+0x1be>
 800c0be:	1e70      	subs	r0, r6, #1
 800c0c0:	ab08      	add	r3, sp, #32
 800c0c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800c0c6:	11ff      	asrs	r7, r7, #7
 800c0c8:	e7c5      	b.n	800c056 <__kernel_rem_pio2f+0x14a>
 800c0ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c0ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	da31      	bge.n	800c13c <__kernel_rem_pio2f+0x230>
 800c0d8:	2700      	movs	r7, #0
 800c0da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e2:	f040 809b 	bne.w	800c21c <__kernel_rem_pio2f+0x310>
 800c0e6:	1e74      	subs	r4, r6, #1
 800c0e8:	46a4      	mov	ip, r4
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	45d4      	cmp	ip, sl
 800c0ee:	da4a      	bge.n	800c186 <__kernel_rem_pio2f+0x27a>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d07a      	beq.n	800c1ea <__kernel_rem_pio2f+0x2de>
 800c0f4:	ab08      	add	r3, sp, #32
 800c0f6:	3d08      	subs	r5, #8
 800c0f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8081 	beq.w	800c204 <__kernel_rem_pio2f+0x2f8>
 800c102:	4628      	mov	r0, r5
 800c104:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c108:	00a5      	lsls	r5, r4, #2
 800c10a:	f000 fcb9 	bl	800ca80 <scalbnf>
 800c10e:	aa44      	add	r2, sp, #272	; 0x110
 800c110:	1d2b      	adds	r3, r5, #4
 800c112:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c214 <__kernel_rem_pio2f+0x308>
 800c116:	18d1      	adds	r1, r2, r3
 800c118:	4622      	mov	r2, r4
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	f280 80ae 	bge.w	800c27c <__kernel_rem_pio2f+0x370>
 800c120:	4622      	mov	r2, r4
 800c122:	2a00      	cmp	r2, #0
 800c124:	f2c0 80cc 	blt.w	800c2c0 <__kernel_rem_pio2f+0x3b4>
 800c128:	a944      	add	r1, sp, #272	; 0x110
 800c12a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800c12e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c20c <__kernel_rem_pio2f+0x300>
 800c132:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800c136:	2000      	movs	r0, #0
 800c138:	1aa1      	subs	r1, r4, r2
 800c13a:	e0b6      	b.n	800c2aa <__kernel_rem_pio2f+0x39e>
 800c13c:	2702      	movs	r7, #2
 800c13e:	e78c      	b.n	800c05a <__kernel_rem_pio2f+0x14e>
 800c140:	6820      	ldr	r0, [r4, #0]
 800c142:	b94b      	cbnz	r3, 800c158 <__kernel_rem_pio2f+0x24c>
 800c144:	b118      	cbz	r0, 800c14e <__kernel_rem_pio2f+0x242>
 800c146:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800c14a:	6020      	str	r0, [r4, #0]
 800c14c:	2001      	movs	r0, #1
 800c14e:	f10e 0e01 	add.w	lr, lr, #1
 800c152:	3404      	adds	r4, #4
 800c154:	4603      	mov	r3, r0
 800c156:	e785      	b.n	800c064 <__kernel_rem_pio2f+0x158>
 800c158:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800c15c:	6020      	str	r0, [r4, #0]
 800c15e:	4618      	mov	r0, r3
 800c160:	e7f5      	b.n	800c14e <__kernel_rem_pio2f+0x242>
 800c162:	1e74      	subs	r4, r6, #1
 800c164:	a808      	add	r0, sp, #32
 800c166:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c16a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c16e:	f10d 0c20 	add.w	ip, sp, #32
 800c172:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800c176:	e77e      	b.n	800c076 <__kernel_rem_pio2f+0x16a>
 800c178:	1e74      	subs	r4, r6, #1
 800c17a:	a808      	add	r0, sp, #32
 800c17c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800c180:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800c184:	e7f3      	b.n	800c16e <__kernel_rem_pio2f+0x262>
 800c186:	ab08      	add	r3, sp, #32
 800c188:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c18c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800c190:	4318      	orrs	r0, r3
 800c192:	e7ab      	b.n	800c0ec <__kernel_rem_pio2f+0x1e0>
 800c194:	f10c 0c01 	add.w	ip, ip, #1
 800c198:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c19c:	2c00      	cmp	r4, #0
 800c19e:	d0f9      	beq.n	800c194 <__kernel_rem_pio2f+0x288>
 800c1a0:	9b05      	ldr	r3, [sp, #20]
 800c1a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c1a6:	eb0d 0003 	add.w	r0, sp, r3
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	18f4      	adds	r4, r6, r3
 800c1ae:	ab1c      	add	r3, sp, #112	; 0x70
 800c1b0:	1c77      	adds	r7, r6, #1
 800c1b2:	384c      	subs	r0, #76	; 0x4c
 800c1b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c1b8:	4466      	add	r6, ip
 800c1ba:	42be      	cmp	r6, r7
 800c1bc:	f6ff af0b 	blt.w	800bfd6 <__kernel_rem_pio2f+0xca>
 800c1c0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c1c4:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c1c8:	ee07 3a90 	vmov	s15, r3
 800c1cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1d0:	f04f 0c00 	mov.w	ip, #0
 800c1d4:	ece4 7a01 	vstmia	r4!, {s15}
 800c1d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800c1dc:	46a1      	mov	r9, r4
 800c1de:	458c      	cmp	ip, r1
 800c1e0:	dd07      	ble.n	800c1f2 <__kernel_rem_pio2f+0x2e6>
 800c1e2:	ece0 7a01 	vstmia	r0!, {s15}
 800c1e6:	3701      	adds	r7, #1
 800c1e8:	e7e7      	b.n	800c1ba <__kernel_rem_pio2f+0x2ae>
 800c1ea:	9804      	ldr	r0, [sp, #16]
 800c1ec:	f04f 0c01 	mov.w	ip, #1
 800c1f0:	e7d2      	b.n	800c198 <__kernel_rem_pio2f+0x28c>
 800c1f2:	ecfe 6a01 	vldmia	lr!, {s13}
 800c1f6:	ed39 7a01 	vldmdb	r9!, {s14}
 800c1fa:	f10c 0c01 	add.w	ip, ip, #1
 800c1fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c202:	e7ec      	b.n	800c1de <__kernel_rem_pio2f+0x2d2>
 800c204:	3c01      	subs	r4, #1
 800c206:	e775      	b.n	800c0f4 <__kernel_rem_pio2f+0x1e8>
 800c208:	0800d4a4 	.word	0x0800d4a4
 800c20c:	0800d478 	.word	0x0800d478
 800c210:	43800000 	.word	0x43800000
 800c214:	3b800000 	.word	0x3b800000
 800c218:	00000000 	.word	0x00000000
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	eeb0 0a48 	vmov.f32	s0, s16
 800c222:	1a98      	subs	r0, r3, r2
 800c224:	f000 fc2c 	bl	800ca80 <scalbnf>
 800c228:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c210 <__kernel_rem_pio2f+0x304>
 800c22c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c234:	db19      	blt.n	800c26a <__kernel_rem_pio2f+0x35e>
 800c236:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c214 <__kernel_rem_pio2f+0x308>
 800c23a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c23e:	aa08      	add	r2, sp, #32
 800c240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c244:	1c74      	adds	r4, r6, #1
 800c246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c24a:	3508      	adds	r5, #8
 800c24c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c254:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c258:	ee10 3a10 	vmov	r3, s0
 800c25c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c260:	ee17 3a90 	vmov	r3, s15
 800c264:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c268:	e74b      	b.n	800c102 <__kernel_rem_pio2f+0x1f6>
 800c26a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c26e:	aa08      	add	r2, sp, #32
 800c270:	ee10 3a10 	vmov	r3, s0
 800c274:	4634      	mov	r4, r6
 800c276:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c27a:	e742      	b.n	800c102 <__kernel_rem_pio2f+0x1f6>
 800c27c:	a808      	add	r0, sp, #32
 800c27e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c282:	9001      	str	r0, [sp, #4]
 800c284:	ee07 0a90 	vmov	s15, r0
 800c288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c28c:	3a01      	subs	r2, #1
 800c28e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c292:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c296:	ed61 7a01 	vstmdb	r1!, {s15}
 800c29a:	e73e      	b.n	800c11a <__kernel_rem_pio2f+0x20e>
 800c29c:	ecfc 6a01 	vldmia	ip!, {s13}
 800c2a0:	ecb6 7a01 	vldmia	r6!, {s14}
 800c2a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2a8:	3001      	adds	r0, #1
 800c2aa:	4550      	cmp	r0, sl
 800c2ac:	dc01      	bgt.n	800c2b2 <__kernel_rem_pio2f+0x3a6>
 800c2ae:	4288      	cmp	r0, r1
 800c2b0:	ddf4      	ble.n	800c29c <__kernel_rem_pio2f+0x390>
 800c2b2:	a858      	add	r0, sp, #352	; 0x160
 800c2b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	e730      	b.n	800c122 <__kernel_rem_pio2f+0x216>
 800c2c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c2c2:	2a02      	cmp	r2, #2
 800c2c4:	dc09      	bgt.n	800c2da <__kernel_rem_pio2f+0x3ce>
 800c2c6:	2a00      	cmp	r2, #0
 800c2c8:	dc2a      	bgt.n	800c320 <__kernel_rem_pio2f+0x414>
 800c2ca:	d043      	beq.n	800c354 <__kernel_rem_pio2f+0x448>
 800c2cc:	f009 0007 	and.w	r0, r9, #7
 800c2d0:	b059      	add	sp, #356	; 0x164
 800c2d2:	ecbd 8b04 	vpop	{d8-d9}
 800c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d1f5      	bne.n	800c2cc <__kernel_rem_pio2f+0x3c0>
 800c2e0:	ab30      	add	r3, sp, #192	; 0xc0
 800c2e2:	442b      	add	r3, r5
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f1a1 0104 	sub.w	r1, r1, #4
 800c2f0:	dc51      	bgt.n	800c396 <__kernel_rem_pio2f+0x48a>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	2901      	cmp	r1, #1
 800c2f6:	f1a2 0204 	sub.w	r2, r2, #4
 800c2fa:	dc5c      	bgt.n	800c3b6 <__kernel_rem_pio2f+0x4aa>
 800c2fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800c300:	3304      	adds	r3, #4
 800c302:	2c01      	cmp	r4, #1
 800c304:	dc67      	bgt.n	800c3d6 <__kernel_rem_pio2f+0x4ca>
 800c306:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c30a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c30e:	2f00      	cmp	r7, #0
 800c310:	d167      	bne.n	800c3e2 <__kernel_rem_pio2f+0x4d6>
 800c312:	edc8 6a00 	vstr	s13, [r8]
 800c316:	ed88 7a01 	vstr	s14, [r8, #4]
 800c31a:	edc8 7a02 	vstr	s15, [r8, #8]
 800c31e:	e7d5      	b.n	800c2cc <__kernel_rem_pio2f+0x3c0>
 800c320:	aa30      	add	r2, sp, #192	; 0xc0
 800c322:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800c326:	4413      	add	r3, r2
 800c328:	4622      	mov	r2, r4
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	da24      	bge.n	800c378 <__kernel_rem_pio2f+0x46c>
 800c32e:	b34f      	cbz	r7, 800c384 <__kernel_rem_pio2f+0x478>
 800c330:	eef1 7a47 	vneg.f32	s15, s14
 800c334:	edc8 7a00 	vstr	s15, [r8]
 800c338:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c340:	aa31      	add	r2, sp, #196	; 0xc4
 800c342:	2301      	movs	r3, #1
 800c344:	429c      	cmp	r4, r3
 800c346:	da20      	bge.n	800c38a <__kernel_rem_pio2f+0x47e>
 800c348:	b10f      	cbz	r7, 800c34e <__kernel_rem_pio2f+0x442>
 800c34a:	eef1 7a67 	vneg.f32	s15, s15
 800c34e:	edc8 7a01 	vstr	s15, [r8, #4]
 800c352:	e7bb      	b.n	800c2cc <__kernel_rem_pio2f+0x3c0>
 800c354:	aa30      	add	r2, sp, #192	; 0xc0
 800c356:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c218 <__kernel_rem_pio2f+0x30c>
 800c35a:	4413      	add	r3, r2
 800c35c:	2c00      	cmp	r4, #0
 800c35e:	da05      	bge.n	800c36c <__kernel_rem_pio2f+0x460>
 800c360:	b10f      	cbz	r7, 800c366 <__kernel_rem_pio2f+0x45a>
 800c362:	eef1 7a67 	vneg.f32	s15, s15
 800c366:	edc8 7a00 	vstr	s15, [r8]
 800c36a:	e7af      	b.n	800c2cc <__kernel_rem_pio2f+0x3c0>
 800c36c:	ed33 7a01 	vldmdb	r3!, {s14}
 800c370:	3c01      	subs	r4, #1
 800c372:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c376:	e7f1      	b.n	800c35c <__kernel_rem_pio2f+0x450>
 800c378:	ed73 7a01 	vldmdb	r3!, {s15}
 800c37c:	3a01      	subs	r2, #1
 800c37e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c382:	e7d2      	b.n	800c32a <__kernel_rem_pio2f+0x41e>
 800c384:	eef0 7a47 	vmov.f32	s15, s14
 800c388:	e7d4      	b.n	800c334 <__kernel_rem_pio2f+0x428>
 800c38a:	ecb2 7a01 	vldmia	r2!, {s14}
 800c38e:	3301      	adds	r3, #1
 800c390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c394:	e7d6      	b.n	800c344 <__kernel_rem_pio2f+0x438>
 800c396:	edd1 7a00 	vldr	s15, [r1]
 800c39a:	edd1 6a01 	vldr	s13, [r1, #4]
 800c39e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c3a2:	3801      	subs	r0, #1
 800c3a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3a8:	ed81 7a00 	vstr	s14, [r1]
 800c3ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b0:	edc1 7a01 	vstr	s15, [r1, #4]
 800c3b4:	e799      	b.n	800c2ea <__kernel_rem_pio2f+0x3de>
 800c3b6:	edd2 7a00 	vldr	s15, [r2]
 800c3ba:	edd2 6a01 	vldr	s13, [r2, #4]
 800c3be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c3c2:	3901      	subs	r1, #1
 800c3c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3c8:	ed82 7a00 	vstr	s14, [r2]
 800c3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3d0:	edc2 7a01 	vstr	s15, [r2, #4]
 800c3d4:	e78e      	b.n	800c2f4 <__kernel_rem_pio2f+0x3e8>
 800c3d6:	ed33 7a01 	vldmdb	r3!, {s14}
 800c3da:	3c01      	subs	r4, #1
 800c3dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3e0:	e78f      	b.n	800c302 <__kernel_rem_pio2f+0x3f6>
 800c3e2:	eef1 6a66 	vneg.f32	s13, s13
 800c3e6:	eeb1 7a47 	vneg.f32	s14, s14
 800c3ea:	edc8 6a00 	vstr	s13, [r8]
 800c3ee:	ed88 7a01 	vstr	s14, [r8, #4]
 800c3f2:	eef1 7a67 	vneg.f32	s15, s15
 800c3f6:	e790      	b.n	800c31a <__kernel_rem_pio2f+0x40e>

0800c3f8 <__kernel_sinf>:
 800c3f8:	ee10 3a10 	vmov	r3, s0
 800c3fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c400:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c404:	da04      	bge.n	800c410 <__kernel_sinf+0x18>
 800c406:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c40a:	ee17 3a90 	vmov	r3, s15
 800c40e:	b35b      	cbz	r3, 800c468 <__kernel_sinf+0x70>
 800c410:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c414:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c46c <__kernel_sinf+0x74>
 800c418:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c470 <__kernel_sinf+0x78>
 800c41c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c420:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c474 <__kernel_sinf+0x7c>
 800c424:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c428:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c478 <__kernel_sinf+0x80>
 800c42c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c430:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c47c <__kernel_sinf+0x84>
 800c434:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c438:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c43c:	b930      	cbnz	r0, 800c44c <__kernel_sinf+0x54>
 800c43e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c480 <__kernel_sinf+0x88>
 800c442:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c446:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c44a:	4770      	bx	lr
 800c44c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c450:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c454:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c458:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c45c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c484 <__kernel_sinf+0x8c>
 800c460:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c464:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	2f2ec9d3 	.word	0x2f2ec9d3
 800c470:	b2d72f34 	.word	0xb2d72f34
 800c474:	3638ef1b 	.word	0x3638ef1b
 800c478:	b9500d01 	.word	0xb9500d01
 800c47c:	3c088889 	.word	0x3c088889
 800c480:	be2aaaab 	.word	0xbe2aaaab
 800c484:	3e2aaaab 	.word	0x3e2aaaab

0800c488 <atan>:
 800c488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	ec55 4b10 	vmov	r4, r5, d0
 800c490:	4bc3      	ldr	r3, [pc, #780]	; (800c7a0 <atan+0x318>)
 800c492:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c496:	429e      	cmp	r6, r3
 800c498:	46ab      	mov	fp, r5
 800c49a:	dd18      	ble.n	800c4ce <atan+0x46>
 800c49c:	4bc1      	ldr	r3, [pc, #772]	; (800c7a4 <atan+0x31c>)
 800c49e:	429e      	cmp	r6, r3
 800c4a0:	dc01      	bgt.n	800c4a6 <atan+0x1e>
 800c4a2:	d109      	bne.n	800c4b8 <atan+0x30>
 800c4a4:	b144      	cbz	r4, 800c4b8 <atan+0x30>
 800c4a6:	4622      	mov	r2, r4
 800c4a8:	462b      	mov	r3, r5
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7f3 fee5 	bl	800027c <__adddf3>
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	e006      	b.n	800c4c6 <atan+0x3e>
 800c4b8:	f1bb 0f00 	cmp.w	fp, #0
 800c4bc:	f300 8131 	bgt.w	800c722 <atan+0x29a>
 800c4c0:	a59b      	add	r5, pc, #620	; (adr r5, 800c730 <atan+0x2a8>)
 800c4c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4c6:	ec45 4b10 	vmov	d0, r4, r5
 800c4ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ce:	4bb6      	ldr	r3, [pc, #728]	; (800c7a8 <atan+0x320>)
 800c4d0:	429e      	cmp	r6, r3
 800c4d2:	dc14      	bgt.n	800c4fe <atan+0x76>
 800c4d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c4d8:	429e      	cmp	r6, r3
 800c4da:	dc0d      	bgt.n	800c4f8 <atan+0x70>
 800c4dc:	a396      	add	r3, pc, #600	; (adr r3, 800c738 <atan+0x2b0>)
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	ee10 0a10 	vmov	r0, s0
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f7f3 fec8 	bl	800027c <__adddf3>
 800c4ec:	4baf      	ldr	r3, [pc, #700]	; (800c7ac <atan+0x324>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f7f4 fb0a 	bl	8000b08 <__aeabi_dcmpgt>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d1e6      	bne.n	800c4c6 <atan+0x3e>
 800c4f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c4fc:	e02b      	b.n	800c556 <atan+0xce>
 800c4fe:	f000 f963 	bl	800c7c8 <fabs>
 800c502:	4bab      	ldr	r3, [pc, #684]	; (800c7b0 <atan+0x328>)
 800c504:	429e      	cmp	r6, r3
 800c506:	ec55 4b10 	vmov	r4, r5, d0
 800c50a:	f300 80bf 	bgt.w	800c68c <atan+0x204>
 800c50e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c512:	429e      	cmp	r6, r3
 800c514:	f300 80a0 	bgt.w	800c658 <atan+0x1d0>
 800c518:	ee10 2a10 	vmov	r2, s0
 800c51c:	ee10 0a10 	vmov	r0, s0
 800c520:	462b      	mov	r3, r5
 800c522:	4629      	mov	r1, r5
 800c524:	f7f3 feaa 	bl	800027c <__adddf3>
 800c528:	4ba0      	ldr	r3, [pc, #640]	; (800c7ac <atan+0x324>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	f7f3 fea4 	bl	8000278 <__aeabi_dsub>
 800c530:	2200      	movs	r2, #0
 800c532:	4606      	mov	r6, r0
 800c534:	460f      	mov	r7, r1
 800c536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c53a:	4620      	mov	r0, r4
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7f3 fe9d 	bl	800027c <__adddf3>
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	4630      	mov	r0, r6
 800c548:	4639      	mov	r1, r7
 800c54a:	f7f4 f977 	bl	800083c <__aeabi_ddiv>
 800c54e:	f04f 0a00 	mov.w	sl, #0
 800c552:	4604      	mov	r4, r0
 800c554:	460d      	mov	r5, r1
 800c556:	4622      	mov	r2, r4
 800c558:	462b      	mov	r3, r5
 800c55a:	4620      	mov	r0, r4
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f4 f843 	bl	80005e8 <__aeabi_dmul>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4680      	mov	r8, r0
 800c568:	4689      	mov	r9, r1
 800c56a:	f7f4 f83d 	bl	80005e8 <__aeabi_dmul>
 800c56e:	a374      	add	r3, pc, #464	; (adr r3, 800c740 <atan+0x2b8>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	4606      	mov	r6, r0
 800c576:	460f      	mov	r7, r1
 800c578:	f7f4 f836 	bl	80005e8 <__aeabi_dmul>
 800c57c:	a372      	add	r3, pc, #456	; (adr r3, 800c748 <atan+0x2c0>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	f7f3 fe7b 	bl	800027c <__adddf3>
 800c586:	4632      	mov	r2, r6
 800c588:	463b      	mov	r3, r7
 800c58a:	f7f4 f82d 	bl	80005e8 <__aeabi_dmul>
 800c58e:	a370      	add	r3, pc, #448	; (adr r3, 800c750 <atan+0x2c8>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	f7f3 fe72 	bl	800027c <__adddf3>
 800c598:	4632      	mov	r2, r6
 800c59a:	463b      	mov	r3, r7
 800c59c:	f7f4 f824 	bl	80005e8 <__aeabi_dmul>
 800c5a0:	a36d      	add	r3, pc, #436	; (adr r3, 800c758 <atan+0x2d0>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7f3 fe69 	bl	800027c <__adddf3>
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	463b      	mov	r3, r7
 800c5ae:	f7f4 f81b 	bl	80005e8 <__aeabi_dmul>
 800c5b2:	a36b      	add	r3, pc, #428	; (adr r3, 800c760 <atan+0x2d8>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe60 	bl	800027c <__adddf3>
 800c5bc:	4632      	mov	r2, r6
 800c5be:	463b      	mov	r3, r7
 800c5c0:	f7f4 f812 	bl	80005e8 <__aeabi_dmul>
 800c5c4:	a368      	add	r3, pc, #416	; (adr r3, 800c768 <atan+0x2e0>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fe57 	bl	800027c <__adddf3>
 800c5ce:	4642      	mov	r2, r8
 800c5d0:	464b      	mov	r3, r9
 800c5d2:	f7f4 f809 	bl	80005e8 <__aeabi_dmul>
 800c5d6:	a366      	add	r3, pc, #408	; (adr r3, 800c770 <atan+0x2e8>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	4680      	mov	r8, r0
 800c5de:	4689      	mov	r9, r1
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	f7f4 f800 	bl	80005e8 <__aeabi_dmul>
 800c5e8:	a363      	add	r3, pc, #396	; (adr r3, 800c778 <atan+0x2f0>)
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f7f3 fe43 	bl	8000278 <__aeabi_dsub>
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	f7f3 fff7 	bl	80005e8 <__aeabi_dmul>
 800c5fa:	a361      	add	r3, pc, #388	; (adr r3, 800c780 <atan+0x2f8>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	f7f3 fe3a 	bl	8000278 <__aeabi_dsub>
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	f7f3 ffee 	bl	80005e8 <__aeabi_dmul>
 800c60c:	a35e      	add	r3, pc, #376	; (adr r3, 800c788 <atan+0x300>)
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	f7f3 fe31 	bl	8000278 <__aeabi_dsub>
 800c616:	4632      	mov	r2, r6
 800c618:	463b      	mov	r3, r7
 800c61a:	f7f3 ffe5 	bl	80005e8 <__aeabi_dmul>
 800c61e:	a35c      	add	r3, pc, #368	; (adr r3, 800c790 <atan+0x308>)
 800c620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c624:	f7f3 fe28 	bl	8000278 <__aeabi_dsub>
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	f7f3 ffdc 	bl	80005e8 <__aeabi_dmul>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4640      	mov	r0, r8
 800c636:	4649      	mov	r1, r9
 800c638:	f7f3 fe20 	bl	800027c <__adddf3>
 800c63c:	4622      	mov	r2, r4
 800c63e:	462b      	mov	r3, r5
 800c640:	f7f3 ffd2 	bl	80005e8 <__aeabi_dmul>
 800c644:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	d14b      	bne.n	800c6e6 <atan+0x25e>
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f3 fe11 	bl	8000278 <__aeabi_dsub>
 800c656:	e72c      	b.n	800c4b2 <atan+0x2a>
 800c658:	ee10 0a10 	vmov	r0, s0
 800c65c:	4b53      	ldr	r3, [pc, #332]	; (800c7ac <atan+0x324>)
 800c65e:	2200      	movs	r2, #0
 800c660:	4629      	mov	r1, r5
 800c662:	f7f3 fe09 	bl	8000278 <__aeabi_dsub>
 800c666:	4b51      	ldr	r3, [pc, #324]	; (800c7ac <atan+0x324>)
 800c668:	4606      	mov	r6, r0
 800c66a:	460f      	mov	r7, r1
 800c66c:	2200      	movs	r2, #0
 800c66e:	4620      	mov	r0, r4
 800c670:	4629      	mov	r1, r5
 800c672:	f7f3 fe03 	bl	800027c <__adddf3>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	4630      	mov	r0, r6
 800c67c:	4639      	mov	r1, r7
 800c67e:	f7f4 f8dd 	bl	800083c <__aeabi_ddiv>
 800c682:	f04f 0a01 	mov.w	sl, #1
 800c686:	4604      	mov	r4, r0
 800c688:	460d      	mov	r5, r1
 800c68a:	e764      	b.n	800c556 <atan+0xce>
 800c68c:	4b49      	ldr	r3, [pc, #292]	; (800c7b4 <atan+0x32c>)
 800c68e:	429e      	cmp	r6, r3
 800c690:	da1d      	bge.n	800c6ce <atan+0x246>
 800c692:	ee10 0a10 	vmov	r0, s0
 800c696:	4b48      	ldr	r3, [pc, #288]	; (800c7b8 <atan+0x330>)
 800c698:	2200      	movs	r2, #0
 800c69a:	4629      	mov	r1, r5
 800c69c:	f7f3 fdec 	bl	8000278 <__aeabi_dsub>
 800c6a0:	4b45      	ldr	r3, [pc, #276]	; (800c7b8 <atan+0x330>)
 800c6a2:	4606      	mov	r6, r0
 800c6a4:	460f      	mov	r7, r1
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	f7f3 ff9c 	bl	80005e8 <__aeabi_dmul>
 800c6b0:	4b3e      	ldr	r3, [pc, #248]	; (800c7ac <atan+0x324>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f7f3 fde2 	bl	800027c <__adddf3>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4630      	mov	r0, r6
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f4 f8bc 	bl	800083c <__aeabi_ddiv>
 800c6c4:	f04f 0a02 	mov.w	sl, #2
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	460d      	mov	r5, r1
 800c6cc:	e743      	b.n	800c556 <atan+0xce>
 800c6ce:	462b      	mov	r3, r5
 800c6d0:	ee10 2a10 	vmov	r2, s0
 800c6d4:	4939      	ldr	r1, [pc, #228]	; (800c7bc <atan+0x334>)
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f7f4 f8b0 	bl	800083c <__aeabi_ddiv>
 800c6dc:	f04f 0a03 	mov.w	sl, #3
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	460d      	mov	r5, r1
 800c6e4:	e737      	b.n	800c556 <atan+0xce>
 800c6e6:	4b36      	ldr	r3, [pc, #216]	; (800c7c0 <atan+0x338>)
 800c6e8:	4e36      	ldr	r6, [pc, #216]	; (800c7c4 <atan+0x33c>)
 800c6ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c6ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c6f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800c6f6:	f7f3 fdbf 	bl	8000278 <__aeabi_dsub>
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	462b      	mov	r3, r5
 800c6fe:	f7f3 fdbb 	bl	8000278 <__aeabi_dsub>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c70a:	f7f3 fdb5 	bl	8000278 <__aeabi_dsub>
 800c70e:	f1bb 0f00 	cmp.w	fp, #0
 800c712:	4604      	mov	r4, r0
 800c714:	460d      	mov	r5, r1
 800c716:	f6bf aed6 	bge.w	800c4c6 <atan+0x3e>
 800c71a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c71e:	461d      	mov	r5, r3
 800c720:	e6d1      	b.n	800c4c6 <atan+0x3e>
 800c722:	a51d      	add	r5, pc, #116	; (adr r5, 800c798 <atan+0x310>)
 800c724:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c728:	e6cd      	b.n	800c4c6 <atan+0x3e>
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w
 800c730:	54442d18 	.word	0x54442d18
 800c734:	bff921fb 	.word	0xbff921fb
 800c738:	8800759c 	.word	0x8800759c
 800c73c:	7e37e43c 	.word	0x7e37e43c
 800c740:	e322da11 	.word	0xe322da11
 800c744:	3f90ad3a 	.word	0x3f90ad3a
 800c748:	24760deb 	.word	0x24760deb
 800c74c:	3fa97b4b 	.word	0x3fa97b4b
 800c750:	a0d03d51 	.word	0xa0d03d51
 800c754:	3fb10d66 	.word	0x3fb10d66
 800c758:	c54c206e 	.word	0xc54c206e
 800c75c:	3fb745cd 	.word	0x3fb745cd
 800c760:	920083ff 	.word	0x920083ff
 800c764:	3fc24924 	.word	0x3fc24924
 800c768:	5555550d 	.word	0x5555550d
 800c76c:	3fd55555 	.word	0x3fd55555
 800c770:	2c6a6c2f 	.word	0x2c6a6c2f
 800c774:	bfa2b444 	.word	0xbfa2b444
 800c778:	52defd9a 	.word	0x52defd9a
 800c77c:	3fadde2d 	.word	0x3fadde2d
 800c780:	af749a6d 	.word	0xaf749a6d
 800c784:	3fb3b0f2 	.word	0x3fb3b0f2
 800c788:	fe231671 	.word	0xfe231671
 800c78c:	3fbc71c6 	.word	0x3fbc71c6
 800c790:	9998ebc4 	.word	0x9998ebc4
 800c794:	3fc99999 	.word	0x3fc99999
 800c798:	54442d18 	.word	0x54442d18
 800c79c:	3ff921fb 	.word	0x3ff921fb
 800c7a0:	440fffff 	.word	0x440fffff
 800c7a4:	7ff00000 	.word	0x7ff00000
 800c7a8:	3fdbffff 	.word	0x3fdbffff
 800c7ac:	3ff00000 	.word	0x3ff00000
 800c7b0:	3ff2ffff 	.word	0x3ff2ffff
 800c7b4:	40038000 	.word	0x40038000
 800c7b8:	3ff80000 	.word	0x3ff80000
 800c7bc:	bff00000 	.word	0xbff00000
 800c7c0:	0800d4d0 	.word	0x0800d4d0
 800c7c4:	0800d4b0 	.word	0x0800d4b0

0800c7c8 <fabs>:
 800c7c8:	ec51 0b10 	vmov	r0, r1, d0
 800c7cc:	ee10 2a10 	vmov	r2, s0
 800c7d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7d4:	ec43 2b10 	vmov	d0, r2, r3
 800c7d8:	4770      	bx	lr
 800c7da:	0000      	movs	r0, r0
 800c7dc:	0000      	movs	r0, r0
	...

0800c7e0 <floor>:
 800c7e0:	ec51 0b10 	vmov	r0, r1, d0
 800c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c7ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c7f0:	2e13      	cmp	r6, #19
 800c7f2:	ee10 5a10 	vmov	r5, s0
 800c7f6:	ee10 8a10 	vmov	r8, s0
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	dc32      	bgt.n	800c864 <floor+0x84>
 800c7fe:	2e00      	cmp	r6, #0
 800c800:	da14      	bge.n	800c82c <floor+0x4c>
 800c802:	a333      	add	r3, pc, #204	; (adr r3, 800c8d0 <floor+0xf0>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f7f3 fd38 	bl	800027c <__adddf3>
 800c80c:	2200      	movs	r2, #0
 800c80e:	2300      	movs	r3, #0
 800c810:	f7f4 f97a 	bl	8000b08 <__aeabi_dcmpgt>
 800c814:	b138      	cbz	r0, 800c826 <floor+0x46>
 800c816:	2c00      	cmp	r4, #0
 800c818:	da57      	bge.n	800c8ca <floor+0xea>
 800c81a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c81e:	431d      	orrs	r5, r3
 800c820:	d001      	beq.n	800c826 <floor+0x46>
 800c822:	4c2d      	ldr	r4, [pc, #180]	; (800c8d8 <floor+0xf8>)
 800c824:	2500      	movs	r5, #0
 800c826:	4621      	mov	r1, r4
 800c828:	4628      	mov	r0, r5
 800c82a:	e025      	b.n	800c878 <floor+0x98>
 800c82c:	4f2b      	ldr	r7, [pc, #172]	; (800c8dc <floor+0xfc>)
 800c82e:	4137      	asrs	r7, r6
 800c830:	ea01 0307 	and.w	r3, r1, r7
 800c834:	4303      	orrs	r3, r0
 800c836:	d01f      	beq.n	800c878 <floor+0x98>
 800c838:	a325      	add	r3, pc, #148	; (adr r3, 800c8d0 <floor+0xf0>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fd1d 	bl	800027c <__adddf3>
 800c842:	2200      	movs	r2, #0
 800c844:	2300      	movs	r3, #0
 800c846:	f7f4 f95f 	bl	8000b08 <__aeabi_dcmpgt>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d0eb      	beq.n	800c826 <floor+0x46>
 800c84e:	2c00      	cmp	r4, #0
 800c850:	bfbe      	ittt	lt
 800c852:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c856:	fa43 f606 	asrlt.w	r6, r3, r6
 800c85a:	19a4      	addlt	r4, r4, r6
 800c85c:	ea24 0407 	bic.w	r4, r4, r7
 800c860:	2500      	movs	r5, #0
 800c862:	e7e0      	b.n	800c826 <floor+0x46>
 800c864:	2e33      	cmp	r6, #51	; 0x33
 800c866:	dd0b      	ble.n	800c880 <floor+0xa0>
 800c868:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c86c:	d104      	bne.n	800c878 <floor+0x98>
 800c86e:	ee10 2a10 	vmov	r2, s0
 800c872:	460b      	mov	r3, r1
 800c874:	f7f3 fd02 	bl	800027c <__adddf3>
 800c878:	ec41 0b10 	vmov	d0, r0, r1
 800c87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c880:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c888:	fa23 f707 	lsr.w	r7, r3, r7
 800c88c:	4207      	tst	r7, r0
 800c88e:	d0f3      	beq.n	800c878 <floor+0x98>
 800c890:	a30f      	add	r3, pc, #60	; (adr r3, 800c8d0 <floor+0xf0>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 fcf1 	bl	800027c <__adddf3>
 800c89a:	2200      	movs	r2, #0
 800c89c:	2300      	movs	r3, #0
 800c89e:	f7f4 f933 	bl	8000b08 <__aeabi_dcmpgt>
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d0bf      	beq.n	800c826 <floor+0x46>
 800c8a6:	2c00      	cmp	r4, #0
 800c8a8:	da02      	bge.n	800c8b0 <floor+0xd0>
 800c8aa:	2e14      	cmp	r6, #20
 800c8ac:	d103      	bne.n	800c8b6 <floor+0xd6>
 800c8ae:	3401      	adds	r4, #1
 800c8b0:	ea25 0507 	bic.w	r5, r5, r7
 800c8b4:	e7b7      	b.n	800c826 <floor+0x46>
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c8bc:	fa03 f606 	lsl.w	r6, r3, r6
 800c8c0:	4435      	add	r5, r6
 800c8c2:	4545      	cmp	r5, r8
 800c8c4:	bf38      	it	cc
 800c8c6:	18e4      	addcc	r4, r4, r3
 800c8c8:	e7f2      	b.n	800c8b0 <floor+0xd0>
 800c8ca:	2500      	movs	r5, #0
 800c8cc:	462c      	mov	r4, r5
 800c8ce:	e7aa      	b.n	800c826 <floor+0x46>
 800c8d0:	8800759c 	.word	0x8800759c
 800c8d4:	7e37e43c 	.word	0x7e37e43c
 800c8d8:	bff00000 	.word	0xbff00000
 800c8dc:	000fffff 	.word	0x000fffff

0800c8e0 <scalbn>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	ec55 4b10 	vmov	r4, r5, d0
 800c8e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	b99a      	cbnz	r2, 800c918 <scalbn+0x38>
 800c8f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8f4:	4323      	orrs	r3, r4
 800c8f6:	d036      	beq.n	800c966 <scalbn+0x86>
 800c8f8:	4b39      	ldr	r3, [pc, #228]	; (800c9e0 <scalbn+0x100>)
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	ee10 0a10 	vmov	r0, s0
 800c900:	2200      	movs	r2, #0
 800c902:	f7f3 fe71 	bl	80005e8 <__aeabi_dmul>
 800c906:	4b37      	ldr	r3, [pc, #220]	; (800c9e4 <scalbn+0x104>)
 800c908:	429e      	cmp	r6, r3
 800c90a:	4604      	mov	r4, r0
 800c90c:	460d      	mov	r5, r1
 800c90e:	da10      	bge.n	800c932 <scalbn+0x52>
 800c910:	a32b      	add	r3, pc, #172	; (adr r3, 800c9c0 <scalbn+0xe0>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	e03a      	b.n	800c98e <scalbn+0xae>
 800c918:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c91c:	428a      	cmp	r2, r1
 800c91e:	d10c      	bne.n	800c93a <scalbn+0x5a>
 800c920:	ee10 2a10 	vmov	r2, s0
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fca8 	bl	800027c <__adddf3>
 800c92c:	4604      	mov	r4, r0
 800c92e:	460d      	mov	r5, r1
 800c930:	e019      	b.n	800c966 <scalbn+0x86>
 800c932:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c936:	460b      	mov	r3, r1
 800c938:	3a36      	subs	r2, #54	; 0x36
 800c93a:	4432      	add	r2, r6
 800c93c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c940:	428a      	cmp	r2, r1
 800c942:	dd08      	ble.n	800c956 <scalbn+0x76>
 800c944:	2d00      	cmp	r5, #0
 800c946:	a120      	add	r1, pc, #128	; (adr r1, 800c9c8 <scalbn+0xe8>)
 800c948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94c:	da1c      	bge.n	800c988 <scalbn+0xa8>
 800c94e:	a120      	add	r1, pc, #128	; (adr r1, 800c9d0 <scalbn+0xf0>)
 800c950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c954:	e018      	b.n	800c988 <scalbn+0xa8>
 800c956:	2a00      	cmp	r2, #0
 800c958:	dd08      	ble.n	800c96c <scalbn+0x8c>
 800c95a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c95e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c962:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c966:	ec45 4b10 	vmov	d0, r4, r5
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c970:	da19      	bge.n	800c9a6 <scalbn+0xc6>
 800c972:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c976:	429e      	cmp	r6, r3
 800c978:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c97c:	dd0a      	ble.n	800c994 <scalbn+0xb4>
 800c97e:	a112      	add	r1, pc, #72	; (adr r1, 800c9c8 <scalbn+0xe8>)
 800c980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1e2      	bne.n	800c94e <scalbn+0x6e>
 800c988:	a30f      	add	r3, pc, #60	; (adr r3, 800c9c8 <scalbn+0xe8>)
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	f7f3 fe2b 	bl	80005e8 <__aeabi_dmul>
 800c992:	e7cb      	b.n	800c92c <scalbn+0x4c>
 800c994:	a10a      	add	r1, pc, #40	; (adr r1, 800c9c0 <scalbn+0xe0>)
 800c996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0b8      	beq.n	800c910 <scalbn+0x30>
 800c99e:	a10e      	add	r1, pc, #56	; (adr r1, 800c9d8 <scalbn+0xf8>)
 800c9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a4:	e7b4      	b.n	800c910 <scalbn+0x30>
 800c9a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9aa:	3236      	adds	r2, #54	; 0x36
 800c9ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	4b0c      	ldr	r3, [pc, #48]	; (800c9e8 <scalbn+0x108>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	e7e8      	b.n	800c98e <scalbn+0xae>
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	c2f8f359 	.word	0xc2f8f359
 800c9c4:	01a56e1f 	.word	0x01a56e1f
 800c9c8:	8800759c 	.word	0x8800759c
 800c9cc:	7e37e43c 	.word	0x7e37e43c
 800c9d0:	8800759c 	.word	0x8800759c
 800c9d4:	fe37e43c 	.word	0xfe37e43c
 800c9d8:	c2f8f359 	.word	0xc2f8f359
 800c9dc:	81a56e1f 	.word	0x81a56e1f
 800c9e0:	43500000 	.word	0x43500000
 800c9e4:	ffff3cb0 	.word	0xffff3cb0
 800c9e8:	3c900000 	.word	0x3c900000

0800c9ec <fabsf>:
 800c9ec:	ee10 3a10 	vmov	r3, s0
 800c9f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9f4:	ee00 3a10 	vmov	s0, r3
 800c9f8:	4770      	bx	lr
	...

0800c9fc <floorf>:
 800c9fc:	ee10 3a10 	vmov	r3, s0
 800ca00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ca04:	3a7f      	subs	r2, #127	; 0x7f
 800ca06:	2a16      	cmp	r2, #22
 800ca08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca0c:	dc2a      	bgt.n	800ca64 <floorf+0x68>
 800ca0e:	2a00      	cmp	r2, #0
 800ca10:	da11      	bge.n	800ca36 <floorf+0x3a>
 800ca12:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ca74 <floorf+0x78>
 800ca16:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca1a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	dd05      	ble.n	800ca30 <floorf+0x34>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	da23      	bge.n	800ca70 <floorf+0x74>
 800ca28:	4a13      	ldr	r2, [pc, #76]	; (800ca78 <floorf+0x7c>)
 800ca2a:	2900      	cmp	r1, #0
 800ca2c:	bf18      	it	ne
 800ca2e:	4613      	movne	r3, r2
 800ca30:	ee00 3a10 	vmov	s0, r3
 800ca34:	4770      	bx	lr
 800ca36:	4911      	ldr	r1, [pc, #68]	; (800ca7c <floorf+0x80>)
 800ca38:	4111      	asrs	r1, r2
 800ca3a:	420b      	tst	r3, r1
 800ca3c:	d0fa      	beq.n	800ca34 <floorf+0x38>
 800ca3e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ca74 <floorf+0x78>
 800ca42:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca4e:	ddef      	ble.n	800ca30 <floorf+0x34>
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bfbe      	ittt	lt
 800ca54:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ca58:	fa40 f202 	asrlt.w	r2, r0, r2
 800ca5c:	189b      	addlt	r3, r3, r2
 800ca5e:	ea23 0301 	bic.w	r3, r3, r1
 800ca62:	e7e5      	b.n	800ca30 <floorf+0x34>
 800ca64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ca68:	d3e4      	bcc.n	800ca34 <floorf+0x38>
 800ca6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca6e:	4770      	bx	lr
 800ca70:	2300      	movs	r3, #0
 800ca72:	e7dd      	b.n	800ca30 <floorf+0x34>
 800ca74:	7149f2ca 	.word	0x7149f2ca
 800ca78:	bf800000 	.word	0xbf800000
 800ca7c:	007fffff 	.word	0x007fffff

0800ca80 <scalbnf>:
 800ca80:	ee10 3a10 	vmov	r3, s0
 800ca84:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ca88:	d025      	beq.n	800cad6 <scalbnf+0x56>
 800ca8a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ca8e:	d302      	bcc.n	800ca96 <scalbnf+0x16>
 800ca90:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca94:	4770      	bx	lr
 800ca96:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ca9a:	d122      	bne.n	800cae2 <scalbnf+0x62>
 800ca9c:	4b2a      	ldr	r3, [pc, #168]	; (800cb48 <scalbnf+0xc8>)
 800ca9e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800cb4c <scalbnf+0xcc>
 800caa2:	4298      	cmp	r0, r3
 800caa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800caa8:	db16      	blt.n	800cad8 <scalbnf+0x58>
 800caaa:	ee10 3a10 	vmov	r3, s0
 800caae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cab2:	3a19      	subs	r2, #25
 800cab4:	4402      	add	r2, r0
 800cab6:	2afe      	cmp	r2, #254	; 0xfe
 800cab8:	dd15      	ble.n	800cae6 <scalbnf+0x66>
 800caba:	ee10 3a10 	vmov	r3, s0
 800cabe:	eddf 7a24 	vldr	s15, [pc, #144]	; 800cb50 <scalbnf+0xd0>
 800cac2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800cb54 <scalbnf+0xd4>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	eeb0 7a67 	vmov.f32	s14, s15
 800cacc:	bfb8      	it	lt
 800cace:	eef0 7a66 	vmovlt.f32	s15, s13
 800cad2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800cad6:	4770      	bx	lr
 800cad8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cb58 <scalbnf+0xd8>
 800cadc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cae0:	4770      	bx	lr
 800cae2:	0dd2      	lsrs	r2, r2, #23
 800cae4:	e7e6      	b.n	800cab4 <scalbnf+0x34>
 800cae6:	2a00      	cmp	r2, #0
 800cae8:	dd06      	ble.n	800caf8 <scalbnf+0x78>
 800caea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800caee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800caf2:	ee00 3a10 	vmov	s0, r3
 800caf6:	4770      	bx	lr
 800caf8:	f112 0f16 	cmn.w	r2, #22
 800cafc:	da1a      	bge.n	800cb34 <scalbnf+0xb4>
 800cafe:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cb02:	4298      	cmp	r0, r3
 800cb04:	ee10 3a10 	vmov	r3, s0
 800cb08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb0c:	dd0a      	ble.n	800cb24 <scalbnf+0xa4>
 800cb0e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cb50 <scalbnf+0xd0>
 800cb12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800cb54 <scalbnf+0xd4>
 800cb16:	eef0 7a40 	vmov.f32	s15, s0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	bf18      	it	ne
 800cb1e:	eeb0 0a47 	vmovne.f32	s0, s14
 800cb22:	e7db      	b.n	800cadc <scalbnf+0x5c>
 800cb24:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800cb58 <scalbnf+0xd8>
 800cb28:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800cb5c <scalbnf+0xdc>
 800cb2c:	eef0 7a40 	vmov.f32	s15, s0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	e7f3      	b.n	800cb1c <scalbnf+0x9c>
 800cb34:	3219      	adds	r2, #25
 800cb36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cb3e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cb60 <scalbnf+0xe0>
 800cb42:	ee07 3a10 	vmov	s14, r3
 800cb46:	e7c4      	b.n	800cad2 <scalbnf+0x52>
 800cb48:	ffff3cb0 	.word	0xffff3cb0
 800cb4c:	4c000000 	.word	0x4c000000
 800cb50:	7149f2ca 	.word	0x7149f2ca
 800cb54:	f149f2ca 	.word	0xf149f2ca
 800cb58:	0da24260 	.word	0x0da24260
 800cb5c:	8da24260 	.word	0x8da24260
 800cb60:	33000000 	.word	0x33000000

0800cb64 <_init>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr

0800cb70 <_fini>:
 800cb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb72:	bf00      	nop
 800cb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb76:	bc08      	pop	{r3}
 800cb78:	469e      	mov	lr, r3
 800cb7a:	4770      	bx	lr
